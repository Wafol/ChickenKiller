
ChickenKiller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  000011fa  0000128e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000076  00800146  00800146  000012d4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b16  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000be4  00000000  00000000  0000302e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000106a  00000000  00000000  00003c12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003dc  00000000  00000000  00004c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088e  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ddf  00000000  00000000  000058e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000066c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	d4 e0       	ldi	r29, 0x04	; 4
      3c:	de bf       	out	0x3e, r29	; 62
      3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
      40:	11 e0       	ldi	r17, 0x01	; 1
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	b1 e0       	ldi	r27, 0x01	; 1
      46:	ea ef       	ldi	r30, 0xFA	; 250
      48:	f1 e1       	ldi	r31, 0x11	; 17
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a6 34       	cpi	r26, 0x46	; 70
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	21 e0       	ldi	r18, 0x01	; 1
      58:	a6 e4       	ldi	r26, 0x46	; 70
      5a:	b1 e0       	ldi	r27, 0x01	; 1
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	ac 3b       	cpi	r26, 0xBC	; 188
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	6d d3       	rcall	.+1754   	; 0x742 <main>
      68:	c6 c8       	rjmp	.-3700   	; 0xfffff1f6 <__eeprom_end+0xff7ef1f6>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <checkAlarm>:
	next_minute = decimalToHex(minutes);
}

//vrati jestli je cas budiku stejny jak aktualni cas
bool checkAlarm() {
	return (next_hour == _hour) && (next_minute == _minute);
      6c:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <next_hour>
      70:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <next_hour+0x1>
      74:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <_hour>
      78:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <_hour+0x1>
      7c:	28 17       	cp	r18, r24
      7e:	39 07       	cpc	r19, r25
      80:	69 f4       	brne	.+26     	; 0x9c <checkAlarm+0x30>
      82:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <next_minute>
      86:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <next_minute+0x1>
      8a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <_minute>
      8e:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <_minute+0x1>
      92:	28 17       	cp	r18, r24
      94:	39 07       	cpc	r19, r25
      96:	21 f0       	breq	.+8      	; 0xa0 <checkAlarm+0x34>
      98:	80 e0       	ldi	r24, 0x00	; 0
      9a:	08 95       	ret
      9c:	80 e0       	ldi	r24, 0x00	; 0
      9e:	08 95       	ret
      a0:	81 e0       	ldi	r24, 0x01	; 1
}
      a2:	08 95       	ret

000000a4 <hourAndMinuteToMinutes>:
	int diference = last_time - first_time;
	return ((float) diference)/((float) month_sun_rises.days_count);
}

int hourAndMinuteToMinutes(uint8_t hour, uint8_t minute) {
	return (hour*60) + minute;
      a4:	70 e0       	ldi	r23, 0x00	; 0
}
      a6:	9b 01       	movw	r18, r22
      a8:	4c e3       	ldi	r20, 0x3C	; 60
      aa:	84 9f       	mul	r24, r20
      ac:	20 0d       	add	r18, r0
      ae:	31 1d       	adc	r19, r1
      b0:	11 24       	eor	r1, r1
      b2:	c9 01       	movw	r24, r18
      b4:	08 95       	ret

000000b6 <calculateDayAverageTimeChange>:
//vrati jestli je cas budiku stejny jak aktualni cas
bool checkAlarm() {
	return (next_hour == _hour) && (next_minute == _minute);
}

float calculateDayAverageTimeChange(struct MonthSunRises month_sun_rises) {
      b6:	cf 92       	push	r12
      b8:	df 92       	push	r13
      ba:	ef 92       	push	r14
      bc:	ff 92       	push	r15
      be:	0f 93       	push	r16
      c0:	1f 93       	push	r17
      c2:	cf 93       	push	r28
      c4:	df 93       	push	r29
      c6:	00 d0       	rcall	.+0      	; 0xc8 <calculateDayAverageTimeChange+0x12>
      c8:	00 d0       	rcall	.+0      	; 0xca <calculateDayAverageTimeChange+0x14>
      ca:	1f 92       	push	r1
      cc:	cd b7       	in	r28, 0x3d	; 61
      ce:	de b7       	in	r29, 0x3e	; 62
      d0:	d6 2e       	mov	r13, r22
      d2:	07 2f       	mov	r16, r23
      d4:	18 2f       	mov	r17, r24
	int first_time = hourAndMinuteToMinutes(month_sun_rises.first_hour, month_sun_rises.first_minute);
      d6:	65 2f       	mov	r22, r21
      d8:	84 2f       	mov	r24, r20
      da:	e4 df       	rcall	.-56     	; 0xa4 <hourAndMinuteToMinutes>
      dc:	7c 01       	movw	r14, r24
	int last_time = hourAndMinuteToMinutes(month_sun_rises.last_hour, month_sun_rises.last_minute);
      de:	60 2f       	mov	r22, r16
      e0:	8d 2d       	mov	r24, r13
      e2:	e0 df       	rcall	.-64     	; 0xa4 <hourAndMinuteToMinutes>
	
	int diference = last_time - first_time;
      e4:	8e 19       	sub	r24, r14
      e6:	9f 09       	sbc	r25, r15
	return ((float) diference)/((float) month_sun_rises.days_count);
      e8:	bc 01       	movw	r22, r24
      ea:	99 0f       	add	r25, r25
      ec:	88 0b       	sbc	r24, r24
      ee:	99 0b       	sbc	r25, r25
      f0:	94 d4       	rcall	.+2344   	; 0xa1a <__floatsisf>
      f2:	6b 01       	movw	r12, r22
      f4:	7c 01       	movw	r14, r24
      f6:	61 2f       	mov	r22, r17
      f8:	70 e0       	ldi	r23, 0x00	; 0
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	8b d4       	rcall	.+2326   	; 0xa16 <__floatunsisf>
     100:	9b 01       	movw	r18, r22
     102:	ac 01       	movw	r20, r24
     104:	c7 01       	movw	r24, r14
     106:	b6 01       	movw	r22, r12
     108:	ed d3       	rcall	.+2010   	; 0x8e4 <__divsf3>
}
     10a:	0f 90       	pop	r0
     10c:	0f 90       	pop	r0
     10e:	0f 90       	pop	r0
     110:	0f 90       	pop	r0
     112:	0f 90       	pop	r0
     114:	df 91       	pop	r29
     116:	cf 91       	pop	r28
     118:	1f 91       	pop	r17
     11a:	0f 91       	pop	r16
     11c:	ff 90       	pop	r15
     11e:	ef 90       	pop	r14
     120:	df 90       	pop	r13
     122:	cf 90       	pop	r12
     124:	08 95       	ret

00000126 <byteHexToDecimal>:
}

//0x21 -> 21
uint8_t byteHexToDecimal(int hex) { //max byte!!!!!!
	//in 0x21 it is digit "2"
	int second_degree = hex/16;
     126:	9c 01       	movw	r18, r24
     128:	99 23       	and	r25, r25
     12a:	14 f4       	brge	.+4      	; 0x130 <byteHexToDecimal+0xa>
     12c:	21 5f       	subi	r18, 0xF1	; 241
     12e:	3f 4f       	sbci	r19, 0xFF	; 255
     130:	35 95       	asr	r19
     132:	27 95       	ror	r18
     134:	35 95       	asr	r19
     136:	27 95       	ror	r18
     138:	35 95       	asr	r19
     13a:	27 95       	ror	r18
     13c:	35 95       	asr	r19
     13e:	27 95       	ror	r18
	int first_degree = hex - (16*second_degree);
     140:	a9 01       	movw	r20, r18
     142:	42 95       	swap	r20
     144:	52 95       	swap	r21
     146:	50 7f       	andi	r21, 0xF0	; 240
     148:	54 27       	eor	r21, r20
     14a:	40 7f       	andi	r20, 0xF0	; 240
     14c:	54 27       	eor	r21, r20
     14e:	84 1b       	sub	r24, r20
     150:	95 0b       	sbc	r25, r21
	
	return (second_degree*10) + first_degree;
     152:	22 0f       	add	r18, r18
     154:	92 2f       	mov	r25, r18
     156:	99 0f       	add	r25, r25
     158:	99 0f       	add	r25, r25
     15a:	29 0f       	add	r18, r25
}
     15c:	82 0f       	add	r24, r18
     15e:	08 95       	ret

00000160 <decimalToHex>:

//21 -> 0x21
int decimalToHex(uint8_t dec) {
	uint8_t second_degree = dec/10;
     160:	2d ec       	ldi	r18, 0xCD	; 205
     162:	82 9f       	mul	r24, r18
     164:	21 2d       	mov	r18, r1
     166:	11 24       	eor	r1, r1
     168:	26 95       	lsr	r18
     16a:	26 95       	lsr	r18
     16c:	26 95       	lsr	r18
	uint8_t first_degree = dec - (10*second_degree);
     16e:	32 2f       	mov	r19, r18
     170:	33 0f       	add	r19, r19
     172:	93 2f       	mov	r25, r19
     174:	99 0f       	add	r25, r25
     176:	99 0f       	add	r25, r25
     178:	93 0f       	add	r25, r19
     17a:	89 1b       	sub	r24, r25
	
	return (second_degree*16) + first_degree;
     17c:	90 e0       	ldi	r25, 0x00	; 0
}
     17e:	30 e1       	ldi	r19, 0x10	; 16
     180:	23 9f       	mul	r18, r19
     182:	80 0d       	add	r24, r0
     184:	91 1d       	adc	r25, r1
     186:	11 24       	eor	r1, r1
     188:	08 95       	ret

0000018a <setNextAlarm>:

//leden [0] -> prosinec [11]
struct MonthSunRises months_sun_rises[12];

//after_days = 1 => zitra
void setNextAlarm(uint8_t after_days) {
     18a:	cf 92       	push	r12
     18c:	df 92       	push	r13
     18e:	ef 92       	push	r14
     190:	ff 92       	push	r15
     192:	0f 93       	push	r16
     194:	1f 93       	push	r17
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	00 d0       	rcall	.+0      	; 0x19c <setNextAlarm+0x12>
     19c:	00 d0       	rcall	.+0      	; 0x19e <setNextAlarm+0x14>
     19e:	1f 92       	push	r1
     1a0:	cd b7       	in	r28, 0x3d	; 61
     1a2:	de b7       	in	r29, 0x3e	; 62
     1a4:	08 2f       	mov	r16, r24
	readCalendar();
     1a6:	fa d0       	rcall	.+500    	; 0x39c <readCalendar>
	uint8_t dec_month = byteHexToDecimal(_month) - 1; //-1 aby leden nebyl 1 ale 0
     1a8:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <_month>
     1ac:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <_month+0x1>
     1b0:	ba df       	rcall	.-140    	; 0x126 <byteHexToDecimal>
     1b2:	1f ef       	ldi	r17, 0xFF	; 255
     1b4:	18 0f       	add	r17, r24
	uint8_t dec_date = byteHexToDecimal(_date) - 1 + after_days; //day in month (-1 -> stejny duvod)
     1b6:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <_date>
     1ba:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <_date+0x1>
     1be:	b3 df       	rcall	.-154    	; 0x126 <byteHexToDecimal>
     1c0:	80 0f       	add	r24, r16
     1c2:	0f ef       	ldi	r16, 0xFF	; 255
     1c4:	08 0f       	add	r16, r24
	
	struct MonthSunRises month_sun_rises = months_sun_rises[dec_month];
     1c6:	e1 2f       	mov	r30, r17
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	cf 01       	movw	r24, r30
     1cc:	88 0f       	add	r24, r24
     1ce:	99 1f       	adc	r25, r25
     1d0:	88 0f       	add	r24, r24
     1d2:	99 1f       	adc	r25, r25
     1d4:	e8 0f       	add	r30, r24
     1d6:	f9 1f       	adc	r31, r25
     1d8:	ec 5a       	subi	r30, 0xAC	; 172
     1da:	fe 4f       	sbci	r31, 0xFE	; 254
     1dc:	85 e0       	ldi	r24, 0x05	; 5
     1de:	de 01       	movw	r26, r28
     1e0:	11 96       	adiw	r26, 0x01	; 1
     1e2:	01 90       	ld	r0, Z+
     1e4:	0d 92       	st	X+, r0
     1e6:	8a 95       	dec	r24
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <setNextAlarm+0x58>
	
	float average_change = calculateDayAverageTimeChange(month_sun_rises);
     1ea:	49 81       	ldd	r20, Y+1	; 0x01
     1ec:	5a 81       	ldd	r21, Y+2	; 0x02
     1ee:	6b 81       	ldd	r22, Y+3	; 0x03
     1f0:	7c 81       	ldd	r23, Y+4	; 0x04
     1f2:	8d 81       	ldd	r24, Y+5	; 0x05
     1f4:	60 df       	rcall	.-320    	; 0xb6 <calculateDayAverageTimeChange>
     1f6:	6b 01       	movw	r12, r22
     1f8:	7c 01       	movw	r14, r24
	int final_change = (int) (average_change*((float)dec_date)); //odchylka od (first_hour+first_hour)
     1fa:	60 2f       	mov	r22, r16
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	09 d4       	rcall	.+2066   	; 0xa16 <__floatunsisf>
     204:	9b 01       	movw	r18, r22
     206:	ac 01       	movw	r20, r24
     208:	c7 01       	movw	r24, r14
     20a:	b6 01       	movw	r22, r12
     20c:	92 d4       	rcall	.+2340   	; 0xb32 <__mulsf3>
     20e:	d2 d3       	rcall	.+1956   	; 0x9b4 <__fixsfsi>
     210:	6b 01       	movw	r12, r22
     212:	7c 01       	movw	r14, r24
	
	int first_time_minutes = hourAndMinuteToMinutes(month_sun_rises.first_hour, month_sun_rises.first_minute);
     214:	6a 81       	ldd	r22, Y+2	; 0x02
     216:	89 81       	ldd	r24, Y+1	; 0x01
     218:	45 df       	rcall	.-374    	; 0xa4 <hourAndMinuteToMinutes>
	
	int final_time_minutes = first_time_minutes + final_change;
     21a:	c8 0e       	add	r12, r24
     21c:	d9 1e       	adc	r13, r25
	//minutes to hours and minutes
	uint8_t hours = final_time_minutes/60;
     21e:	c6 01       	movw	r24, r12
     220:	6c e3       	ldi	r22, 0x3C	; 60
     222:	70 e0       	ldi	r23, 0x00	; 0
     224:	e9 d4       	rcall	.+2514   	; 0xbf8 <__divmodhi4>
     226:	86 2f       	mov	r24, r22
	uint8_t minutes = final_time_minutes - (hours*60);
     228:	9c e3       	ldi	r25, 0x3C	; 60
     22a:	69 9f       	mul	r22, r25
     22c:	c0 18       	sub	r12, r0
     22e:	11 24       	eor	r1, r1
	
	next_hour = decimalToHex(hours);
     230:	97 df       	rcall	.-210    	; 0x160 <decimalToHex>
     232:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <next_hour+0x1>
     236:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <next_hour>
	next_minute = decimalToHex(minutes);
     23a:	8c 2d       	mov	r24, r12
     23c:	91 df       	rcall	.-222    	; 0x160 <decimalToHex>
     23e:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <next_minute+0x1>
     242:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <next_minute>
}
     246:	0f 90       	pop	r0
     248:	0f 90       	pop	r0
     24a:	0f 90       	pop	r0
     24c:	0f 90       	pop	r0
     24e:	0f 90       	pop	r0
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	1f 91       	pop	r17
     256:	0f 91       	pop	r16
     258:	ff 90       	pop	r15
     25a:	ef 90       	pop	r14
     25c:	df 90       	pop	r13
     25e:	cf 90       	pop	r12
     260:	08 95       	ret

00000262 <initMonthsSunRises>:
	return (second_degree*16) + first_degree;
}

void initMonthsSunRises() {
	//leden
	months_sun_rises[0].first_hour = 7;
     262:	e4 e5       	ldi	r30, 0x54	; 84
     264:	f1 e0       	ldi	r31, 0x01	; 1
     266:	27 e0       	ldi	r18, 0x07	; 7
     268:	20 83       	st	Z, r18
	months_sun_rises[0].first_minute = 54;
     26a:	66 e3       	ldi	r22, 0x36	; 54
     26c:	61 83       	std	Z+1, r22	; 0x01
	months_sun_rises[0].last_hour = 7;
     26e:	22 83       	std	Z+2, r18	; 0x02
	months_sun_rises[0].last_minute = 33;
     270:	81 e2       	ldi	r24, 0x21	; 33
     272:	83 83       	std	Z+3, r24	; 0x03
	months_sun_rises[0].days_count = 31;
     274:	9f e1       	ldi	r25, 0x1F	; 31
     276:	94 83       	std	Z+4, r25	; 0x04
	
	//unor
	months_sun_rises[1].first_hour = 7;
     278:	25 83       	std	Z+5, r18	; 0x05
	months_sun_rises[1].first_minute = 31;
     27a:	96 83       	std	Z+6, r25	; 0x06
	months_sun_rises[1].last_hour = 6;
     27c:	86 e0       	ldi	r24, 0x06	; 6
     27e:	87 83       	std	Z+7, r24	; 0x07
	months_sun_rises[1].last_minute = 44;
     280:	3c e2       	ldi	r19, 0x2C	; 44
     282:	30 87       	std	Z+8, r19	; 0x08
	months_sun_rises[1].days_count = 28;
     284:	3c e1       	ldi	r19, 0x1C	; 28
     286:	31 87       	std	Z+9, r19	; 0x09
	
	//brezen
	months_sun_rises[2].first_hour = 6;
     288:	82 87       	std	Z+10, r24	; 0x0a
	months_sun_rises[2].first_minute = 42;
     28a:	3a e2       	ldi	r19, 0x2A	; 42
     28c:	33 87       	std	Z+11, r19	; 0x0b
	months_sun_rises[2].last_hour = 6;
     28e:	84 87       	std	Z+12, r24	; 0x0c
	months_sun_rises[2].last_minute = 38;
     290:	36 e2       	ldi	r19, 0x26	; 38
     292:	35 87       	std	Z+13, r19	; 0x0d
	months_sun_rises[2].days_count = 31;
     294:	96 87       	std	Z+14, r25	; 0x0e
	
	//duben
	months_sun_rises[3].first_hour = 6;
     296:	87 87       	std	Z+15, r24	; 0x0f
	months_sun_rises[3].first_minute = 35;
     298:	33 e2       	ldi	r19, 0x23	; 35
     29a:	30 8b       	std	Z+16, r19	; 0x10
	months_sun_rises[3].last_hour = 5;
     29c:	45 e0       	ldi	r20, 0x05	; 5
     29e:	41 8b       	std	Z+17, r20	; 0x11
	months_sun_rises[3].last_minute = 36;
     2a0:	34 e2       	ldi	r19, 0x24	; 36
     2a2:	32 8b       	std	Z+18, r19	; 0x12
	months_sun_rises[3].days_count = 30;
     2a4:	3e e1       	ldi	r19, 0x1E	; 30
     2a6:	33 8b       	std	Z+19, r19	; 0x13
	
	//kveten
	months_sun_rises[4].first_hour = 5;
     2a8:	44 8b       	std	Z+20, r20	; 0x14
	months_sun_rises[4].first_minute = 34;
     2aa:	52 e2       	ldi	r21, 0x22	; 34
     2ac:	55 8b       	std	Z+21, r21	; 0x15
	months_sun_rises[4].last_hour = 4;
     2ae:	54 e0       	ldi	r21, 0x04	; 4
     2b0:	56 8b       	std	Z+22, r21	; 0x16
	months_sun_rises[4].last_minute = 53;
     2b2:	75 e3       	ldi	r23, 0x35	; 53
     2b4:	77 8b       	std	Z+23, r23	; 0x17
	months_sun_rises[4].days_count = 31;
     2b6:	90 8f       	std	Z+24, r25	; 0x18
	
	//cerven
	months_sun_rises[5].first_hour = 4;
     2b8:	51 8f       	std	Z+25, r21	; 0x19
	months_sun_rises[5].first_minute = 52;
     2ba:	a4 e3       	ldi	r26, 0x34	; 52
     2bc:	a2 8f       	std	Z+26, r26	; 0x1a
	months_sun_rises[5].last_hour = 4;
     2be:	53 8f       	std	Z+27, r21	; 0x1b
	months_sun_rises[5].last_minute = 49;
     2c0:	b1 e3       	ldi	r27, 0x31	; 49
     2c2:	b4 8f       	std	Z+28, r27	; 0x1c
	months_sun_rises[5].days_count = 30;
     2c4:	35 8f       	std	Z+29, r19	; 0x1d
	
	//cervenec
	months_sun_rises[6].first_hour = 4;
     2c6:	56 8f       	std	Z+30, r21	; 0x1e
	months_sun_rises[6].first_minute = 50;
     2c8:	52 e3       	ldi	r21, 0x32	; 50
     2ca:	57 8f       	std	Z+31, r21	; 0x1f
	months_sun_rises[6].last_hour = 5;
     2cc:	40 a3       	std	Z+32, r20	; 0x20
	months_sun_rises[6].last_minute = 21;
     2ce:	55 e1       	ldi	r21, 0x15	; 21
     2d0:	51 a3       	std	Z+33, r21	; 0x21
	months_sun_rises[6].days_count = 31;
     2d2:	92 a3       	std	Z+34, r25	; 0x22
	
	//srpen
	months_sun_rises[7].first_hour = 5;
     2d4:	43 a3       	std	Z+35, r20	; 0x23
	months_sun_rises[7].first_minute = 23;
     2d6:	47 e1       	ldi	r20, 0x17	; 23
     2d8:	44 a3       	std	Z+36, r20	; 0x24
	months_sun_rises[7].last_hour = 6;
     2da:	85 a3       	std	Z+37, r24	; 0x25
	months_sun_rises[7].last_minute = 07;
     2dc:	26 a3       	std	Z+38, r18	; 0x26
	months_sun_rises[7].days_count = 31;
     2de:	97 a3       	std	Z+39, r25	; 0x27
	
	//zari
	months_sun_rises[8].first_hour = 6;
     2e0:	80 a7       	std	Z+40, r24	; 0x28
	months_sun_rises[8].first_minute = 8;
     2e2:	48 e0       	ldi	r20, 0x08	; 8
     2e4:	41 a7       	std	Z+41, r20	; 0x29
	months_sun_rises[8].last_hour = 6;
     2e6:	82 a7       	std	Z+42, r24	; 0x2a
	months_sun_rises[8].last_minute = 52;
     2e8:	a3 a7       	std	Z+43, r26	; 0x2b
	months_sun_rises[8].days_count = 30;
     2ea:	34 a7       	std	Z+44, r19	; 0x2c
	
	//rijen
	months_sun_rises[9].first_hour = 6;
     2ec:	85 a7       	std	Z+45, r24	; 0x2d
	months_sun_rises[9].first_minute = 53;
     2ee:	76 a7       	std	Z+46, r23	; 0x2e
	months_sun_rises[9].last_hour = 6;
     2f0:	87 a7       	std	Z+47, r24	; 0x2f
	months_sun_rises[9].last_minute = 41;
     2f2:	49 e2       	ldi	r20, 0x29	; 41
     2f4:	40 ab       	std	Z+48, r20	; 0x30
	months_sun_rises[9].days_count = 31;	
     2f6:	91 ab       	std	Z+49, r25	; 0x31
	
	//listopad
	months_sun_rises[10].first_hour = 6;
     2f8:	82 ab       	std	Z+50, r24	; 0x32
	months_sun_rises[10].first_minute = 43;
     2fa:	8b e2       	ldi	r24, 0x2B	; 43
     2fc:	83 ab       	std	Z+51, r24	; 0x33
	months_sun_rises[10].last_hour = 7;
     2fe:	24 ab       	std	Z+52, r18	; 0x34
	months_sun_rises[10].last_minute = 29;
     300:	8d e1       	ldi	r24, 0x1D	; 29
     302:	85 ab       	std	Z+53, r24	; 0x35
	months_sun_rises[10].days_count = 30;
     304:	36 ab       	std	Z+54, r19	; 0x36
	
	//prosinec
	months_sun_rises[11].first_hour = 7;
     306:	27 ab       	std	Z+55, r18	; 0x37
	months_sun_rises[11].first_minute = 30;
     308:	30 af       	std	Z+56, r19	; 0x38
	months_sun_rises[11].last_hour = 7;
     30a:	21 af       	std	Z+57, r18	; 0x39
	months_sun_rises[11].last_minute = 54;
     30c:	62 af       	std	Z+58, r22	; 0x3a
	months_sun_rises[11].days_count = 31;
     30e:	93 af       	std	Z+59, r25	; 0x3b
     310:	08 95       	ret

00000312 <clockInit>:
void RTC_Clock_Write(char hour, char minute, char second, char AMPM);

char* days[7] = {"Mon","Tue","Wed","Thu","Fri","Sat","Sun"};

void clockInit() {
	I2C_Init();										// Initialize I2C
     312:	88 d0       	rcall	.+272    	; 0x424 <I2C_Init>
     314:	08 95       	ret

00000316 <RTC_Read_Clock>:
//data will be stored at date,month... int variables (at ClockManager.h)
void readCalendar() {
	RTC_Read_Calendar(3);
}

void RTC_Read_Clock(char read_clock_address) {
     316:	cf 93       	push	r28
     318:	c8 2f       	mov	r28, r24
	I2C_Start(Device_Write_address);				// Start I2C communication with RTC
     31a:	80 ed       	ldi	r24, 0xD0	; 208
     31c:	89 d0       	rcall	.+274    	; 0x430 <I2C_Start>
	I2C_Write(read_clock_address);					// Write address to read
     31e:	8c 2f       	mov	r24, r28
     320:	d7 d0       	rcall	.+430    	; 0x4d0 <I2C_Write>
	I2C_Repeated_Start(Device_Read_address);		// Repeated start with device read address
     322:	81 ed       	ldi	r24, 0xD1	; 209
     324:	a9 d0       	rcall	.+338    	; 0x478 <I2C_Repeated_Start>

	_second = I2C_Read_Ack();						// Read second
     326:	ea d0       	rcall	.+468    	; 0x4fc <I2C_Read_Ack>
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <_second+0x1>
     32e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <_second>
	_minute = I2C_Read_Ack();						// Read minute
     332:	e4 d0       	rcall	.+456    	; 0x4fc <I2C_Read_Ack>
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <_minute+0x1>
     33a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <_minute>
	_hour = I2C_Read_Nack();							// Read hour with Nack
     33e:	e8 d0       	rcall	.+464    	; 0x510 <I2C_Read_Nack>
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <_hour+0x1>
     346:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <_hour>
	I2C_Stop();										// Stop i2C communication
     34a:	ba d0       	rcall	.+372    	; 0x4c0 <I2C_Stop>
}
     34c:	cf 91       	pop	r28
     34e:	08 95       	ret

00000350 <readClock>:
	I2C_Init();										// Initialize I2C
}

//data will be stored at second,minute... int variables (at ClockManager.h)
void readClock() {
	RTC_Read_Clock(0);
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	e1 df       	rcall	.-62     	; 0x316 <RTC_Read_Clock>
     354:	08 95       	ret

00000356 <RTC_Read_Calendar>:
	_second = I2C_Read_Ack();						// Read second
	_minute = I2C_Read_Ack();						// Read minute
	_hour = I2C_Read_Nack();							// Read hour with Nack
	I2C_Stop();										// Stop i2C communication
}
void RTC_Read_Calendar(char read_calendar_address) {
     356:	cf 93       	push	r28
     358:	c8 2f       	mov	r28, r24
	I2C_Start(Device_Write_address);
     35a:	80 ed       	ldi	r24, 0xD0	; 208
     35c:	69 d0       	rcall	.+210    	; 0x430 <I2C_Start>
	I2C_Write(read_calendar_address);
     35e:	8c 2f       	mov	r24, r28
     360:	b7 d0       	rcall	.+366    	; 0x4d0 <I2C_Write>
	I2C_Repeated_Start(Device_Read_address);
     362:	81 ed       	ldi	r24, 0xD1	; 209
     364:	89 d0       	rcall	.+274    	; 0x478 <I2C_Repeated_Start>

	_day = I2C_Read_Ack();							// Read day
     366:	ca d0       	rcall	.+404    	; 0x4fc <I2C_Read_Ack>
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <_day+0x1>
     36e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <_day>
	_date = I2C_Read_Ack();							// Read date
     372:	c4 d0       	rcall	.+392    	; 0x4fc <I2C_Read_Ack>
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <_date+0x1>
     37a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <_date>
	_month = I2C_Read_Ack();							// Read month
     37e:	be d0       	rcall	.+380    	; 0x4fc <I2C_Read_Ack>
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <_month+0x1>
     386:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <_month>
	_year = I2C_Read_Nack();							// Read the year with Nack
     38a:	c2 d0       	rcall	.+388    	; 0x510 <I2C_Read_Nack>
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <__data_end+0x1>
     392:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
	I2C_Stop();										// Stop i2C communication
     396:	94 d0       	rcall	.+296    	; 0x4c0 <I2C_Stop>
}
     398:	cf 91       	pop	r28
     39a:	08 95       	ret

0000039c <readCalendar>:
	RTC_Read_Clock(0);
}

//data will be stored at date,month... int variables (at ClockManager.h)
void readCalendar() {
	RTC_Read_Calendar(3);
     39c:	83 e0       	ldi	r24, 0x03	; 3
     39e:	db df       	rcall	.-74     	; 0x356 <RTC_Read_Calendar>
     3a0:	08 95       	ret

000003a2 <RTC_Clock_Write>:


///////////////write////////////////////
#define hour_24					0x00

void RTC_Clock_Write(char hour, char minute, char second, char AMPM) {
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	d6 2f       	mov	r29, r22
     3aa:	14 2f       	mov	r17, r20
	hour |= AMPM;
     3ac:	c8 2f       	mov	r28, r24
     3ae:	c2 2b       	or	r28, r18
	I2C_Start(Device_Write_address);			// Start I2C communication with RTC
     3b0:	80 ed       	ldi	r24, 0xD0	; 208
     3b2:	3e d0       	rcall	.+124    	; 0x430 <I2C_Start>
	I2C_Write(0);								// Write on 0 location for second value
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	8c d0       	rcall	.+280    	; 0x4d0 <I2C_Write>
	I2C_Write(second);							// Write second value on 00 location
     3b8:	81 2f       	mov	r24, r17
     3ba:	8a d0       	rcall	.+276    	; 0x4d0 <I2C_Write>
	I2C_Write(minute);							// Write minute value on 01 location
     3bc:	8d 2f       	mov	r24, r29
     3be:	88 d0       	rcall	.+272    	; 0x4d0 <I2C_Write>
	I2C_Write(hour);							// Write hour value on 02 location
     3c0:	8c 2f       	mov	r24, r28
     3c2:	86 d0       	rcall	.+268    	; 0x4d0 <I2C_Write>
	I2C_Stop();									// Stop I2C communication
     3c4:	7d d0       	rcall	.+250    	; 0x4c0 <I2C_Stop>
}
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	1f 91       	pop	r17
     3cc:	08 95       	ret

000003ce <RTC_Calendar_Write>:

void RTC_Calendar_Write(char day, char date, char month, char year)	{ // function for calendar
     3ce:	0f 93       	push	r16
     3d0:	1f 93       	push	r17
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	08 2f       	mov	r16, r24
     3d8:	16 2f       	mov	r17, r22
     3da:	d4 2f       	mov	r29, r20
     3dc:	c2 2f       	mov	r28, r18

	I2C_Start(Device_Write_address);			// Start I2C communication with RTC
     3de:	80 ed       	ldi	r24, 0xD0	; 208
     3e0:	27 d0       	rcall	.+78     	; 0x430 <I2C_Start>
	I2C_Write(3);								// Write on 3 location for day value
     3e2:	83 e0       	ldi	r24, 0x03	; 3
     3e4:	75 d0       	rcall	.+234    	; 0x4d0 <I2C_Write>
	I2C_Write(day);							// Write day value on 03 location
     3e6:	80 2f       	mov	r24, r16
     3e8:	73 d0       	rcall	.+230    	; 0x4d0 <I2C_Write>
	I2C_Write(date);							// Write date value on 04 location
     3ea:	81 2f       	mov	r24, r17
     3ec:	71 d0       	rcall	.+226    	; 0x4d0 <I2C_Write>
	I2C_Write(month);							// Write month value on 05 location
     3ee:	8d 2f       	mov	r24, r29
     3f0:	6f d0       	rcall	.+222    	; 0x4d0 <I2C_Write>
	I2C_Write(year);							// Write year value on 06 location
     3f2:	8c 2f       	mov	r24, r28
     3f4:	6d d0       	rcall	.+218    	; 0x4d0 <I2C_Write>
	I2C_Stop();									// Stop I2C communication
     3f6:	64 d0       	rcall	.+200    	; 0x4c0 <I2C_Stop>
}
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	08 95       	ret

00000402 <setClockAndCalendar>:


//day -> 0x00-Sobota, 0x06-Patek
void setClockAndCalendar(uint8_t hour, uint8_t minute, uint8_t second, uint8_t day, uint8_t date, uint8_t month, uint8_t year) {
     402:	cf 92       	push	r12
     404:	ef 92       	push	r14
     406:	0f 93       	push	r16
     408:	cf 93       	push	r28
     40a:	c2 2f       	mov	r28, r18
	RTC_Clock_Write(hour, minute, second, hour_24);// Write Hour Minute Second Format
     40c:	20 e0       	ldi	r18, 0x00	; 0
     40e:	c9 df       	rcall	.-110    	; 0x3a2 <RTC_Clock_Write>
	RTC_Calendar_Write(day, date, month, year);	// Write day date month and year
     410:	2c 2d       	mov	r18, r12
     412:	4e 2d       	mov	r20, r14
     414:	60 2f       	mov	r22, r16
     416:	8c 2f       	mov	r24, r28
     418:	da df       	rcall	.-76     	; 0x3ce <RTC_Calendar_Write>
     41a:	cf 91       	pop	r28
     41c:	0f 91       	pop	r16
     41e:	ef 90       	pop	r14
     420:	cf 90       	pop	r12
     422:	08 95       	ret

00000424 <I2C_Init>:
			I2C_Stop();										/* If not then generate stop condition */
			continue;										/* continue with start loop again */
		}
		break;												/* If yes then break loop */
	}
}
     424:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
     428:	8f ef       	ldi	r24, 0xFF	; 255
     42a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7fe0b8>
     42e:	08 95       	ret

00000430 <I2C_Start>:
     430:	94 ea       	ldi	r25, 0xA4	; 164
     432:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     436:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     43a:	99 23       	and	r25, r25
     43c:	e4 f7       	brge	.-8      	; 0x436 <I2C_Start+0x6>
     43e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
     442:	98 7f       	andi	r25, 0xF8	; 248
     444:	98 30       	cpi	r25, 0x08	; 8
     446:	91 f4       	brne	.+36     	; 0x46c <I2C_Start+0x3c>
     448:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
     44c:	84 e8       	ldi	r24, 0x84	; 132
     44e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     452:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     456:	88 23       	and	r24, r24
     458:	e4 f7       	brge	.-8      	; 0x452 <I2C_Start+0x22>
     45a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
     45e:	88 7f       	andi	r24, 0xF8	; 248
     460:	88 31       	cpi	r24, 0x18	; 24
     462:	31 f0       	breq	.+12     	; 0x470 <I2C_Start+0x40>
     464:	80 32       	cpi	r24, 0x20	; 32
     466:	31 f4       	brne	.+12     	; 0x474 <I2C_Start+0x44>
     468:	82 e0       	ldi	r24, 0x02	; 2
     46a:	08 95       	ret
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	08 95       	ret
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	08 95       	ret
     474:	83 e0       	ldi	r24, 0x03	; 3
     476:	08 95       	ret

00000478 <I2C_Repeated_Start>:
     478:	94 ea       	ldi	r25, 0xA4	; 164
     47a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     47e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     482:	99 23       	and	r25, r25
     484:	e4 f7       	brge	.-8      	; 0x47e <I2C_Repeated_Start+0x6>
     486:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
     48a:	98 7f       	andi	r25, 0xF8	; 248
     48c:	90 31       	cpi	r25, 0x10	; 16
     48e:	91 f4       	brne	.+36     	; 0x4b4 <I2C_Repeated_Start+0x3c>
     490:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
     494:	84 e8       	ldi	r24, 0x84	; 132
     496:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     49a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     49e:	88 23       	and	r24, r24
     4a0:	e4 f7       	brge	.-8      	; 0x49a <I2C_Repeated_Start+0x22>
     4a2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
     4a6:	88 7f       	andi	r24, 0xF8	; 248
     4a8:	80 34       	cpi	r24, 0x40	; 64
     4aa:	31 f0       	breq	.+12     	; 0x4b8 <I2C_Repeated_Start+0x40>
     4ac:	80 32       	cpi	r24, 0x20	; 32
     4ae:	31 f4       	brne	.+12     	; 0x4bc <I2C_Repeated_Start+0x44>
     4b0:	82 e0       	ldi	r24, 0x02	; 2
     4b2:	08 95       	ret
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	08 95       	ret
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	08 95       	ret
     4bc:	83 e0       	ldi	r24, 0x03	; 3
     4be:	08 95       	ret

000004c0 <I2C_Stop>:
     4c0:	84 e9       	ldi	r24, 0x94	; 148
     4c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     4c6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     4ca:	84 fd       	sbrc	r24, 4
     4cc:	fc cf       	rjmp	.-8      	; 0x4c6 <I2C_Stop+0x6>
     4ce:	08 95       	ret

000004d0 <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
     4d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     4d4:	84 e8       	ldi	r24, 0x84	; 132
     4d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     4da:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     4de:	88 23       	and	r24, r24
     4e0:	e4 f7       	brge	.-8      	; 0x4da <I2C_Write+0xa>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     4e2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
     4e6:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
     4e8:	88 32       	cpi	r24, 0x28	; 40
     4ea:	21 f0       	breq	.+8      	; 0x4f4 <I2C_Write+0x24>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
     4ec:	80 33       	cpi	r24, 0x30	; 48
     4ee:	21 f4       	brne	.+8      	; 0x4f8 <I2C_Write+0x28>
	return 1;												/* If yes then return 1 to indicate nack received */
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
     4f8:	82 e0       	ldi	r24, 0x02	; 2
}
     4fa:	08 95       	ret

000004fc <I2C_Read_Ack>:

char I2C_Read_Ack()											/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     4fc:	84 ec       	ldi	r24, 0xC4	; 196
     4fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     502:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     506:	88 23       	and	r24, r24
     508:	e4 f7       	brge	.-8      	; 0x502 <__stack+0x3>
	return TWDR;											/* Return received data */
     50a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
}	
     50e:	08 95       	ret

00000510 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     510:	84 e8       	ldi	r24, 0x84	; 132
     512:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     516:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     51a:	88 23       	and	r24, r24
     51c:	e4 f7       	brge	.-8      	; 0x516 <I2C_Read_Nack+0x6>
	return TWDR;											/* Return received data */
     51e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
}	
     522:	08 95       	ret

00000524 <lcdcommand>:
 */ 
#include "LCD16x2_4bit.h"

void lcdcommand(unsigned char cmnd)
{
	LCD_DPRT = (LCD_DPRT & 0x0f)|(cmnd & 0xf0);		/* SEND COMMAND TO DATA PORT */
     524:	9b b1       	in	r25, 0x0b	; 11
     526:	9f 70       	andi	r25, 0x0F	; 15
     528:	28 2f       	mov	r18, r24
     52a:	20 7f       	andi	r18, 0xF0	; 240
     52c:	92 2b       	or	r25, r18
     52e:	9b b9       	out	0x0b, r25	; 11
	LCD_DPRT &= ~ (1<<LCD_RS);						/* RS = 0 FOR COMMAND */
     530:	9b b1       	in	r25, 0x0b	; 11
     532:	9e 7f       	andi	r25, 0xFE	; 254
     534:	9b b9       	out	0x0b, r25	; 11
	LCD_DPRT |= (1<<LCD_EN);						/* EN = 1 FOR H TO L PULSE */
     536:	9b b1       	in	r25, 0x0b	; 11
     538:	92 60       	ori	r25, 0x02	; 2
     53a:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     53c:	00 00       	nop
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
     53e:	9b b1       	in	r25, 0x0b	; 11
     540:	9d 7f       	andi	r25, 0xFD	; 253
     542:	9b b9       	out	0x0b, r25	; 11
     544:	31 e2       	ldi	r19, 0x21	; 33
     546:	3a 95       	dec	r19
     548:	f1 f7       	brne	.-4      	; 0x546 <lcdcommand+0x22>
     54a:	00 00       	nop
	_delay_us(100);									/* WAIT FOR MAKE ENABLE WIDE */
	
	LCD_DPRT = (LCD_DPRT & 0x0f)|(cmnd << 4);		/* SEND COMMAND TO DATA PORT */
     54c:	2b b1       	in	r18, 0x0b	; 11
     54e:	30 e1       	ldi	r19, 0x10	; 16
     550:	83 9f       	mul	r24, r19
     552:	c0 01       	movw	r24, r0
     554:	11 24       	eor	r1, r1
     556:	92 2f       	mov	r25, r18
     558:	9f 70       	andi	r25, 0x0F	; 15
     55a:	89 2b       	or	r24, r25
     55c:	8b b9       	out	0x0b, r24	; 11
	LCD_DPRT |= (1<<LCD_EN);						/* EN = 1 FOR H TO L PULSE */
     55e:	8b b1       	in	r24, 0x0b	; 11
     560:	82 60       	ori	r24, 0x02	; 2
     562:	8b b9       	out	0x0b, r24	; 11
     564:	00 00       	nop
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
     566:	8b b1       	in	r24, 0x0b	; 11
     568:	8d 7f       	andi	r24, 0xFD	; 253
     56a:	8b b9       	out	0x0b, r24	; 11
     56c:	83 ef       	ldi	r24, 0xF3	; 243
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	01 97       	sbiw	r24, 0x01	; 1
     572:	f1 f7       	brne	.-4      	; 0x570 <lcdcommand+0x4c>
     574:	00 c0       	rjmp	.+0      	; 0x576 <lcdcommand+0x52>
     576:	00 00       	nop
     578:	08 95       	ret

0000057a <lcddata>:
	_delay_us(2000);								/* WAIT FOR MAKE ENABLE WIDE */
}

void lcddata(unsigned char data)
{
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data & 0xf0);		/* SEND DATA TO DATA PORT */
     57a:	9b b1       	in	r25, 0x0b	; 11
     57c:	9f 70       	andi	r25, 0x0F	; 15
     57e:	28 2f       	mov	r18, r24
     580:	20 7f       	andi	r18, 0xF0	; 240
     582:	92 2b       	or	r25, r18
     584:	9b b9       	out	0x0b, r25	; 11
	LCD_DPRT |= (1<<LCD_RS);						/* MAKE RS = 1 FOR DATA */
     586:	9b b1       	in	r25, 0x0b	; 11
     588:	91 60       	ori	r25, 0x01	; 1
     58a:	9b b9       	out	0x0b, r25	; 11
	LCD_DPRT |= (1<<LCD_EN);						/* EN=0 FOR H TO L PULSE */
     58c:	9b b1       	in	r25, 0x0b	; 11
     58e:	92 60       	ori	r25, 0x02	; 2
     590:	9b b9       	out	0x0b, r25	; 11
     592:	00 00       	nop
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
     594:	9b b1       	in	r25, 0x0b	; 11
     596:	9d 7f       	andi	r25, 0xFD	; 253
     598:	9b b9       	out	0x0b, r25	; 11
     59a:	31 e2       	ldi	r19, 0x21	; 33
     59c:	3a 95       	dec	r19
     59e:	f1 f7       	brne	.-4      	; 0x59c <lcddata+0x22>
     5a0:	00 00       	nop
	_delay_us(100);									/* WAIT FOR MAKE ENABLE WIDE */
	
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data << 4);		/*  */
     5a2:	2b b1       	in	r18, 0x0b	; 11
     5a4:	30 e1       	ldi	r19, 0x10	; 16
     5a6:	83 9f       	mul	r24, r19
     5a8:	c0 01       	movw	r24, r0
     5aa:	11 24       	eor	r1, r1
     5ac:	92 2f       	mov	r25, r18
     5ae:	9f 70       	andi	r25, 0x0F	; 15
     5b0:	89 2b       	or	r24, r25
     5b2:	8b b9       	out	0x0b, r24	; 11
	LCD_DPRT |= (1<<LCD_EN);						/* EN=0 FOR H TO L PULSE*/
     5b4:	8b b1       	in	r24, 0x0b	; 11
     5b6:	82 60       	ori	r24, 0x02	; 2
     5b8:	8b b9       	out	0x0b, r24	; 11
     5ba:	00 00       	nop
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE*/
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE*/
     5bc:	8b b1       	in	r24, 0x0b	; 11
     5be:	8d 7f       	andi	r24, 0xFD	; 253
     5c0:	8b b9       	out	0x0b, r24	; 11
     5c2:	83 ef       	ldi	r24, 0xF3	; 243
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	01 97       	sbiw	r24, 0x01	; 1
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <lcddata+0x4c>
     5ca:	00 c0       	rjmp	.+0      	; 0x5cc <lcddata+0x52>
     5cc:	00 00       	nop
     5ce:	08 95       	ret

000005d0 <lcdinit>:
	_delay_us(2000);								/* WAIT FOR MAKE ENABLE WIDE*/
}

void lcdinit()
{
	LCD_DDDR = 0xFF;
     5d0:	8f ef       	ldi	r24, 0xFF	; 255
     5d2:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5d4:	8f e4       	ldi	r24, 0x4F	; 79
     5d6:	93 ec       	ldi	r25, 0xC3	; 195
     5d8:	01 97       	sbiw	r24, 0x01	; 1
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <lcdinit+0x8>
     5dc:	00 c0       	rjmp	.+0      	; 0x5de <lcdinit+0xe>
     5de:	00 00       	nop
	_delay_ms(200);									/* WAIT FOR SOME TIME */
	lcdcommand(0x33);
     5e0:	83 e3       	ldi	r24, 0x33	; 51
     5e2:	a0 df       	rcall	.-192    	; 0x524 <lcdcommand>
	lcdcommand(0x32);								/* SEND $32 FOR INIT OT 0X02 */
     5e4:	82 e3       	ldi	r24, 0x32	; 50
     5e6:	9e df       	rcall	.-196    	; 0x524 <lcdcommand>
	lcdcommand(0x28);								/* INIT. LCD 2 LINE, 5 X 7 MATRIX */
     5e8:	88 e2       	ldi	r24, 0x28	; 40
     5ea:	9c df       	rcall	.-200    	; 0x524 <lcdcommand>
	lcdcommand(0x0C);								/* DISPLAY ON CURSOR ON */
     5ec:	8c e0       	ldi	r24, 0x0C	; 12
     5ee:	9a df       	rcall	.-204    	; 0x524 <lcdcommand>
	lcdcommand(0x01);								/* LCD CLEAR */
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	98 df       	rcall	.-208    	; 0x524 <lcdcommand>
	lcdcommand(0x82);								/* SHIFT CURSOR TO WRITE */
     5f4:	82 e8       	ldi	r24, 0x82	; 130
     5f6:	96 df       	rcall	.-212    	; 0x524 <lcdcommand>
     5f8:	08 95       	ret

000005fa <lcd_print>:
}
void lcd_print(char *str)
{
     5fa:	0f 93       	push	r16
     5fc:	1f 93       	push	r17
     5fe:	cf 93       	push	r28
     600:	8c 01       	movw	r16, r24
	unsigned char i=0;
     602:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[i] |= 0)
     604:	02 c0       	rjmp	.+4      	; 0x60a <lcd_print+0x10>
	{
		lcddata(str[i]);
     606:	b9 df       	rcall	.-142    	; 0x57a <lcddata>
		i++;
     608:	cf 5f       	subi	r28, 0xFF	; 255
	lcdcommand(0x82);								/* SHIFT CURSOR TO WRITE */
}
void lcd_print(char *str)
{
	unsigned char i=0;
	while (str[i] |= 0)
     60a:	f8 01       	movw	r30, r16
     60c:	ec 0f       	add	r30, r28
     60e:	f1 1d       	adc	r31, r1
     610:	80 81       	ld	r24, Z
     612:	81 11       	cpse	r24, r1
     614:	f8 cf       	rjmp	.-16     	; 0x606 <lcd_print+0xc>
	{
		lcddata(str[i]);
		i++;
	}
}
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	08 95       	ret

0000061e <lcd_print_xy>:


void lcd_print_xy(char row, char pos, char* str)
{
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
     624:	81 11       	cpse	r24, r1
     626:	07 c0       	rjmp	.+14     	; 0x636 <lcd_print_xy+0x18>
     628:	60 31       	cpi	r22, 0x10	; 16
     62a:	28 f4       	brcc	.+10     	; 0x636 <lcd_print_xy+0x18>
	lcdcommand((pos & 0x0F)|0x80);		/* Command of first row and required position<16 */
     62c:	86 2f       	mov	r24, r22
     62e:	8f 70       	andi	r24, 0x0F	; 15
     630:	80 68       	ori	r24, 0x80	; 128
     632:	78 df       	rcall	.-272    	; 0x524 <lcdcommand>
     634:	08 c0       	rjmp	.+16     	; 0x646 <lcd_print_xy+0x28>
	else if (row == 1 && pos<16)
     636:	81 30       	cpi	r24, 0x01	; 1
     638:	31 f4       	brne	.+12     	; 0x646 <lcd_print_xy+0x28>
     63a:	60 31       	cpi	r22, 0x10	; 16
     63c:	20 f4       	brcc	.+8      	; 0x646 <lcd_print_xy+0x28>
	lcdcommand((pos & 0x0F)|0xC0);		/* Command of first row and required position<16 */
     63e:	86 2f       	mov	r24, r22
     640:	8f 70       	andi	r24, 0x0F	; 15
     642:	80 6c       	ori	r24, 0xC0	; 192
     644:	6f df       	rcall	.-290    	; 0x524 <lcdcommand>
	lcd_print(str);					/* Call LCD string function */
     646:	ce 01       	movw	r24, r28
     648:	d8 df       	rcall	.-80     	; 0x5fa <lcd_print>
}
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	08 95       	ret

00000650 <lcd_clear>:

void lcd_clear()
{
	lcdcommand(0x01);
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	68 df       	rcall	.-304    	; 0x524 <lcdcommand>
     654:	83 ef       	ldi	r24, 0xF3	; 243
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	01 97       	sbiw	r24, 0x01	; 1
     65a:	f1 f7       	brne	.-4      	; 0x658 <lcd_clear+0x8>
     65c:	00 c0       	rjmp	.+0      	; 0x65e <lcd_clear+0xe>
     65e:	00 00       	nop
     660:	08 95       	ret

00000662 <setBacklit>:
	_delay_ms(2);
}

void setBacklit(bool shine) {
	if (shine)
     662:	88 23       	and	r24, r24
     664:	21 f0       	breq	.+8      	; 0x66e <setBacklit+0xc>
		LCD_DPRT |= (0b00000001<<LCD_A);
     666:	8b b1       	in	r24, 0x0b	; 11
     668:	84 60       	ori	r24, 0x04	; 4
     66a:	8b b9       	out	0x0b, r24	; 11
     66c:	08 95       	ret
	else
		LCD_DPRT &= ~(0b00000001<<LCD_A);
     66e:	8b b1       	in	r24, 0x0b	; 11
     670:	8b 7f       	andi	r24, 0xFB	; 251
     672:	8b b9       	out	0x0b, r24	; 11
     674:	08 95       	ret

00000676 <mainInit>:
	}
	
}

void mainInit() {
	DDRC = 0xff;
     676:	8f ef       	ldi	r24, 0xFF	; 255
     678:	87 b9       	out	0x07, r24	; 7
	DDRB = 0x00;
     67a:	14 b8       	out	0x04, r1	; 4
	
	clockInit();
     67c:	4a de       	rcall	.-876    	; 0x312 <clockInit>
	lcdinit();
     67e:	a8 df       	rcall	.-176    	; 0x5d0 <lcdinit>
	initMonthsSunRises();
     680:	f0 dd       	rcall	.-1056   	; 0x262 <initMonthsSunRises>
	
	is_display_on = true;
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <is_display_on>
     688:	08 95       	ret

0000068a <updateDisplayText>:
}

//call ones per frame
void updateDisplayText() {
	if (is_display_on) {
     68a:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <is_display_on>
     68e:	88 23       	and	r24, r24
     690:	51 f0       	breq	.+20     	; 0x6a6 <updateDisplayText+0x1c>
		lcd_print_xy(0, 0, clock_date_buffer);
     692:	4b ea       	ldi	r20, 0xAB	; 171
     694:	51 e0       	ldi	r21, 0x01	; 1
     696:	60 e0       	ldi	r22, 0x00	; 0
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	c1 df       	rcall	.-126    	; 0x61e <lcd_print_xy>
		lcd_print_xy(1, 0, alarm_clock_buffer);
     69c:	49 e9       	ldi	r20, 0x99	; 153
     69e:	51 e0       	ldi	r21, 0x01	; 1
     6a0:	60 e0       	ldi	r22, 0x00	; 0
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	bc df       	rcall	.-136    	; 0x61e <lcd_print_xy>
     6a6:	08 95       	ret

000006a8 <startMotorClockwise>:
			hardware_error = true;
	}
}

void startMotorClockwise() { //set portc c to 0b000000 01
	PORTC |= 0b00000001;
     6a8:	88 b1       	in	r24, 0x08	; 8
     6aa:	81 60       	ori	r24, 0x01	; 1
     6ac:	88 b9       	out	0x08, r24	; 8
	PORTC &= 0b11111101;
     6ae:	88 b1       	in	r24, 0x08	; 8
     6b0:	8d 7f       	andi	r24, 0xFD	; 253
     6b2:	88 b9       	out	0x08, r24	; 8
     6b4:	08 95       	ret

000006b6 <startMotorAntiClockwise>:
}

void startMotorAntiClockwise() { //set portc c to 0b000000 10
	PORTC |= 0b00000010;
     6b6:	88 b1       	in	r24, 0x08	; 8
     6b8:	82 60       	ori	r24, 0x02	; 2
     6ba:	88 b9       	out	0x08, r24	; 8
	PORTC &= 0b11111110;
     6bc:	88 b1       	in	r24, 0x08	; 8
     6be:	8e 7f       	andi	r24, 0xFE	; 254
     6c0:	88 b9       	out	0x08, r24	; 8
     6c2:	08 95       	ret

000006c4 <stopMotor>:
}

void stopMotor() {
	PORTC &= 0b11111100;
     6c4:	88 b1       	in	r24, 0x08	; 8
     6c6:	8c 7f       	andi	r24, 0xFC	; 252
     6c8:	88 b9       	out	0x08, r24	; 8
     6ca:	08 95       	ret

000006cc <doorOpeningManager>:
		lcd_print_xy(1, 0, alarm_clock_buffer);
	}
}

void doorOpeningManager() {
	if (door_is_opening) {
     6cc:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <door_is_opening>
     6d0:	88 23       	and	r24, r24
     6d2:	61 f1       	breq	.+88     	; 0x72c <doorOpeningManager+0x60>
		if (motor_direction == 0)
     6d4:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <motor_direction>
     6d8:	81 11       	cpse	r24, r1
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <doorOpeningManager+0x14>
			startMotorClockwise();
     6dc:	e5 df       	rcall	.-54     	; 0x6a8 <startMotorClockwise>
     6de:	03 c0       	rjmp	.+6      	; 0x6e6 <doorOpeningManager+0x1a>
		else if (motor_direction == 1)
     6e0:	81 30       	cpi	r24, 0x01	; 1
     6e2:	09 f4       	brne	.+2      	; 0x6e6 <doorOpeningManager+0x1a>
			startMotorAntiClockwise();
     6e4:	e8 df       	rcall	.-48     	; 0x6b6 <startMotorAntiClockwise>
		
		
		if ((PINB&0b00000001) == 0b00000001) { //zacni zasunovat
     6e6:	18 9b       	sbis	0x03, 0	; 3
     6e8:	03 c0       	rjmp	.+6      	; 0x6f0 <doorOpeningManager+0x24>
			motor_direction = 1;
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <motor_direction>
		}
		
		if ((PINB&0b00000010) == 0b00000010 && motor_direction == 1) { //zacni vysunovat
     6f0:	19 9b       	sbis	0x03, 1	; 3
     6f2:	0d c0       	rjmp	.+26     	; 0x70e <doorOpeningManager+0x42>
     6f4:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <motor_direction>
     6f8:	81 30       	cpi	r24, 0x01	; 1
     6fa:	49 f4       	brne	.+18     	; 0x70e <doorOpeningManager+0x42>
			stopMotor();
     6fc:	e3 df       	rcall	.-58     	; 0x6c4 <stopMotor>
			door_is_opening = false;
     6fe:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <door_is_opening>
			delay_ms = LOOP_DELAY;
     702:	88 ee       	ldi	r24, 0xE8	; 232
     704:	93 e0       	ldi	r25, 0x03	; 3
     706:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <delay_ms+0x1>
     70a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <delay_ms>
		}
		
		motor_timer += delay_ms;
     70e:	20 91 95 01 	lds	r18, 0x0195	; 0x800195 <motor_timer>
     712:	30 91 96 01 	lds	r19, 0x0196	; 0x800196 <motor_timer+0x1>
     716:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <delay_ms>
     71a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <delay_ms+0x1>
     71e:	82 0f       	add	r24, r18
     720:	93 1f       	adc	r25, r19
     722:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <motor_timer+0x1>
     726:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <motor_timer>
     72a:	08 95       	ret
	} else {
		if (motor_timer >= 8000)
     72c:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <motor_timer>
     730:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <motor_timer+0x1>
     734:	80 34       	cpi	r24, 0x40	; 64
     736:	9f 41       	sbci	r25, 0x1F	; 31
     738:	18 f0       	brcs	.+6      	; 0x740 <doorOpeningManager+0x74>
			hardware_error = true;
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <hardware_error>
     740:	08 95       	ret

00000742 <main>:

//when some mechanical part stops working (v podstate jen kontroluju jestli motor nebezi moc dlouho)
bool hardware_error;

int main() {
	mainInit();
     742:	99 df       	rcall	.-206    	; 0x676 <mainInit>
	setClockAndCalendar(0x17, 0x20, 0x50, 0x02, 0x17, 0x05, 0x21);
     744:	0f 2e       	mov	r0, r31
     746:	f1 e2       	ldi	r31, 0x21	; 33
     748:	cf 2e       	mov	r12, r31
     74a:	f0 2d       	mov	r31, r0
     74c:	0f 2e       	mov	r0, r31
     74e:	f5 e0       	ldi	r31, 0x05	; 5
     750:	ef 2e       	mov	r14, r31
     752:	f0 2d       	mov	r31, r0
     754:	07 e1       	ldi	r16, 0x17	; 23
     756:	22 e0       	ldi	r18, 0x02	; 2
     758:	40 e5       	ldi	r20, 0x50	; 80
     75a:	60 e2       	ldi	r22, 0x20	; 32
     75c:	87 e1       	ldi	r24, 0x17	; 23
     75e:	51 de       	rcall	.-862    	; 0x402 <setClockAndCalendar>
	
	setBacklit(true);
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	7f df       	rcall	.-258    	; 0x662 <setBacklit>

	setNextAlarm(1);
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	11 dd       	rcall	.-1502   	; 0x18a <setNextAlarm>
	
	while(1) {
		if (hardware_error) {
     768:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <hardware_error>
     76c:	88 23       	and	r24, r24
     76e:	71 f0       	breq	.+28     	; 0x78c <main+0x4a>
			stopMotor();
     770:	a9 df       	rcall	.-174    	; 0x6c4 <stopMotor>
			
			sprintf(clock_date_buffer, "hardware error");
     772:	8f e0       	ldi	r24, 0x0F	; 15
     774:	e4 e0       	ldi	r30, 0x04	; 4
     776:	f1 e0       	ldi	r31, 0x01	; 1
     778:	ab ea       	ldi	r26, 0xAB	; 171
     77a:	b1 e0       	ldi	r27, 0x01	; 1
     77c:	01 90       	ld	r0, Z+
     77e:	0d 92       	st	X+, r0
     780:	8a 95       	dec	r24
     782:	e1 f7       	brne	.-8      	; 0x77c <main+0x3a>
			sprintf(clock_date_buffer, "");
     784:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <clock_date_buffer>
			updateDisplayText();
     788:	80 df       	rcall	.-256    	; 0x68a <updateDisplayText>
     78a:	83 c0       	rjmp	.+262    	; 0x892 <main+0x150>
		} else {
			if (timer >= 1000) {
     78c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     790:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     794:	88 3e       	cpi	r24, 0xE8	; 232
     796:	93 40       	sbci	r25, 0x03	; 3
     798:	08 f4       	brcc	.+2      	; 0x79c <main+0x5a>
     79a:	6d c0       	rjmp	.+218    	; 0x876 <main+0x134>
				readClock();
     79c:	d9 dd       	rcall	.-1102   	; 0x350 <readClock>
				readCalendar();
     79e:	fe dd       	rcall	.-1028   	; 0x39c <readCalendar>
			
				int last_num_of_year = _year - ((_year/16)*16); //vybere z roku posledni cislo (0x21 => 0x01)
     7a0:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
     7a4:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <__data_end+0x1>
     7a8:	8f 70       	andi	r24, 0x0F	; 15
     7aa:	90 78       	andi	r25, 0x80	; 128
     7ac:	99 23       	and	r25, r25
     7ae:	24 f4       	brge	.+8      	; 0x7b8 <main+0x76>
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	80 6f       	ori	r24, 0xF0	; 240
     7b4:	9f 6f       	ori	r25, 0xFF	; 255
     7b6:	01 96       	adiw	r24, 0x01	; 1
			
				sprintf(clock_date_buffer, "%02x:%02x:%02x %02x/%02x/%01x", _hour, _minute, _second, _date, _month, last_num_of_year);
     7b8:	9f 93       	push	r25
     7ba:	8f 93       	push	r24
     7bc:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <_month+0x1>
     7c0:	8f 93       	push	r24
     7c2:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <_month>
     7c6:	8f 93       	push	r24
     7c8:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <_date+0x1>
     7cc:	8f 93       	push	r24
     7ce:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <_date>
     7d2:	8f 93       	push	r24
     7d4:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <_second+0x1>
     7d8:	8f 93       	push	r24
     7da:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <_second>
     7de:	8f 93       	push	r24
     7e0:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <_minute+0x1>
     7e4:	8f 93       	push	r24
     7e6:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <_minute>
     7ea:	8f 93       	push	r24
     7ec:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <_hour+0x1>
     7f0:	8f 93       	push	r24
     7f2:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <_hour>
     7f6:	8f 93       	push	r24
     7f8:	83 e1       	ldi	r24, 0x13	; 19
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	9f 93       	push	r25
     7fe:	8f 93       	push	r24
     800:	8b ea       	ldi	r24, 0xAB	; 171
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	9f 93       	push	r25
     806:	8f 93       	push	r24
     808:	1e d2       	rcall	.+1084   	; 0xc46 <sprintf>
				sprintf(alarm_clock_buffer, "budicek v: %02x:%02x", next_hour, next_minute);
     80a:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <next_minute+0x1>
     80e:	8f 93       	push	r24
     810:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <next_minute>
     814:	8f 93       	push	r24
     816:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <next_hour+0x1>
     81a:	8f 93       	push	r24
     81c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <next_hour>
     820:	8f 93       	push	r24
     822:	81 e3       	ldi	r24, 0x31	; 49
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	9f 93       	push	r25
     828:	8f 93       	push	r24
     82a:	89 e9       	ldi	r24, 0x99	; 153
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	9f 93       	push	r25
     830:	8f 93       	push	r24
     832:	09 d2       	rcall	.+1042   	; 0xc46 <sprintf>
			
				updateDisplayText();
     834:	2a df       	rcall	.-428    	; 0x68a <updateDisplayText>
			
				if (checkAlarm()) {
     836:	1a dc       	rcall	.-1996   	; 0x6c <checkAlarm>
     838:	2d b7       	in	r18, 0x3d	; 61
     83a:	3e b7       	in	r19, 0x3e	; 62
     83c:	28 5e       	subi	r18, 0xE8	; 232
     83e:	3f 4f       	sbci	r19, 0xFF	; 255
     840:	0f b6       	in	r0, 0x3f	; 63
     842:	f8 94       	cli
     844:	3e bf       	out	0x3e, r19	; 62
     846:	0f be       	out	0x3f, r0	; 63
     848:	2d bf       	out	0x3d, r18	; 61
     84a:	88 23       	and	r24, r24
     84c:	81 f0       	breq	.+32     	; 0x86e <main+0x12c>
					door_is_opening = true;
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <door_is_opening>
					motor_direction = 0;
     854:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <motor_direction>
					motor_timer = 0;
     858:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <motor_timer+0x1>
     85c:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <motor_timer>
					delay_ms = MOTOR_DELAY;
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <delay_ms+0x1>
     868:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <delay_ms>
					
					setNextAlarm(1);
     86c:	8e dc       	rcall	.-1764   	; 0x18a <setNextAlarm>
				}
			
				timer = 0;
     86e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     872:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
		
			doorOpeningManager();
     876:	2a df       	rcall	.-428    	; 0x6cc <doorOpeningManager>
			
			if ((PINB&0b00000100) == 0b00000100) {
     878:	1a 9b       	sbis	0x03, 2	; 3
     87a:	06 c0       	rjmp	.+12     	; 0x888 <main+0x146>
				setBacklit(true);
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	f1 de       	rcall	.-542    	; 0x662 <setBacklit>
				is_display_on = true;
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <is_display_on>
     886:	05 c0       	rjmp	.+10     	; 0x892 <main+0x150>
			} else {
				lcd_clear();
     888:	e3 de       	rcall	.-570    	; 0x650 <lcd_clear>
				setBacklit(false);
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	ea de       	rcall	.-556    	; 0x662 <setBacklit>
				is_display_on = false;
     88e:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <is_display_on>
			}
		}
		
		//tohle proto, ze ve funkci delay musi byt vzdy konstanta
		if (delay_ms == LOOP_DELAY)
     892:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <delay_ms>
     896:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <delay_ms+0x1>
     89a:	88 3e       	cpi	r24, 0xE8	; 232
     89c:	33 e0       	ldi	r19, 0x03	; 3
     89e:	93 07       	cpc	r25, r19
     8a0:	51 f4       	brne	.+20     	; 0x8b6 <main+0x174>
     8a2:	8f e3       	ldi	r24, 0x3F	; 63
     8a4:	9d e0       	ldi	r25, 0x0D	; 13
     8a6:	23 e0       	ldi	r18, 0x03	; 3
     8a8:	81 50       	subi	r24, 0x01	; 1
     8aa:	90 40       	sbci	r25, 0x00	; 0
     8ac:	20 40       	sbci	r18, 0x00	; 0
     8ae:	e1 f7       	brne	.-8      	; 0x8a8 <main+0x166>
     8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <main+0x170>
     8b2:	00 00       	nop
     8b4:	08 c0       	rjmp	.+16     	; 0x8c6 <main+0x184>
			_delay_ms(LOOP_DELAY);
		else if (delay_ms == MOTOR_DELAY)
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	31 f4       	brne	.+12     	; 0x8c6 <main+0x184>
     8ba:	89 ef       	ldi	r24, 0xF9	; 249
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	01 97       	sbiw	r24, 0x01	; 1
     8c0:	f1 f7       	brne	.-4      	; 0x8be <main+0x17c>
     8c2:	00 c0       	rjmp	.+0      	; 0x8c4 <main+0x182>
     8c4:	00 00       	nop
			_delay_ms(MOTOR_DELAY);
			
		timer += delay_ms;
     8c6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     8ca:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     8ce:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <delay_ms>
     8d2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <delay_ms+0x1>
     8d6:	82 0f       	add	r24, r18
     8d8:	93 1f       	adc	r25, r19
     8da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     8de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
     8e2:	42 cf       	rjmp	.-380    	; 0x768 <main+0x26>

000008e4 <__divsf3>:
     8e4:	0c d0       	rcall	.+24     	; 0x8fe <__divsf3x>
     8e6:	eb c0       	rjmp	.+470    	; 0xabe <__fp_round>
     8e8:	e3 d0       	rcall	.+454    	; 0xab0 <__fp_pscB>
     8ea:	40 f0       	brcs	.+16     	; 0x8fc <__divsf3+0x18>
     8ec:	da d0       	rcall	.+436    	; 0xaa2 <__fp_pscA>
     8ee:	30 f0       	brcs	.+12     	; 0x8fc <__divsf3+0x18>
     8f0:	21 f4       	brne	.+8      	; 0x8fa <__divsf3+0x16>
     8f2:	5f 3f       	cpi	r21, 0xFF	; 255
     8f4:	19 f0       	breq	.+6      	; 0x8fc <__divsf3+0x18>
     8f6:	cc c0       	rjmp	.+408    	; 0xa90 <__fp_inf>
     8f8:	51 11       	cpse	r21, r1
     8fa:	15 c1       	rjmp	.+554    	; 0xb26 <__fp_szero>
     8fc:	cf c0       	rjmp	.+414    	; 0xa9c <__fp_nan>

000008fe <__divsf3x>:
     8fe:	f0 d0       	rcall	.+480    	; 0xae0 <__fp_split3>
     900:	98 f3       	brcs	.-26     	; 0x8e8 <__divsf3+0x4>

00000902 <__divsf3_pse>:
     902:	99 23       	and	r25, r25
     904:	c9 f3       	breq	.-14     	; 0x8f8 <__divsf3+0x14>
     906:	55 23       	and	r21, r21
     908:	b1 f3       	breq	.-20     	; 0x8f6 <__divsf3+0x12>
     90a:	95 1b       	sub	r25, r21
     90c:	55 0b       	sbc	r21, r21
     90e:	bb 27       	eor	r27, r27
     910:	aa 27       	eor	r26, r26
     912:	62 17       	cp	r22, r18
     914:	73 07       	cpc	r23, r19
     916:	84 07       	cpc	r24, r20
     918:	38 f0       	brcs	.+14     	; 0x928 <__divsf3_pse+0x26>
     91a:	9f 5f       	subi	r25, 0xFF	; 255
     91c:	5f 4f       	sbci	r21, 0xFF	; 255
     91e:	22 0f       	add	r18, r18
     920:	33 1f       	adc	r19, r19
     922:	44 1f       	adc	r20, r20
     924:	aa 1f       	adc	r26, r26
     926:	a9 f3       	breq	.-22     	; 0x912 <__divsf3_pse+0x10>
     928:	33 d0       	rcall	.+102    	; 0x990 <__divsf3_pse+0x8e>
     92a:	0e 2e       	mov	r0, r30
     92c:	3a f0       	brmi	.+14     	; 0x93c <__divsf3_pse+0x3a>
     92e:	e0 e8       	ldi	r30, 0x80	; 128
     930:	30 d0       	rcall	.+96     	; 0x992 <__divsf3_pse+0x90>
     932:	91 50       	subi	r25, 0x01	; 1
     934:	50 40       	sbci	r21, 0x00	; 0
     936:	e6 95       	lsr	r30
     938:	00 1c       	adc	r0, r0
     93a:	ca f7       	brpl	.-14     	; 0x92e <__divsf3_pse+0x2c>
     93c:	29 d0       	rcall	.+82     	; 0x990 <__divsf3_pse+0x8e>
     93e:	fe 2f       	mov	r31, r30
     940:	27 d0       	rcall	.+78     	; 0x990 <__divsf3_pse+0x8e>
     942:	66 0f       	add	r22, r22
     944:	77 1f       	adc	r23, r23
     946:	88 1f       	adc	r24, r24
     948:	bb 1f       	adc	r27, r27
     94a:	26 17       	cp	r18, r22
     94c:	37 07       	cpc	r19, r23
     94e:	48 07       	cpc	r20, r24
     950:	ab 07       	cpc	r26, r27
     952:	b0 e8       	ldi	r27, 0x80	; 128
     954:	09 f0       	breq	.+2      	; 0x958 <__divsf3_pse+0x56>
     956:	bb 0b       	sbc	r27, r27
     958:	80 2d       	mov	r24, r0
     95a:	bf 01       	movw	r22, r30
     95c:	ff 27       	eor	r31, r31
     95e:	93 58       	subi	r25, 0x83	; 131
     960:	5f 4f       	sbci	r21, 0xFF	; 255
     962:	2a f0       	brmi	.+10     	; 0x96e <__divsf3_pse+0x6c>
     964:	9e 3f       	cpi	r25, 0xFE	; 254
     966:	51 05       	cpc	r21, r1
     968:	68 f0       	brcs	.+26     	; 0x984 <__divsf3_pse+0x82>
     96a:	92 c0       	rjmp	.+292    	; 0xa90 <__fp_inf>
     96c:	dc c0       	rjmp	.+440    	; 0xb26 <__fp_szero>
     96e:	5f 3f       	cpi	r21, 0xFF	; 255
     970:	ec f3       	brlt	.-6      	; 0x96c <__divsf3_pse+0x6a>
     972:	98 3e       	cpi	r25, 0xE8	; 232
     974:	dc f3       	brlt	.-10     	; 0x96c <__divsf3_pse+0x6a>
     976:	86 95       	lsr	r24
     978:	77 95       	ror	r23
     97a:	67 95       	ror	r22
     97c:	b7 95       	ror	r27
     97e:	f7 95       	ror	r31
     980:	9f 5f       	subi	r25, 0xFF	; 255
     982:	c9 f7       	brne	.-14     	; 0x976 <__divsf3_pse+0x74>
     984:	88 0f       	add	r24, r24
     986:	91 1d       	adc	r25, r1
     988:	96 95       	lsr	r25
     98a:	87 95       	ror	r24
     98c:	97 f9       	bld	r25, 7
     98e:	08 95       	ret
     990:	e1 e0       	ldi	r30, 0x01	; 1
     992:	66 0f       	add	r22, r22
     994:	77 1f       	adc	r23, r23
     996:	88 1f       	adc	r24, r24
     998:	bb 1f       	adc	r27, r27
     99a:	62 17       	cp	r22, r18
     99c:	73 07       	cpc	r23, r19
     99e:	84 07       	cpc	r24, r20
     9a0:	ba 07       	cpc	r27, r26
     9a2:	20 f0       	brcs	.+8      	; 0x9ac <__divsf3_pse+0xaa>
     9a4:	62 1b       	sub	r22, r18
     9a6:	73 0b       	sbc	r23, r19
     9a8:	84 0b       	sbc	r24, r20
     9aa:	ba 0b       	sbc	r27, r26
     9ac:	ee 1f       	adc	r30, r30
     9ae:	88 f7       	brcc	.-30     	; 0x992 <__divsf3_pse+0x90>
     9b0:	e0 95       	com	r30
     9b2:	08 95       	ret

000009b4 <__fixsfsi>:
     9b4:	04 d0       	rcall	.+8      	; 0x9be <__fixunssfsi>
     9b6:	68 94       	set
     9b8:	b1 11       	cpse	r27, r1
     9ba:	b5 c0       	rjmp	.+362    	; 0xb26 <__fp_szero>
     9bc:	08 95       	ret

000009be <__fixunssfsi>:
     9be:	98 d0       	rcall	.+304    	; 0xaf0 <__fp_splitA>
     9c0:	88 f0       	brcs	.+34     	; 0x9e4 <__fixunssfsi+0x26>
     9c2:	9f 57       	subi	r25, 0x7F	; 127
     9c4:	90 f0       	brcs	.+36     	; 0x9ea <__fixunssfsi+0x2c>
     9c6:	b9 2f       	mov	r27, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	b7 51       	subi	r27, 0x17	; 23
     9cc:	a0 f0       	brcs	.+40     	; 0x9f6 <__fixunssfsi+0x38>
     9ce:	d1 f0       	breq	.+52     	; 0xa04 <__fixunssfsi+0x46>
     9d0:	66 0f       	add	r22, r22
     9d2:	77 1f       	adc	r23, r23
     9d4:	88 1f       	adc	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	1a f0       	brmi	.+6      	; 0x9e0 <__fixunssfsi+0x22>
     9da:	ba 95       	dec	r27
     9dc:	c9 f7       	brne	.-14     	; 0x9d0 <__fixunssfsi+0x12>
     9de:	12 c0       	rjmp	.+36     	; 0xa04 <__fixunssfsi+0x46>
     9e0:	b1 30       	cpi	r27, 0x01	; 1
     9e2:	81 f0       	breq	.+32     	; 0xa04 <__fixunssfsi+0x46>
     9e4:	9f d0       	rcall	.+318    	; 0xb24 <__fp_zero>
     9e6:	b1 e0       	ldi	r27, 0x01	; 1
     9e8:	08 95       	ret
     9ea:	9c c0       	rjmp	.+312    	; 0xb24 <__fp_zero>
     9ec:	67 2f       	mov	r22, r23
     9ee:	78 2f       	mov	r23, r24
     9f0:	88 27       	eor	r24, r24
     9f2:	b8 5f       	subi	r27, 0xF8	; 248
     9f4:	39 f0       	breq	.+14     	; 0xa04 <__fixunssfsi+0x46>
     9f6:	b9 3f       	cpi	r27, 0xF9	; 249
     9f8:	cc f3       	brlt	.-14     	; 0x9ec <__fixunssfsi+0x2e>
     9fa:	86 95       	lsr	r24
     9fc:	77 95       	ror	r23
     9fe:	67 95       	ror	r22
     a00:	b3 95       	inc	r27
     a02:	d9 f7       	brne	.-10     	; 0x9fa <__fixunssfsi+0x3c>
     a04:	3e f4       	brtc	.+14     	; 0xa14 <__fixunssfsi+0x56>
     a06:	90 95       	com	r25
     a08:	80 95       	com	r24
     a0a:	70 95       	com	r23
     a0c:	61 95       	neg	r22
     a0e:	7f 4f       	sbci	r23, 0xFF	; 255
     a10:	8f 4f       	sbci	r24, 0xFF	; 255
     a12:	9f 4f       	sbci	r25, 0xFF	; 255
     a14:	08 95       	ret

00000a16 <__floatunsisf>:
     a16:	e8 94       	clt
     a18:	09 c0       	rjmp	.+18     	; 0xa2c <__floatsisf+0x12>

00000a1a <__floatsisf>:
     a1a:	97 fb       	bst	r25, 7
     a1c:	3e f4       	brtc	.+14     	; 0xa2c <__floatsisf+0x12>
     a1e:	90 95       	com	r25
     a20:	80 95       	com	r24
     a22:	70 95       	com	r23
     a24:	61 95       	neg	r22
     a26:	7f 4f       	sbci	r23, 0xFF	; 255
     a28:	8f 4f       	sbci	r24, 0xFF	; 255
     a2a:	9f 4f       	sbci	r25, 0xFF	; 255
     a2c:	99 23       	and	r25, r25
     a2e:	a9 f0       	breq	.+42     	; 0xa5a <__floatsisf+0x40>
     a30:	f9 2f       	mov	r31, r25
     a32:	96 e9       	ldi	r25, 0x96	; 150
     a34:	bb 27       	eor	r27, r27
     a36:	93 95       	inc	r25
     a38:	f6 95       	lsr	r31
     a3a:	87 95       	ror	r24
     a3c:	77 95       	ror	r23
     a3e:	67 95       	ror	r22
     a40:	b7 95       	ror	r27
     a42:	f1 11       	cpse	r31, r1
     a44:	f8 cf       	rjmp	.-16     	; 0xa36 <__floatsisf+0x1c>
     a46:	fa f4       	brpl	.+62     	; 0xa86 <__floatsisf+0x6c>
     a48:	bb 0f       	add	r27, r27
     a4a:	11 f4       	brne	.+4      	; 0xa50 <__floatsisf+0x36>
     a4c:	60 ff       	sbrs	r22, 0
     a4e:	1b c0       	rjmp	.+54     	; 0xa86 <__floatsisf+0x6c>
     a50:	6f 5f       	subi	r22, 0xFF	; 255
     a52:	7f 4f       	sbci	r23, 0xFF	; 255
     a54:	8f 4f       	sbci	r24, 0xFF	; 255
     a56:	9f 4f       	sbci	r25, 0xFF	; 255
     a58:	16 c0       	rjmp	.+44     	; 0xa86 <__floatsisf+0x6c>
     a5a:	88 23       	and	r24, r24
     a5c:	11 f0       	breq	.+4      	; 0xa62 <__floatsisf+0x48>
     a5e:	96 e9       	ldi	r25, 0x96	; 150
     a60:	11 c0       	rjmp	.+34     	; 0xa84 <__floatsisf+0x6a>
     a62:	77 23       	and	r23, r23
     a64:	21 f0       	breq	.+8      	; 0xa6e <__floatsisf+0x54>
     a66:	9e e8       	ldi	r25, 0x8E	; 142
     a68:	87 2f       	mov	r24, r23
     a6a:	76 2f       	mov	r23, r22
     a6c:	05 c0       	rjmp	.+10     	; 0xa78 <__floatsisf+0x5e>
     a6e:	66 23       	and	r22, r22
     a70:	71 f0       	breq	.+28     	; 0xa8e <__floatsisf+0x74>
     a72:	96 e8       	ldi	r25, 0x86	; 134
     a74:	86 2f       	mov	r24, r22
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	2a f0       	brmi	.+10     	; 0xa86 <__floatsisf+0x6c>
     a7c:	9a 95       	dec	r25
     a7e:	66 0f       	add	r22, r22
     a80:	77 1f       	adc	r23, r23
     a82:	88 1f       	adc	r24, r24
     a84:	da f7       	brpl	.-10     	; 0xa7c <__floatsisf+0x62>
     a86:	88 0f       	add	r24, r24
     a88:	96 95       	lsr	r25
     a8a:	87 95       	ror	r24
     a8c:	97 f9       	bld	r25, 7
     a8e:	08 95       	ret

00000a90 <__fp_inf>:
     a90:	97 f9       	bld	r25, 7
     a92:	9f 67       	ori	r25, 0x7F	; 127
     a94:	80 e8       	ldi	r24, 0x80	; 128
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	08 95       	ret

00000a9c <__fp_nan>:
     a9c:	9f ef       	ldi	r25, 0xFF	; 255
     a9e:	80 ec       	ldi	r24, 0xC0	; 192
     aa0:	08 95       	ret

00000aa2 <__fp_pscA>:
     aa2:	00 24       	eor	r0, r0
     aa4:	0a 94       	dec	r0
     aa6:	16 16       	cp	r1, r22
     aa8:	17 06       	cpc	r1, r23
     aaa:	18 06       	cpc	r1, r24
     aac:	09 06       	cpc	r0, r25
     aae:	08 95       	ret

00000ab0 <__fp_pscB>:
     ab0:	00 24       	eor	r0, r0
     ab2:	0a 94       	dec	r0
     ab4:	12 16       	cp	r1, r18
     ab6:	13 06       	cpc	r1, r19
     ab8:	14 06       	cpc	r1, r20
     aba:	05 06       	cpc	r0, r21
     abc:	08 95       	ret

00000abe <__fp_round>:
     abe:	09 2e       	mov	r0, r25
     ac0:	03 94       	inc	r0
     ac2:	00 0c       	add	r0, r0
     ac4:	11 f4       	brne	.+4      	; 0xaca <__fp_round+0xc>
     ac6:	88 23       	and	r24, r24
     ac8:	52 f0       	brmi	.+20     	; 0xade <__fp_round+0x20>
     aca:	bb 0f       	add	r27, r27
     acc:	40 f4       	brcc	.+16     	; 0xade <__fp_round+0x20>
     ace:	bf 2b       	or	r27, r31
     ad0:	11 f4       	brne	.+4      	; 0xad6 <__fp_round+0x18>
     ad2:	60 ff       	sbrs	r22, 0
     ad4:	04 c0       	rjmp	.+8      	; 0xade <__fp_round+0x20>
     ad6:	6f 5f       	subi	r22, 0xFF	; 255
     ad8:	7f 4f       	sbci	r23, 0xFF	; 255
     ada:	8f 4f       	sbci	r24, 0xFF	; 255
     adc:	9f 4f       	sbci	r25, 0xFF	; 255
     ade:	08 95       	ret

00000ae0 <__fp_split3>:
     ae0:	57 fd       	sbrc	r21, 7
     ae2:	90 58       	subi	r25, 0x80	; 128
     ae4:	44 0f       	add	r20, r20
     ae6:	55 1f       	adc	r21, r21
     ae8:	59 f0       	breq	.+22     	; 0xb00 <__fp_splitA+0x10>
     aea:	5f 3f       	cpi	r21, 0xFF	; 255
     aec:	71 f0       	breq	.+28     	; 0xb0a <__fp_splitA+0x1a>
     aee:	47 95       	ror	r20

00000af0 <__fp_splitA>:
     af0:	88 0f       	add	r24, r24
     af2:	97 fb       	bst	r25, 7
     af4:	99 1f       	adc	r25, r25
     af6:	61 f0       	breq	.+24     	; 0xb10 <__fp_splitA+0x20>
     af8:	9f 3f       	cpi	r25, 0xFF	; 255
     afa:	79 f0       	breq	.+30     	; 0xb1a <__fp_splitA+0x2a>
     afc:	87 95       	ror	r24
     afe:	08 95       	ret
     b00:	12 16       	cp	r1, r18
     b02:	13 06       	cpc	r1, r19
     b04:	14 06       	cpc	r1, r20
     b06:	55 1f       	adc	r21, r21
     b08:	f2 cf       	rjmp	.-28     	; 0xaee <__fp_split3+0xe>
     b0a:	46 95       	lsr	r20
     b0c:	f1 df       	rcall	.-30     	; 0xaf0 <__fp_splitA>
     b0e:	08 c0       	rjmp	.+16     	; 0xb20 <__fp_splitA+0x30>
     b10:	16 16       	cp	r1, r22
     b12:	17 06       	cpc	r1, r23
     b14:	18 06       	cpc	r1, r24
     b16:	99 1f       	adc	r25, r25
     b18:	f1 cf       	rjmp	.-30     	; 0xafc <__fp_splitA+0xc>
     b1a:	86 95       	lsr	r24
     b1c:	71 05       	cpc	r23, r1
     b1e:	61 05       	cpc	r22, r1
     b20:	08 94       	sec
     b22:	08 95       	ret

00000b24 <__fp_zero>:
     b24:	e8 94       	clt

00000b26 <__fp_szero>:
     b26:	bb 27       	eor	r27, r27
     b28:	66 27       	eor	r22, r22
     b2a:	77 27       	eor	r23, r23
     b2c:	cb 01       	movw	r24, r22
     b2e:	97 f9       	bld	r25, 7
     b30:	08 95       	ret

00000b32 <__mulsf3>:
     b32:	0b d0       	rcall	.+22     	; 0xb4a <__mulsf3x>
     b34:	c4 cf       	rjmp	.-120    	; 0xabe <__fp_round>
     b36:	b5 df       	rcall	.-150    	; 0xaa2 <__fp_pscA>
     b38:	28 f0       	brcs	.+10     	; 0xb44 <__mulsf3+0x12>
     b3a:	ba df       	rcall	.-140    	; 0xab0 <__fp_pscB>
     b3c:	18 f0       	brcs	.+6      	; 0xb44 <__mulsf3+0x12>
     b3e:	95 23       	and	r25, r21
     b40:	09 f0       	breq	.+2      	; 0xb44 <__mulsf3+0x12>
     b42:	a6 cf       	rjmp	.-180    	; 0xa90 <__fp_inf>
     b44:	ab cf       	rjmp	.-170    	; 0xa9c <__fp_nan>
     b46:	11 24       	eor	r1, r1
     b48:	ee cf       	rjmp	.-36     	; 0xb26 <__fp_szero>

00000b4a <__mulsf3x>:
     b4a:	ca df       	rcall	.-108    	; 0xae0 <__fp_split3>
     b4c:	a0 f3       	brcs	.-24     	; 0xb36 <__mulsf3+0x4>

00000b4e <__mulsf3_pse>:
     b4e:	95 9f       	mul	r25, r21
     b50:	d1 f3       	breq	.-12     	; 0xb46 <__mulsf3+0x14>
     b52:	95 0f       	add	r25, r21
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	55 1f       	adc	r21, r21
     b58:	62 9f       	mul	r22, r18
     b5a:	f0 01       	movw	r30, r0
     b5c:	72 9f       	mul	r23, r18
     b5e:	bb 27       	eor	r27, r27
     b60:	f0 0d       	add	r31, r0
     b62:	b1 1d       	adc	r27, r1
     b64:	63 9f       	mul	r22, r19
     b66:	aa 27       	eor	r26, r26
     b68:	f0 0d       	add	r31, r0
     b6a:	b1 1d       	adc	r27, r1
     b6c:	aa 1f       	adc	r26, r26
     b6e:	64 9f       	mul	r22, r20
     b70:	66 27       	eor	r22, r22
     b72:	b0 0d       	add	r27, r0
     b74:	a1 1d       	adc	r26, r1
     b76:	66 1f       	adc	r22, r22
     b78:	82 9f       	mul	r24, r18
     b7a:	22 27       	eor	r18, r18
     b7c:	b0 0d       	add	r27, r0
     b7e:	a1 1d       	adc	r26, r1
     b80:	62 1f       	adc	r22, r18
     b82:	73 9f       	mul	r23, r19
     b84:	b0 0d       	add	r27, r0
     b86:	a1 1d       	adc	r26, r1
     b88:	62 1f       	adc	r22, r18
     b8a:	83 9f       	mul	r24, r19
     b8c:	a0 0d       	add	r26, r0
     b8e:	61 1d       	adc	r22, r1
     b90:	22 1f       	adc	r18, r18
     b92:	74 9f       	mul	r23, r20
     b94:	33 27       	eor	r19, r19
     b96:	a0 0d       	add	r26, r0
     b98:	61 1d       	adc	r22, r1
     b9a:	23 1f       	adc	r18, r19
     b9c:	84 9f       	mul	r24, r20
     b9e:	60 0d       	add	r22, r0
     ba0:	21 1d       	adc	r18, r1
     ba2:	82 2f       	mov	r24, r18
     ba4:	76 2f       	mov	r23, r22
     ba6:	6a 2f       	mov	r22, r26
     ba8:	11 24       	eor	r1, r1
     baa:	9f 57       	subi	r25, 0x7F	; 127
     bac:	50 40       	sbci	r21, 0x00	; 0
     bae:	8a f0       	brmi	.+34     	; 0xbd2 <__mulsf3_pse+0x84>
     bb0:	e1 f0       	breq	.+56     	; 0xbea <__mulsf3_pse+0x9c>
     bb2:	88 23       	and	r24, r24
     bb4:	4a f0       	brmi	.+18     	; 0xbc8 <__mulsf3_pse+0x7a>
     bb6:	ee 0f       	add	r30, r30
     bb8:	ff 1f       	adc	r31, r31
     bba:	bb 1f       	adc	r27, r27
     bbc:	66 1f       	adc	r22, r22
     bbe:	77 1f       	adc	r23, r23
     bc0:	88 1f       	adc	r24, r24
     bc2:	91 50       	subi	r25, 0x01	; 1
     bc4:	50 40       	sbci	r21, 0x00	; 0
     bc6:	a9 f7       	brne	.-22     	; 0xbb2 <__mulsf3_pse+0x64>
     bc8:	9e 3f       	cpi	r25, 0xFE	; 254
     bca:	51 05       	cpc	r21, r1
     bcc:	70 f0       	brcs	.+28     	; 0xbea <__mulsf3_pse+0x9c>
     bce:	60 cf       	rjmp	.-320    	; 0xa90 <__fp_inf>
     bd0:	aa cf       	rjmp	.-172    	; 0xb26 <__fp_szero>
     bd2:	5f 3f       	cpi	r21, 0xFF	; 255
     bd4:	ec f3       	brlt	.-6      	; 0xbd0 <__mulsf3_pse+0x82>
     bd6:	98 3e       	cpi	r25, 0xE8	; 232
     bd8:	dc f3       	brlt	.-10     	; 0xbd0 <__mulsf3_pse+0x82>
     bda:	86 95       	lsr	r24
     bdc:	77 95       	ror	r23
     bde:	67 95       	ror	r22
     be0:	b7 95       	ror	r27
     be2:	f7 95       	ror	r31
     be4:	e7 95       	ror	r30
     be6:	9f 5f       	subi	r25, 0xFF	; 255
     be8:	c1 f7       	brne	.-16     	; 0xbda <__mulsf3_pse+0x8c>
     bea:	fe 2b       	or	r31, r30
     bec:	88 0f       	add	r24, r24
     bee:	91 1d       	adc	r25, r1
     bf0:	96 95       	lsr	r25
     bf2:	87 95       	ror	r24
     bf4:	97 f9       	bld	r25, 7
     bf6:	08 95       	ret

00000bf8 <__divmodhi4>:
     bf8:	97 fb       	bst	r25, 7
     bfa:	07 2e       	mov	r0, r23
     bfc:	16 f4       	brtc	.+4      	; 0xc02 <__divmodhi4+0xa>
     bfe:	00 94       	com	r0
     c00:	06 d0       	rcall	.+12     	; 0xc0e <__divmodhi4_neg1>
     c02:	77 fd       	sbrc	r23, 7
     c04:	08 d0       	rcall	.+16     	; 0xc16 <__divmodhi4_neg2>
     c06:	0b d0       	rcall	.+22     	; 0xc1e <__udivmodhi4>
     c08:	07 fc       	sbrc	r0, 7
     c0a:	05 d0       	rcall	.+10     	; 0xc16 <__divmodhi4_neg2>
     c0c:	3e f4       	brtc	.+14     	; 0xc1c <__divmodhi4_exit>

00000c0e <__divmodhi4_neg1>:
     c0e:	90 95       	com	r25
     c10:	81 95       	neg	r24
     c12:	9f 4f       	sbci	r25, 0xFF	; 255
     c14:	08 95       	ret

00000c16 <__divmodhi4_neg2>:
     c16:	70 95       	com	r23
     c18:	61 95       	neg	r22
     c1a:	7f 4f       	sbci	r23, 0xFF	; 255

00000c1c <__divmodhi4_exit>:
     c1c:	08 95       	ret

00000c1e <__udivmodhi4>:
     c1e:	aa 1b       	sub	r26, r26
     c20:	bb 1b       	sub	r27, r27
     c22:	51 e1       	ldi	r21, 0x11	; 17
     c24:	07 c0       	rjmp	.+14     	; 0xc34 <__udivmodhi4_ep>

00000c26 <__udivmodhi4_loop>:
     c26:	aa 1f       	adc	r26, r26
     c28:	bb 1f       	adc	r27, r27
     c2a:	a6 17       	cp	r26, r22
     c2c:	b7 07       	cpc	r27, r23
     c2e:	10 f0       	brcs	.+4      	; 0xc34 <__udivmodhi4_ep>
     c30:	a6 1b       	sub	r26, r22
     c32:	b7 0b       	sbc	r27, r23

00000c34 <__udivmodhi4_ep>:
     c34:	88 1f       	adc	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	5a 95       	dec	r21
     c3a:	a9 f7       	brne	.-22     	; 0xc26 <__udivmodhi4_loop>
     c3c:	80 95       	com	r24
     c3e:	90 95       	com	r25
     c40:	bc 01       	movw	r22, r24
     c42:	cd 01       	movw	r24, r26
     c44:	08 95       	ret

00000c46 <sprintf>:
     c46:	ae e0       	ldi	r26, 0x0E	; 14
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e8 e2       	ldi	r30, 0x28	; 40
     c4c:	f6 e0       	ldi	r31, 0x06	; 6
     c4e:	aa c2       	rjmp	.+1364   	; 0x11a4 <__prologue_saves__+0x1c>
     c50:	0d 89       	ldd	r16, Y+21	; 0x15
     c52:	1e 89       	ldd	r17, Y+22	; 0x16
     c54:	86 e0       	ldi	r24, 0x06	; 6
     c56:	8c 83       	std	Y+4, r24	; 0x04
     c58:	1a 83       	std	Y+2, r17	; 0x02
     c5a:	09 83       	std	Y+1, r16	; 0x01
     c5c:	8f ef       	ldi	r24, 0xFF	; 255
     c5e:	9f e7       	ldi	r25, 0x7F	; 127
     c60:	9e 83       	std	Y+6, r25	; 0x06
     c62:	8d 83       	std	Y+5, r24	; 0x05
     c64:	ae 01       	movw	r20, r28
     c66:	47 5e       	subi	r20, 0xE7	; 231
     c68:	5f 4f       	sbci	r21, 0xFF	; 255
     c6a:	6f 89       	ldd	r22, Y+23	; 0x17
     c6c:	78 8d       	ldd	r23, Y+24	; 0x18
     c6e:	ce 01       	movw	r24, r28
     c70:	01 96       	adiw	r24, 0x01	; 1
     c72:	08 d0       	rcall	.+16     	; 0xc84 <vfprintf>
     c74:	ef 81       	ldd	r30, Y+7	; 0x07
     c76:	f8 85       	ldd	r31, Y+8	; 0x08
     c78:	e0 0f       	add	r30, r16
     c7a:	f1 1f       	adc	r31, r17
     c7c:	10 82       	st	Z, r1
     c7e:	2e 96       	adiw	r28, 0x0e	; 14
     c80:	e4 e0       	ldi	r30, 0x04	; 4
     c82:	ac c2       	rjmp	.+1368   	; 0x11dc <__epilogue_restores__+0x1c>

00000c84 <vfprintf>:
     c84:	ab e0       	ldi	r26, 0x0B	; 11
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e7 e4       	ldi	r30, 0x47	; 71
     c8a:	f6 e0       	ldi	r31, 0x06	; 6
     c8c:	7d c2       	rjmp	.+1274   	; 0x1188 <__prologue_saves__>
     c8e:	6c 01       	movw	r12, r24
     c90:	7b 01       	movw	r14, r22
     c92:	8a 01       	movw	r16, r20
     c94:	fc 01       	movw	r30, r24
     c96:	17 82       	std	Z+7, r1	; 0x07
     c98:	16 82       	std	Z+6, r1	; 0x06
     c9a:	83 81       	ldd	r24, Z+3	; 0x03
     c9c:	81 ff       	sbrs	r24, 1
     c9e:	bf c1       	rjmp	.+894    	; 0x101e <vfprintf+0x39a>
     ca0:	ce 01       	movw	r24, r28
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	3c 01       	movw	r6, r24
     ca6:	f6 01       	movw	r30, r12
     ca8:	93 81       	ldd	r25, Z+3	; 0x03
     caa:	f7 01       	movw	r30, r14
     cac:	93 fd       	sbrc	r25, 3
     cae:	85 91       	lpm	r24, Z+
     cb0:	93 ff       	sbrs	r25, 3
     cb2:	81 91       	ld	r24, Z+
     cb4:	7f 01       	movw	r14, r30
     cb6:	88 23       	and	r24, r24
     cb8:	09 f4       	brne	.+2      	; 0xcbc <vfprintf+0x38>
     cba:	ad c1       	rjmp	.+858    	; 0x1016 <vfprintf+0x392>
     cbc:	85 32       	cpi	r24, 0x25	; 37
     cbe:	39 f4       	brne	.+14     	; 0xcce <vfprintf+0x4a>
     cc0:	93 fd       	sbrc	r25, 3
     cc2:	85 91       	lpm	r24, Z+
     cc4:	93 ff       	sbrs	r25, 3
     cc6:	81 91       	ld	r24, Z+
     cc8:	7f 01       	movw	r14, r30
     cca:	85 32       	cpi	r24, 0x25	; 37
     ccc:	21 f4       	brne	.+8      	; 0xcd6 <vfprintf+0x52>
     cce:	b6 01       	movw	r22, r12
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	c0 d1       	rcall	.+896    	; 0x1054 <fputc>
     cd4:	e8 cf       	rjmp	.-48     	; 0xca6 <vfprintf+0x22>
     cd6:	91 2c       	mov	r9, r1
     cd8:	21 2c       	mov	r2, r1
     cda:	31 2c       	mov	r3, r1
     cdc:	ff e1       	ldi	r31, 0x1F	; 31
     cde:	f3 15       	cp	r31, r3
     ce0:	d8 f0       	brcs	.+54     	; 0xd18 <vfprintf+0x94>
     ce2:	8b 32       	cpi	r24, 0x2B	; 43
     ce4:	79 f0       	breq	.+30     	; 0xd04 <vfprintf+0x80>
     ce6:	38 f4       	brcc	.+14     	; 0xcf6 <vfprintf+0x72>
     ce8:	80 32       	cpi	r24, 0x20	; 32
     cea:	79 f0       	breq	.+30     	; 0xd0a <vfprintf+0x86>
     cec:	83 32       	cpi	r24, 0x23	; 35
     cee:	a1 f4       	brne	.+40     	; 0xd18 <vfprintf+0x94>
     cf0:	23 2d       	mov	r18, r3
     cf2:	20 61       	ori	r18, 0x10	; 16
     cf4:	1d c0       	rjmp	.+58     	; 0xd30 <vfprintf+0xac>
     cf6:	8d 32       	cpi	r24, 0x2D	; 45
     cf8:	61 f0       	breq	.+24     	; 0xd12 <vfprintf+0x8e>
     cfa:	80 33       	cpi	r24, 0x30	; 48
     cfc:	69 f4       	brne	.+26     	; 0xd18 <vfprintf+0x94>
     cfe:	23 2d       	mov	r18, r3
     d00:	21 60       	ori	r18, 0x01	; 1
     d02:	16 c0       	rjmp	.+44     	; 0xd30 <vfprintf+0xac>
     d04:	83 2d       	mov	r24, r3
     d06:	82 60       	ori	r24, 0x02	; 2
     d08:	38 2e       	mov	r3, r24
     d0a:	e3 2d       	mov	r30, r3
     d0c:	e4 60       	ori	r30, 0x04	; 4
     d0e:	3e 2e       	mov	r3, r30
     d10:	2a c0       	rjmp	.+84     	; 0xd66 <vfprintf+0xe2>
     d12:	f3 2d       	mov	r31, r3
     d14:	f8 60       	ori	r31, 0x08	; 8
     d16:	1d c0       	rjmp	.+58     	; 0xd52 <vfprintf+0xce>
     d18:	37 fc       	sbrc	r3, 7
     d1a:	2d c0       	rjmp	.+90     	; 0xd76 <vfprintf+0xf2>
     d1c:	20 ed       	ldi	r18, 0xD0	; 208
     d1e:	28 0f       	add	r18, r24
     d20:	2a 30       	cpi	r18, 0x0A	; 10
     d22:	40 f0       	brcs	.+16     	; 0xd34 <vfprintf+0xb0>
     d24:	8e 32       	cpi	r24, 0x2E	; 46
     d26:	b9 f4       	brne	.+46     	; 0xd56 <vfprintf+0xd2>
     d28:	36 fc       	sbrc	r3, 6
     d2a:	75 c1       	rjmp	.+746    	; 0x1016 <vfprintf+0x392>
     d2c:	23 2d       	mov	r18, r3
     d2e:	20 64       	ori	r18, 0x40	; 64
     d30:	32 2e       	mov	r3, r18
     d32:	19 c0       	rjmp	.+50     	; 0xd66 <vfprintf+0xe2>
     d34:	36 fe       	sbrs	r3, 6
     d36:	06 c0       	rjmp	.+12     	; 0xd44 <vfprintf+0xc0>
     d38:	8a e0       	ldi	r24, 0x0A	; 10
     d3a:	98 9e       	mul	r9, r24
     d3c:	20 0d       	add	r18, r0
     d3e:	11 24       	eor	r1, r1
     d40:	92 2e       	mov	r9, r18
     d42:	11 c0       	rjmp	.+34     	; 0xd66 <vfprintf+0xe2>
     d44:	ea e0       	ldi	r30, 0x0A	; 10
     d46:	2e 9e       	mul	r2, r30
     d48:	20 0d       	add	r18, r0
     d4a:	11 24       	eor	r1, r1
     d4c:	22 2e       	mov	r2, r18
     d4e:	f3 2d       	mov	r31, r3
     d50:	f0 62       	ori	r31, 0x20	; 32
     d52:	3f 2e       	mov	r3, r31
     d54:	08 c0       	rjmp	.+16     	; 0xd66 <vfprintf+0xe2>
     d56:	8c 36       	cpi	r24, 0x6C	; 108
     d58:	21 f4       	brne	.+8      	; 0xd62 <vfprintf+0xde>
     d5a:	83 2d       	mov	r24, r3
     d5c:	80 68       	ori	r24, 0x80	; 128
     d5e:	38 2e       	mov	r3, r24
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <vfprintf+0xe2>
     d62:	88 36       	cpi	r24, 0x68	; 104
     d64:	41 f4       	brne	.+16     	; 0xd76 <vfprintf+0xf2>
     d66:	f7 01       	movw	r30, r14
     d68:	93 fd       	sbrc	r25, 3
     d6a:	85 91       	lpm	r24, Z+
     d6c:	93 ff       	sbrs	r25, 3
     d6e:	81 91       	ld	r24, Z+
     d70:	7f 01       	movw	r14, r30
     d72:	81 11       	cpse	r24, r1
     d74:	b3 cf       	rjmp	.-154    	; 0xcdc <vfprintf+0x58>
     d76:	98 2f       	mov	r25, r24
     d78:	9f 7d       	andi	r25, 0xDF	; 223
     d7a:	95 54       	subi	r25, 0x45	; 69
     d7c:	93 30       	cpi	r25, 0x03	; 3
     d7e:	28 f4       	brcc	.+10     	; 0xd8a <vfprintf+0x106>
     d80:	0c 5f       	subi	r16, 0xFC	; 252
     d82:	1f 4f       	sbci	r17, 0xFF	; 255
     d84:	9f e3       	ldi	r25, 0x3F	; 63
     d86:	99 83       	std	Y+1, r25	; 0x01
     d88:	0d c0       	rjmp	.+26     	; 0xda4 <vfprintf+0x120>
     d8a:	83 36       	cpi	r24, 0x63	; 99
     d8c:	31 f0       	breq	.+12     	; 0xd9a <vfprintf+0x116>
     d8e:	83 37       	cpi	r24, 0x73	; 115
     d90:	71 f0       	breq	.+28     	; 0xdae <vfprintf+0x12a>
     d92:	83 35       	cpi	r24, 0x53	; 83
     d94:	09 f0       	breq	.+2      	; 0xd98 <vfprintf+0x114>
     d96:	55 c0       	rjmp	.+170    	; 0xe42 <vfprintf+0x1be>
     d98:	20 c0       	rjmp	.+64     	; 0xdda <vfprintf+0x156>
     d9a:	f8 01       	movw	r30, r16
     d9c:	80 81       	ld	r24, Z
     d9e:	89 83       	std	Y+1, r24	; 0x01
     da0:	0e 5f       	subi	r16, 0xFE	; 254
     da2:	1f 4f       	sbci	r17, 0xFF	; 255
     da4:	88 24       	eor	r8, r8
     da6:	83 94       	inc	r8
     da8:	91 2c       	mov	r9, r1
     daa:	53 01       	movw	r10, r6
     dac:	12 c0       	rjmp	.+36     	; 0xdd2 <vfprintf+0x14e>
     dae:	28 01       	movw	r4, r16
     db0:	f2 e0       	ldi	r31, 0x02	; 2
     db2:	4f 0e       	add	r4, r31
     db4:	51 1c       	adc	r5, r1
     db6:	f8 01       	movw	r30, r16
     db8:	a0 80       	ld	r10, Z
     dba:	b1 80       	ldd	r11, Z+1	; 0x01
     dbc:	36 fe       	sbrs	r3, 6
     dbe:	03 c0       	rjmp	.+6      	; 0xdc6 <vfprintf+0x142>
     dc0:	69 2d       	mov	r22, r9
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <vfprintf+0x146>
     dc6:	6f ef       	ldi	r22, 0xFF	; 255
     dc8:	7f ef       	ldi	r23, 0xFF	; 255
     dca:	c5 01       	movw	r24, r10
     dcc:	38 d1       	rcall	.+624    	; 0x103e <strnlen>
     dce:	4c 01       	movw	r8, r24
     dd0:	82 01       	movw	r16, r4
     dd2:	f3 2d       	mov	r31, r3
     dd4:	ff 77       	andi	r31, 0x7F	; 127
     dd6:	3f 2e       	mov	r3, r31
     dd8:	15 c0       	rjmp	.+42     	; 0xe04 <vfprintf+0x180>
     dda:	28 01       	movw	r4, r16
     ddc:	22 e0       	ldi	r18, 0x02	; 2
     dde:	42 0e       	add	r4, r18
     de0:	51 1c       	adc	r5, r1
     de2:	f8 01       	movw	r30, r16
     de4:	a0 80       	ld	r10, Z
     de6:	b1 80       	ldd	r11, Z+1	; 0x01
     de8:	36 fe       	sbrs	r3, 6
     dea:	03 c0       	rjmp	.+6      	; 0xdf2 <vfprintf+0x16e>
     dec:	69 2d       	mov	r22, r9
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <vfprintf+0x172>
     df2:	6f ef       	ldi	r22, 0xFF	; 255
     df4:	7f ef       	ldi	r23, 0xFF	; 255
     df6:	c5 01       	movw	r24, r10
     df8:	17 d1       	rcall	.+558    	; 0x1028 <strnlen_P>
     dfa:	4c 01       	movw	r8, r24
     dfc:	f3 2d       	mov	r31, r3
     dfe:	f0 68       	ori	r31, 0x80	; 128
     e00:	3f 2e       	mov	r3, r31
     e02:	82 01       	movw	r16, r4
     e04:	33 fc       	sbrc	r3, 3
     e06:	19 c0       	rjmp	.+50     	; 0xe3a <vfprintf+0x1b6>
     e08:	82 2d       	mov	r24, r2
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	88 16       	cp	r8, r24
     e0e:	99 06       	cpc	r9, r25
     e10:	a0 f4       	brcc	.+40     	; 0xe3a <vfprintf+0x1b6>
     e12:	b6 01       	movw	r22, r12
     e14:	80 e2       	ldi	r24, 0x20	; 32
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	1d d1       	rcall	.+570    	; 0x1054 <fputc>
     e1a:	2a 94       	dec	r2
     e1c:	f5 cf       	rjmp	.-22     	; 0xe08 <vfprintf+0x184>
     e1e:	f5 01       	movw	r30, r10
     e20:	37 fc       	sbrc	r3, 7
     e22:	85 91       	lpm	r24, Z+
     e24:	37 fe       	sbrs	r3, 7
     e26:	81 91       	ld	r24, Z+
     e28:	5f 01       	movw	r10, r30
     e2a:	b6 01       	movw	r22, r12
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	12 d1       	rcall	.+548    	; 0x1054 <fputc>
     e30:	21 10       	cpse	r2, r1
     e32:	2a 94       	dec	r2
     e34:	21 e0       	ldi	r18, 0x01	; 1
     e36:	82 1a       	sub	r8, r18
     e38:	91 08       	sbc	r9, r1
     e3a:	81 14       	cp	r8, r1
     e3c:	91 04       	cpc	r9, r1
     e3e:	79 f7       	brne	.-34     	; 0xe1e <vfprintf+0x19a>
     e40:	e1 c0       	rjmp	.+450    	; 0x1004 <vfprintf+0x380>
     e42:	84 36       	cpi	r24, 0x64	; 100
     e44:	11 f0       	breq	.+4      	; 0xe4a <vfprintf+0x1c6>
     e46:	89 36       	cpi	r24, 0x69	; 105
     e48:	39 f5       	brne	.+78     	; 0xe98 <vfprintf+0x214>
     e4a:	f8 01       	movw	r30, r16
     e4c:	37 fe       	sbrs	r3, 7
     e4e:	07 c0       	rjmp	.+14     	; 0xe5e <vfprintf+0x1da>
     e50:	60 81       	ld	r22, Z
     e52:	71 81       	ldd	r23, Z+1	; 0x01
     e54:	82 81       	ldd	r24, Z+2	; 0x02
     e56:	93 81       	ldd	r25, Z+3	; 0x03
     e58:	0c 5f       	subi	r16, 0xFC	; 252
     e5a:	1f 4f       	sbci	r17, 0xFF	; 255
     e5c:	08 c0       	rjmp	.+16     	; 0xe6e <vfprintf+0x1ea>
     e5e:	60 81       	ld	r22, Z
     e60:	71 81       	ldd	r23, Z+1	; 0x01
     e62:	07 2e       	mov	r0, r23
     e64:	00 0c       	add	r0, r0
     e66:	88 0b       	sbc	r24, r24
     e68:	99 0b       	sbc	r25, r25
     e6a:	0e 5f       	subi	r16, 0xFE	; 254
     e6c:	1f 4f       	sbci	r17, 0xFF	; 255
     e6e:	f3 2d       	mov	r31, r3
     e70:	ff 76       	andi	r31, 0x6F	; 111
     e72:	3f 2e       	mov	r3, r31
     e74:	97 ff       	sbrs	r25, 7
     e76:	09 c0       	rjmp	.+18     	; 0xe8a <vfprintf+0x206>
     e78:	90 95       	com	r25
     e7a:	80 95       	com	r24
     e7c:	70 95       	com	r23
     e7e:	61 95       	neg	r22
     e80:	7f 4f       	sbci	r23, 0xFF	; 255
     e82:	8f 4f       	sbci	r24, 0xFF	; 255
     e84:	9f 4f       	sbci	r25, 0xFF	; 255
     e86:	f0 68       	ori	r31, 0x80	; 128
     e88:	3f 2e       	mov	r3, r31
     e8a:	2a e0       	ldi	r18, 0x0A	; 10
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	a3 01       	movw	r20, r6
     e90:	1d d1       	rcall	.+570    	; 0x10cc <__ultoa_invert>
     e92:	88 2e       	mov	r8, r24
     e94:	86 18       	sub	r8, r6
     e96:	44 c0       	rjmp	.+136    	; 0xf20 <vfprintf+0x29c>
     e98:	85 37       	cpi	r24, 0x75	; 117
     e9a:	31 f4       	brne	.+12     	; 0xea8 <vfprintf+0x224>
     e9c:	23 2d       	mov	r18, r3
     e9e:	2f 7e       	andi	r18, 0xEF	; 239
     ea0:	b2 2e       	mov	r11, r18
     ea2:	2a e0       	ldi	r18, 0x0A	; 10
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	25 c0       	rjmp	.+74     	; 0xef2 <vfprintf+0x26e>
     ea8:	93 2d       	mov	r25, r3
     eaa:	99 7f       	andi	r25, 0xF9	; 249
     eac:	b9 2e       	mov	r11, r25
     eae:	8f 36       	cpi	r24, 0x6F	; 111
     eb0:	c1 f0       	breq	.+48     	; 0xee2 <vfprintf+0x25e>
     eb2:	18 f4       	brcc	.+6      	; 0xeba <vfprintf+0x236>
     eb4:	88 35       	cpi	r24, 0x58	; 88
     eb6:	79 f0       	breq	.+30     	; 0xed6 <vfprintf+0x252>
     eb8:	ae c0       	rjmp	.+348    	; 0x1016 <vfprintf+0x392>
     eba:	80 37       	cpi	r24, 0x70	; 112
     ebc:	19 f0       	breq	.+6      	; 0xec4 <vfprintf+0x240>
     ebe:	88 37       	cpi	r24, 0x78	; 120
     ec0:	21 f0       	breq	.+8      	; 0xeca <vfprintf+0x246>
     ec2:	a9 c0       	rjmp	.+338    	; 0x1016 <vfprintf+0x392>
     ec4:	e9 2f       	mov	r30, r25
     ec6:	e0 61       	ori	r30, 0x10	; 16
     ec8:	be 2e       	mov	r11, r30
     eca:	b4 fe       	sbrs	r11, 4
     ecc:	0d c0       	rjmp	.+26     	; 0xee8 <vfprintf+0x264>
     ece:	fb 2d       	mov	r31, r11
     ed0:	f4 60       	ori	r31, 0x04	; 4
     ed2:	bf 2e       	mov	r11, r31
     ed4:	09 c0       	rjmp	.+18     	; 0xee8 <vfprintf+0x264>
     ed6:	34 fe       	sbrs	r3, 4
     ed8:	0a c0       	rjmp	.+20     	; 0xeee <vfprintf+0x26a>
     eda:	29 2f       	mov	r18, r25
     edc:	26 60       	ori	r18, 0x06	; 6
     ede:	b2 2e       	mov	r11, r18
     ee0:	06 c0       	rjmp	.+12     	; 0xeee <vfprintf+0x26a>
     ee2:	28 e0       	ldi	r18, 0x08	; 8
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	05 c0       	rjmp	.+10     	; 0xef2 <vfprintf+0x26e>
     ee8:	20 e1       	ldi	r18, 0x10	; 16
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <vfprintf+0x26e>
     eee:	20 e1       	ldi	r18, 0x10	; 16
     ef0:	32 e0       	ldi	r19, 0x02	; 2
     ef2:	f8 01       	movw	r30, r16
     ef4:	b7 fe       	sbrs	r11, 7
     ef6:	07 c0       	rjmp	.+14     	; 0xf06 <vfprintf+0x282>
     ef8:	60 81       	ld	r22, Z
     efa:	71 81       	ldd	r23, Z+1	; 0x01
     efc:	82 81       	ldd	r24, Z+2	; 0x02
     efe:	93 81       	ldd	r25, Z+3	; 0x03
     f00:	0c 5f       	subi	r16, 0xFC	; 252
     f02:	1f 4f       	sbci	r17, 0xFF	; 255
     f04:	06 c0       	rjmp	.+12     	; 0xf12 <vfprintf+0x28e>
     f06:	60 81       	ld	r22, Z
     f08:	71 81       	ldd	r23, Z+1	; 0x01
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	0e 5f       	subi	r16, 0xFE	; 254
     f10:	1f 4f       	sbci	r17, 0xFF	; 255
     f12:	a3 01       	movw	r20, r6
     f14:	db d0       	rcall	.+438    	; 0x10cc <__ultoa_invert>
     f16:	88 2e       	mov	r8, r24
     f18:	86 18       	sub	r8, r6
     f1a:	fb 2d       	mov	r31, r11
     f1c:	ff 77       	andi	r31, 0x7F	; 127
     f1e:	3f 2e       	mov	r3, r31
     f20:	36 fe       	sbrs	r3, 6
     f22:	0d c0       	rjmp	.+26     	; 0xf3e <vfprintf+0x2ba>
     f24:	23 2d       	mov	r18, r3
     f26:	2e 7f       	andi	r18, 0xFE	; 254
     f28:	a2 2e       	mov	r10, r18
     f2a:	89 14       	cp	r8, r9
     f2c:	58 f4       	brcc	.+22     	; 0xf44 <vfprintf+0x2c0>
     f2e:	34 fe       	sbrs	r3, 4
     f30:	0b c0       	rjmp	.+22     	; 0xf48 <vfprintf+0x2c4>
     f32:	32 fc       	sbrc	r3, 2
     f34:	09 c0       	rjmp	.+18     	; 0xf48 <vfprintf+0x2c4>
     f36:	83 2d       	mov	r24, r3
     f38:	8e 7e       	andi	r24, 0xEE	; 238
     f3a:	a8 2e       	mov	r10, r24
     f3c:	05 c0       	rjmp	.+10     	; 0xf48 <vfprintf+0x2c4>
     f3e:	b8 2c       	mov	r11, r8
     f40:	a3 2c       	mov	r10, r3
     f42:	03 c0       	rjmp	.+6      	; 0xf4a <vfprintf+0x2c6>
     f44:	b8 2c       	mov	r11, r8
     f46:	01 c0       	rjmp	.+2      	; 0xf4a <vfprintf+0x2c6>
     f48:	b9 2c       	mov	r11, r9
     f4a:	a4 fe       	sbrs	r10, 4
     f4c:	0f c0       	rjmp	.+30     	; 0xf6c <vfprintf+0x2e8>
     f4e:	fe 01       	movw	r30, r28
     f50:	e8 0d       	add	r30, r8
     f52:	f1 1d       	adc	r31, r1
     f54:	80 81       	ld	r24, Z
     f56:	80 33       	cpi	r24, 0x30	; 48
     f58:	21 f4       	brne	.+8      	; 0xf62 <vfprintf+0x2de>
     f5a:	9a 2d       	mov	r25, r10
     f5c:	99 7e       	andi	r25, 0xE9	; 233
     f5e:	a9 2e       	mov	r10, r25
     f60:	09 c0       	rjmp	.+18     	; 0xf74 <vfprintf+0x2f0>
     f62:	a2 fe       	sbrs	r10, 2
     f64:	06 c0       	rjmp	.+12     	; 0xf72 <vfprintf+0x2ee>
     f66:	b3 94       	inc	r11
     f68:	b3 94       	inc	r11
     f6a:	04 c0       	rjmp	.+8      	; 0xf74 <vfprintf+0x2f0>
     f6c:	8a 2d       	mov	r24, r10
     f6e:	86 78       	andi	r24, 0x86	; 134
     f70:	09 f0       	breq	.+2      	; 0xf74 <vfprintf+0x2f0>
     f72:	b3 94       	inc	r11
     f74:	a3 fc       	sbrc	r10, 3
     f76:	10 c0       	rjmp	.+32     	; 0xf98 <vfprintf+0x314>
     f78:	a0 fe       	sbrs	r10, 0
     f7a:	06 c0       	rjmp	.+12     	; 0xf88 <vfprintf+0x304>
     f7c:	b2 14       	cp	r11, r2
     f7e:	80 f4       	brcc	.+32     	; 0xfa0 <vfprintf+0x31c>
     f80:	28 0c       	add	r2, r8
     f82:	92 2c       	mov	r9, r2
     f84:	9b 18       	sub	r9, r11
     f86:	0d c0       	rjmp	.+26     	; 0xfa2 <vfprintf+0x31e>
     f88:	b2 14       	cp	r11, r2
     f8a:	58 f4       	brcc	.+22     	; 0xfa2 <vfprintf+0x31e>
     f8c:	b6 01       	movw	r22, r12
     f8e:	80 e2       	ldi	r24, 0x20	; 32
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	60 d0       	rcall	.+192    	; 0x1054 <fputc>
     f94:	b3 94       	inc	r11
     f96:	f8 cf       	rjmp	.-16     	; 0xf88 <vfprintf+0x304>
     f98:	b2 14       	cp	r11, r2
     f9a:	18 f4       	brcc	.+6      	; 0xfa2 <vfprintf+0x31e>
     f9c:	2b 18       	sub	r2, r11
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <vfprintf+0x320>
     fa0:	98 2c       	mov	r9, r8
     fa2:	21 2c       	mov	r2, r1
     fa4:	a4 fe       	sbrs	r10, 4
     fa6:	0f c0       	rjmp	.+30     	; 0xfc6 <vfprintf+0x342>
     fa8:	b6 01       	movw	r22, r12
     faa:	80 e3       	ldi	r24, 0x30	; 48
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	52 d0       	rcall	.+164    	; 0x1054 <fputc>
     fb0:	a2 fe       	sbrs	r10, 2
     fb2:	16 c0       	rjmp	.+44     	; 0xfe0 <vfprintf+0x35c>
     fb4:	a1 fc       	sbrc	r10, 1
     fb6:	03 c0       	rjmp	.+6      	; 0xfbe <vfprintf+0x33a>
     fb8:	88 e7       	ldi	r24, 0x78	; 120
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <vfprintf+0x33e>
     fbe:	88 e5       	ldi	r24, 0x58	; 88
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	b6 01       	movw	r22, r12
     fc4:	0c c0       	rjmp	.+24     	; 0xfde <vfprintf+0x35a>
     fc6:	8a 2d       	mov	r24, r10
     fc8:	86 78       	andi	r24, 0x86	; 134
     fca:	51 f0       	breq	.+20     	; 0xfe0 <vfprintf+0x35c>
     fcc:	a1 fe       	sbrs	r10, 1
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <vfprintf+0x350>
     fd0:	8b e2       	ldi	r24, 0x2B	; 43
     fd2:	01 c0       	rjmp	.+2      	; 0xfd6 <vfprintf+0x352>
     fd4:	80 e2       	ldi	r24, 0x20	; 32
     fd6:	a7 fc       	sbrc	r10, 7
     fd8:	8d e2       	ldi	r24, 0x2D	; 45
     fda:	b6 01       	movw	r22, r12
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	3a d0       	rcall	.+116    	; 0x1054 <fputc>
     fe0:	89 14       	cp	r8, r9
     fe2:	30 f4       	brcc	.+12     	; 0xff0 <vfprintf+0x36c>
     fe4:	b6 01       	movw	r22, r12
     fe6:	80 e3       	ldi	r24, 0x30	; 48
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	34 d0       	rcall	.+104    	; 0x1054 <fputc>
     fec:	9a 94       	dec	r9
     fee:	f8 cf       	rjmp	.-16     	; 0xfe0 <vfprintf+0x35c>
     ff0:	8a 94       	dec	r8
     ff2:	f3 01       	movw	r30, r6
     ff4:	e8 0d       	add	r30, r8
     ff6:	f1 1d       	adc	r31, r1
     ff8:	80 81       	ld	r24, Z
     ffa:	b6 01       	movw	r22, r12
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	2a d0       	rcall	.+84     	; 0x1054 <fputc>
    1000:	81 10       	cpse	r8, r1
    1002:	f6 cf       	rjmp	.-20     	; 0xff0 <vfprintf+0x36c>
    1004:	22 20       	and	r2, r2
    1006:	09 f4       	brne	.+2      	; 0x100a <vfprintf+0x386>
    1008:	4e ce       	rjmp	.-868    	; 0xca6 <vfprintf+0x22>
    100a:	b6 01       	movw	r22, r12
    100c:	80 e2       	ldi	r24, 0x20	; 32
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	21 d0       	rcall	.+66     	; 0x1054 <fputc>
    1012:	2a 94       	dec	r2
    1014:	f7 cf       	rjmp	.-18     	; 0x1004 <vfprintf+0x380>
    1016:	f6 01       	movw	r30, r12
    1018:	86 81       	ldd	r24, Z+6	; 0x06
    101a:	97 81       	ldd	r25, Z+7	; 0x07
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <vfprintf+0x39e>
    101e:	8f ef       	ldi	r24, 0xFF	; 255
    1020:	9f ef       	ldi	r25, 0xFF	; 255
    1022:	2b 96       	adiw	r28, 0x0b	; 11
    1024:	e2 e1       	ldi	r30, 0x12	; 18
    1026:	cc c0       	rjmp	.+408    	; 0x11c0 <__epilogue_restores__>

00001028 <strnlen_P>:
    1028:	fc 01       	movw	r30, r24
    102a:	05 90       	lpm	r0, Z+
    102c:	61 50       	subi	r22, 0x01	; 1
    102e:	70 40       	sbci	r23, 0x00	; 0
    1030:	01 10       	cpse	r0, r1
    1032:	d8 f7       	brcc	.-10     	; 0x102a <strnlen_P+0x2>
    1034:	80 95       	com	r24
    1036:	90 95       	com	r25
    1038:	8e 0f       	add	r24, r30
    103a:	9f 1f       	adc	r25, r31
    103c:	08 95       	ret

0000103e <strnlen>:
    103e:	fc 01       	movw	r30, r24
    1040:	61 50       	subi	r22, 0x01	; 1
    1042:	70 40       	sbci	r23, 0x00	; 0
    1044:	01 90       	ld	r0, Z+
    1046:	01 10       	cpse	r0, r1
    1048:	d8 f7       	brcc	.-10     	; 0x1040 <strnlen+0x2>
    104a:	80 95       	com	r24
    104c:	90 95       	com	r25
    104e:	8e 0f       	add	r24, r30
    1050:	9f 1f       	adc	r25, r31
    1052:	08 95       	ret

00001054 <fputc>:
    1054:	0f 93       	push	r16
    1056:	1f 93       	push	r17
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	fb 01       	movw	r30, r22
    105e:	23 81       	ldd	r18, Z+3	; 0x03
    1060:	21 fd       	sbrc	r18, 1
    1062:	03 c0       	rjmp	.+6      	; 0x106a <fputc+0x16>
    1064:	8f ef       	ldi	r24, 0xFF	; 255
    1066:	9f ef       	ldi	r25, 0xFF	; 255
    1068:	2c c0       	rjmp	.+88     	; 0x10c2 <fputc+0x6e>
    106a:	22 ff       	sbrs	r18, 2
    106c:	16 c0       	rjmp	.+44     	; 0x109a <fputc+0x46>
    106e:	46 81       	ldd	r20, Z+6	; 0x06
    1070:	57 81       	ldd	r21, Z+7	; 0x07
    1072:	24 81       	ldd	r18, Z+4	; 0x04
    1074:	35 81       	ldd	r19, Z+5	; 0x05
    1076:	42 17       	cp	r20, r18
    1078:	53 07       	cpc	r21, r19
    107a:	44 f4       	brge	.+16     	; 0x108c <fputc+0x38>
    107c:	a0 81       	ld	r26, Z
    107e:	b1 81       	ldd	r27, Z+1	; 0x01
    1080:	9d 01       	movw	r18, r26
    1082:	2f 5f       	subi	r18, 0xFF	; 255
    1084:	3f 4f       	sbci	r19, 0xFF	; 255
    1086:	31 83       	std	Z+1, r19	; 0x01
    1088:	20 83       	st	Z, r18
    108a:	8c 93       	st	X, r24
    108c:	26 81       	ldd	r18, Z+6	; 0x06
    108e:	37 81       	ldd	r19, Z+7	; 0x07
    1090:	2f 5f       	subi	r18, 0xFF	; 255
    1092:	3f 4f       	sbci	r19, 0xFF	; 255
    1094:	37 83       	std	Z+7, r19	; 0x07
    1096:	26 83       	std	Z+6, r18	; 0x06
    1098:	14 c0       	rjmp	.+40     	; 0x10c2 <fputc+0x6e>
    109a:	8b 01       	movw	r16, r22
    109c:	ec 01       	movw	r28, r24
    109e:	fb 01       	movw	r30, r22
    10a0:	00 84       	ldd	r0, Z+8	; 0x08
    10a2:	f1 85       	ldd	r31, Z+9	; 0x09
    10a4:	e0 2d       	mov	r30, r0
    10a6:	09 95       	icall
    10a8:	89 2b       	or	r24, r25
    10aa:	e1 f6       	brne	.-72     	; 0x1064 <fputc+0x10>
    10ac:	d8 01       	movw	r26, r16
    10ae:	16 96       	adiw	r26, 0x06	; 6
    10b0:	8d 91       	ld	r24, X+
    10b2:	9c 91       	ld	r25, X
    10b4:	17 97       	sbiw	r26, 0x07	; 7
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	17 96       	adiw	r26, 0x07	; 7
    10ba:	9c 93       	st	X, r25
    10bc:	8e 93       	st	-X, r24
    10be:	16 97       	sbiw	r26, 0x06	; 6
    10c0:	ce 01       	movw	r24, r28
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	1f 91       	pop	r17
    10c8:	0f 91       	pop	r16
    10ca:	08 95       	ret

000010cc <__ultoa_invert>:
    10cc:	fa 01       	movw	r30, r20
    10ce:	aa 27       	eor	r26, r26
    10d0:	28 30       	cpi	r18, 0x08	; 8
    10d2:	51 f1       	breq	.+84     	; 0x1128 <__ultoa_invert+0x5c>
    10d4:	20 31       	cpi	r18, 0x10	; 16
    10d6:	81 f1       	breq	.+96     	; 0x1138 <__ultoa_invert+0x6c>
    10d8:	e8 94       	clt
    10da:	6f 93       	push	r22
    10dc:	6e 7f       	andi	r22, 0xFE	; 254
    10de:	6e 5f       	subi	r22, 0xFE	; 254
    10e0:	7f 4f       	sbci	r23, 0xFF	; 255
    10e2:	8f 4f       	sbci	r24, 0xFF	; 255
    10e4:	9f 4f       	sbci	r25, 0xFF	; 255
    10e6:	af 4f       	sbci	r26, 0xFF	; 255
    10e8:	b1 e0       	ldi	r27, 0x01	; 1
    10ea:	3e d0       	rcall	.+124    	; 0x1168 <__ultoa_invert+0x9c>
    10ec:	b4 e0       	ldi	r27, 0x04	; 4
    10ee:	3c d0       	rcall	.+120    	; 0x1168 <__ultoa_invert+0x9c>
    10f0:	67 0f       	add	r22, r23
    10f2:	78 1f       	adc	r23, r24
    10f4:	89 1f       	adc	r24, r25
    10f6:	9a 1f       	adc	r25, r26
    10f8:	a1 1d       	adc	r26, r1
    10fa:	68 0f       	add	r22, r24
    10fc:	79 1f       	adc	r23, r25
    10fe:	8a 1f       	adc	r24, r26
    1100:	91 1d       	adc	r25, r1
    1102:	a1 1d       	adc	r26, r1
    1104:	6a 0f       	add	r22, r26
    1106:	71 1d       	adc	r23, r1
    1108:	81 1d       	adc	r24, r1
    110a:	91 1d       	adc	r25, r1
    110c:	a1 1d       	adc	r26, r1
    110e:	20 d0       	rcall	.+64     	; 0x1150 <__ultoa_invert+0x84>
    1110:	09 f4       	brne	.+2      	; 0x1114 <__ultoa_invert+0x48>
    1112:	68 94       	set
    1114:	3f 91       	pop	r19
    1116:	2a e0       	ldi	r18, 0x0A	; 10
    1118:	26 9f       	mul	r18, r22
    111a:	11 24       	eor	r1, r1
    111c:	30 19       	sub	r19, r0
    111e:	30 5d       	subi	r19, 0xD0	; 208
    1120:	31 93       	st	Z+, r19
    1122:	de f6       	brtc	.-74     	; 0x10da <__ultoa_invert+0xe>
    1124:	cf 01       	movw	r24, r30
    1126:	08 95       	ret
    1128:	46 2f       	mov	r20, r22
    112a:	47 70       	andi	r20, 0x07	; 7
    112c:	40 5d       	subi	r20, 0xD0	; 208
    112e:	41 93       	st	Z+, r20
    1130:	b3 e0       	ldi	r27, 0x03	; 3
    1132:	0f d0       	rcall	.+30     	; 0x1152 <__ultoa_invert+0x86>
    1134:	c9 f7       	brne	.-14     	; 0x1128 <__ultoa_invert+0x5c>
    1136:	f6 cf       	rjmp	.-20     	; 0x1124 <__ultoa_invert+0x58>
    1138:	46 2f       	mov	r20, r22
    113a:	4f 70       	andi	r20, 0x0F	; 15
    113c:	40 5d       	subi	r20, 0xD0	; 208
    113e:	4a 33       	cpi	r20, 0x3A	; 58
    1140:	18 f0       	brcs	.+6      	; 0x1148 <__ultoa_invert+0x7c>
    1142:	49 5d       	subi	r20, 0xD9	; 217
    1144:	31 fd       	sbrc	r19, 1
    1146:	40 52       	subi	r20, 0x20	; 32
    1148:	41 93       	st	Z+, r20
    114a:	02 d0       	rcall	.+4      	; 0x1150 <__ultoa_invert+0x84>
    114c:	a9 f7       	brne	.-22     	; 0x1138 <__ultoa_invert+0x6c>
    114e:	ea cf       	rjmp	.-44     	; 0x1124 <__ultoa_invert+0x58>
    1150:	b4 e0       	ldi	r27, 0x04	; 4
    1152:	a6 95       	lsr	r26
    1154:	97 95       	ror	r25
    1156:	87 95       	ror	r24
    1158:	77 95       	ror	r23
    115a:	67 95       	ror	r22
    115c:	ba 95       	dec	r27
    115e:	c9 f7       	brne	.-14     	; 0x1152 <__ultoa_invert+0x86>
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	61 05       	cpc	r22, r1
    1164:	71 05       	cpc	r23, r1
    1166:	08 95       	ret
    1168:	9b 01       	movw	r18, r22
    116a:	ac 01       	movw	r20, r24
    116c:	0a 2e       	mov	r0, r26
    116e:	06 94       	lsr	r0
    1170:	57 95       	ror	r21
    1172:	47 95       	ror	r20
    1174:	37 95       	ror	r19
    1176:	27 95       	ror	r18
    1178:	ba 95       	dec	r27
    117a:	c9 f7       	brne	.-14     	; 0x116e <__ultoa_invert+0xa2>
    117c:	62 0f       	add	r22, r18
    117e:	73 1f       	adc	r23, r19
    1180:	84 1f       	adc	r24, r20
    1182:	95 1f       	adc	r25, r21
    1184:	a0 1d       	adc	r26, r0
    1186:	08 95       	ret

00001188 <__prologue_saves__>:
    1188:	2f 92       	push	r2
    118a:	3f 92       	push	r3
    118c:	4f 92       	push	r4
    118e:	5f 92       	push	r5
    1190:	6f 92       	push	r6
    1192:	7f 92       	push	r7
    1194:	8f 92       	push	r8
    1196:	9f 92       	push	r9
    1198:	af 92       	push	r10
    119a:	bf 92       	push	r11
    119c:	cf 92       	push	r12
    119e:	df 92       	push	r13
    11a0:	ef 92       	push	r14
    11a2:	ff 92       	push	r15
    11a4:	0f 93       	push	r16
    11a6:	1f 93       	push	r17
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	ca 1b       	sub	r28, r26
    11b2:	db 0b       	sbc	r29, r27
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	09 94       	ijmp

000011c0 <__epilogue_restores__>:
    11c0:	2a 88       	ldd	r2, Y+18	; 0x12
    11c2:	39 88       	ldd	r3, Y+17	; 0x11
    11c4:	48 88       	ldd	r4, Y+16	; 0x10
    11c6:	5f 84       	ldd	r5, Y+15	; 0x0f
    11c8:	6e 84       	ldd	r6, Y+14	; 0x0e
    11ca:	7d 84       	ldd	r7, Y+13	; 0x0d
    11cc:	8c 84       	ldd	r8, Y+12	; 0x0c
    11ce:	9b 84       	ldd	r9, Y+11	; 0x0b
    11d0:	aa 84       	ldd	r10, Y+10	; 0x0a
    11d2:	b9 84       	ldd	r11, Y+9	; 0x09
    11d4:	c8 84       	ldd	r12, Y+8	; 0x08
    11d6:	df 80       	ldd	r13, Y+7	; 0x07
    11d8:	ee 80       	ldd	r14, Y+6	; 0x06
    11da:	fd 80       	ldd	r15, Y+5	; 0x05
    11dc:	0c 81       	ldd	r16, Y+4	; 0x04
    11de:	1b 81       	ldd	r17, Y+3	; 0x03
    11e0:	aa 81       	ldd	r26, Y+2	; 0x02
    11e2:	b9 81       	ldd	r27, Y+1	; 0x01
    11e4:	ce 0f       	add	r28, r30
    11e6:	d1 1d       	adc	r29, r1
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	ed 01       	movw	r28, r26
    11f4:	08 95       	ret

000011f6 <_exit>:
    11f6:	f8 94       	cli

000011f8 <__stop_program>:
    11f8:	ff cf       	rjmp	.-2      	; 0x11f8 <__stop_program>
