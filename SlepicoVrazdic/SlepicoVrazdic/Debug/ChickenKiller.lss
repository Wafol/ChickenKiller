
ChickenKiller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  000012a4  00001338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000078  00800144  00800144  0000137c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c13  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c01  00000000  00000000  00003203  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011b7  00000000  00000000  00003e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000458  00000000  00000000  00004fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000091f  00000000  00000000  00005414  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e4f  00000000  00000000  00005d33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00006b82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	b6 c4       	rjmp	.+2412   	; 0x97a <__vector_6>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	d4 e0       	ldi	r29, 0x04	; 4
      3c:	de bf       	out	0x3e, r29	; 62
      3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
      40:	11 e0       	ldi	r17, 0x01	; 1
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	b1 e0       	ldi	r27, 0x01	; 1
      46:	e4 ea       	ldi	r30, 0xA4	; 164
      48:	f2 e1       	ldi	r31, 0x12	; 18
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a4 34       	cpi	r26, 0x44	; 68
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	21 e0       	ldi	r18, 0x01	; 1
      58:	a4 e4       	ldi	r26, 0x44	; 68
      5a:	b1 e0       	ldi	r27, 0x01	; 1
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	ac 3b       	cpi	r26, 0xBC	; 188
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	e1 d3       	rcall	.+1986   	; 0x82a <main>
      68:	1b c9       	rjmp	.-3530   	; 0xfffff2a0 <__eeprom_end+0xff7ef2a0>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <checkAlarm>:
	next_minute = decimalToHex(minutes);
}

//vrati jestli je cas budiku stejny jak aktualni cas
bool checkAlarm() {
	return (next_hour == _hour) && (next_minute == _minute);
      6c:	20 91 4f 01 	lds	r18, 0x014F	; 0x80014f <next_hour>
      70:	30 91 50 01 	lds	r19, 0x0150	; 0x800150 <next_hour+0x1>
      74:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <_hour>
      78:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <_hour+0x1>
      7c:	28 17       	cp	r18, r24
      7e:	39 07       	cpc	r19, r25
      80:	69 f4       	brne	.+26     	; 0x9c <checkAlarm+0x30>
      82:	20 91 91 01 	lds	r18, 0x0191	; 0x800191 <next_minute>
      86:	30 91 92 01 	lds	r19, 0x0192	; 0x800192 <next_minute+0x1>
      8a:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <_minute>
      8e:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <_minute+0x1>
      92:	28 17       	cp	r18, r24
      94:	39 07       	cpc	r19, r25
      96:	21 f0       	breq	.+8      	; 0xa0 <checkAlarm+0x34>
      98:	80 e0       	ldi	r24, 0x00	; 0
      9a:	08 95       	ret
      9c:	80 e0       	ldi	r24, 0x00	; 0
      9e:	08 95       	ret
      a0:	81 e0       	ldi	r24, 0x01	; 1
}
      a2:	08 95       	ret

000000a4 <hourAndMinuteToMinutes>:
	int diference = last_time - first_time;
	return ((float) diference)/((float) month_sun_rises.days_count);
}

int hourAndMinuteToMinutes(uint8_t hour, uint8_t minute) {
	return (hour*60) + minute;
      a4:	70 e0       	ldi	r23, 0x00	; 0
}
      a6:	9b 01       	movw	r18, r22
      a8:	4c e3       	ldi	r20, 0x3C	; 60
      aa:	84 9f       	mul	r24, r20
      ac:	20 0d       	add	r18, r0
      ae:	31 1d       	adc	r19, r1
      b0:	11 24       	eor	r1, r1
      b2:	c9 01       	movw	r24, r18
      b4:	08 95       	ret

000000b6 <calculateDayAverageTimeChange>:
//vrati jestli je cas budiku stejny jak aktualni cas
bool checkAlarm() {
	return (next_hour == _hour) && (next_minute == _minute);
}

float calculateDayAverageTimeChange(struct MonthSunRises month_sun_rises) {
      b6:	cf 92       	push	r12
      b8:	df 92       	push	r13
      ba:	ef 92       	push	r14
      bc:	ff 92       	push	r15
      be:	0f 93       	push	r16
      c0:	1f 93       	push	r17
      c2:	cf 93       	push	r28
      c4:	df 93       	push	r29
      c6:	00 d0       	rcall	.+0      	; 0xc8 <calculateDayAverageTimeChange+0x12>
      c8:	00 d0       	rcall	.+0      	; 0xca <calculateDayAverageTimeChange+0x14>
      ca:	1f 92       	push	r1
      cc:	cd b7       	in	r28, 0x3d	; 61
      ce:	de b7       	in	r29, 0x3e	; 62
      d0:	d6 2e       	mov	r13, r22
      d2:	07 2f       	mov	r16, r23
      d4:	18 2f       	mov	r17, r24
	int first_time = hourAndMinuteToMinutes(month_sun_rises.first_hour, month_sun_rises.first_minute);
      d6:	65 2f       	mov	r22, r21
      d8:	84 2f       	mov	r24, r20
      da:	e4 df       	rcall	.-56     	; 0xa4 <hourAndMinuteToMinutes>
      dc:	7c 01       	movw	r14, r24
	int last_time = hourAndMinuteToMinutes(month_sun_rises.last_hour, month_sun_rises.last_minute);
      de:	60 2f       	mov	r22, r16
      e0:	8d 2d       	mov	r24, r13
      e2:	e0 df       	rcall	.-64     	; 0xa4 <hourAndMinuteToMinutes>
	
	int diference = last_time - first_time;
      e4:	8e 19       	sub	r24, r14
      e6:	9f 09       	sbc	r25, r15
	return ((float) diference)/((float) month_sun_rises.days_count);
      e8:	bc 01       	movw	r22, r24
      ea:	99 0f       	add	r25, r25
      ec:	88 0b       	sbc	r24, r24
      ee:	99 0b       	sbc	r25, r25
      f0:	e9 d4       	rcall	.+2514   	; 0xac4 <__floatsisf>
      f2:	6b 01       	movw	r12, r22
      f4:	7c 01       	movw	r14, r24
      f6:	61 2f       	mov	r22, r17
      f8:	70 e0       	ldi	r23, 0x00	; 0
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	e0 d4       	rcall	.+2496   	; 0xac0 <__floatunsisf>
     100:	9b 01       	movw	r18, r22
     102:	ac 01       	movw	r20, r24
     104:	c7 01       	movw	r24, r14
     106:	b6 01       	movw	r22, r12
     108:	42 d4       	rcall	.+2180   	; 0x98e <__divsf3>
}
     10a:	0f 90       	pop	r0
     10c:	0f 90       	pop	r0
     10e:	0f 90       	pop	r0
     110:	0f 90       	pop	r0
     112:	0f 90       	pop	r0
     114:	df 91       	pop	r29
     116:	cf 91       	pop	r28
     118:	1f 91       	pop	r17
     11a:	0f 91       	pop	r16
     11c:	ff 90       	pop	r15
     11e:	ef 90       	pop	r14
     120:	df 90       	pop	r13
     122:	cf 90       	pop	r12
     124:	08 95       	ret

00000126 <byteHexToDecimal>:
}

//0x21 -> 21
uint8_t byteHexToDecimal(int hex) { //max byte!!!!!!
	//in 0x21 it is digit "2"
	int second_degree = hex/16;
     126:	9c 01       	movw	r18, r24
     128:	99 23       	and	r25, r25
     12a:	14 f4       	brge	.+4      	; 0x130 <byteHexToDecimal+0xa>
     12c:	21 5f       	subi	r18, 0xF1	; 241
     12e:	3f 4f       	sbci	r19, 0xFF	; 255
     130:	35 95       	asr	r19
     132:	27 95       	ror	r18
     134:	35 95       	asr	r19
     136:	27 95       	ror	r18
     138:	35 95       	asr	r19
     13a:	27 95       	ror	r18
     13c:	35 95       	asr	r19
     13e:	27 95       	ror	r18
	int first_degree = hex - (16*second_degree);
     140:	a9 01       	movw	r20, r18
     142:	42 95       	swap	r20
     144:	52 95       	swap	r21
     146:	50 7f       	andi	r21, 0xF0	; 240
     148:	54 27       	eor	r21, r20
     14a:	40 7f       	andi	r20, 0xF0	; 240
     14c:	54 27       	eor	r21, r20
     14e:	84 1b       	sub	r24, r20
     150:	95 0b       	sbc	r25, r21
	
	return (second_degree*10) + first_degree;
     152:	22 0f       	add	r18, r18
     154:	92 2f       	mov	r25, r18
     156:	99 0f       	add	r25, r25
     158:	99 0f       	add	r25, r25
     15a:	29 0f       	add	r18, r25
}
     15c:	82 0f       	add	r24, r18
     15e:	08 95       	ret

00000160 <decimalToHex>:

//21 -> 0x21
int decimalToHex(uint8_t dec) {
	uint8_t second_degree = dec/10;
     160:	2d ec       	ldi	r18, 0xCD	; 205
     162:	82 9f       	mul	r24, r18
     164:	21 2d       	mov	r18, r1
     166:	11 24       	eor	r1, r1
     168:	26 95       	lsr	r18
     16a:	26 95       	lsr	r18
     16c:	26 95       	lsr	r18
	uint8_t first_degree = dec - (10*second_degree);
     16e:	32 2f       	mov	r19, r18
     170:	33 0f       	add	r19, r19
     172:	93 2f       	mov	r25, r19
     174:	99 0f       	add	r25, r25
     176:	99 0f       	add	r25, r25
     178:	93 0f       	add	r25, r19
     17a:	89 1b       	sub	r24, r25
	
	return (second_degree*16) + first_degree;
     17c:	90 e0       	ldi	r25, 0x00	; 0
}
     17e:	30 e1       	ldi	r19, 0x10	; 16
     180:	23 9f       	mul	r18, r19
     182:	80 0d       	add	r24, r0
     184:	91 1d       	adc	r25, r1
     186:	11 24       	eor	r1, r1
     188:	08 95       	ret

0000018a <setNextAlarm>:

//leden [0] -> prosinec [11]
struct MonthSunRises months_sun_rises[12];

//after_days = 1 => zitra
void setNextAlarm(uint8_t after_days) {
     18a:	cf 92       	push	r12
     18c:	df 92       	push	r13
     18e:	ef 92       	push	r14
     190:	ff 92       	push	r15
     192:	0f 93       	push	r16
     194:	1f 93       	push	r17
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	00 d0       	rcall	.+0      	; 0x19c <setNextAlarm+0x12>
     19c:	00 d0       	rcall	.+0      	; 0x19e <setNextAlarm+0x14>
     19e:	1f 92       	push	r1
     1a0:	cd b7       	in	r28, 0x3d	; 61
     1a2:	de b7       	in	r29, 0x3e	; 62
     1a4:	08 2f       	mov	r16, r24
	readCalendar();
     1a6:	fa d0       	rcall	.+500    	; 0x39c <readCalendar>
	
	uint8_t dec_month = byteHexToDecimal(_month) - 1; //-1 aby leden nebyl 1 ale 0
     1a8:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <_month>
     1ac:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <_month+0x1>
     1b0:	ba df       	rcall	.-140    	; 0x126 <byteHexToDecimal>
     1b2:	1f ef       	ldi	r17, 0xFF	; 255
     1b4:	18 0f       	add	r17, r24
	uint8_t dec_date = byteHexToDecimal(_date) - 1 + after_days; //day in month (-1 -> stejny duvod)
     1b6:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <_date>
     1ba:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <_date+0x1>
     1be:	b3 df       	rcall	.-154    	; 0x126 <byteHexToDecimal>
     1c0:	80 0f       	add	r24, r16
     1c2:	0f ef       	ldi	r16, 0xFF	; 255
     1c4:	08 0f       	add	r16, r24
	
	struct MonthSunRises month_sun_rises = months_sun_rises[dec_month];
     1c6:	e1 2f       	mov	r30, r17
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	cf 01       	movw	r24, r30
     1cc:	88 0f       	add	r24, r24
     1ce:	99 1f       	adc	r25, r25
     1d0:	88 0f       	add	r24, r24
     1d2:	99 1f       	adc	r25, r25
     1d4:	e8 0f       	add	r30, r24
     1d6:	f9 1f       	adc	r31, r25
     1d8:	ed 5a       	subi	r30, 0xAD	; 173
     1da:	fe 4f       	sbci	r31, 0xFE	; 254
     1dc:	85 e0       	ldi	r24, 0x05	; 5
     1de:	de 01       	movw	r26, r28
     1e0:	11 96       	adiw	r26, 0x01	; 1
     1e2:	01 90       	ld	r0, Z+
     1e4:	0d 92       	st	X+, r0
     1e6:	8a 95       	dec	r24
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <setNextAlarm+0x58>
	
	float average_change = calculateDayAverageTimeChange(month_sun_rises);
     1ea:	49 81       	ldd	r20, Y+1	; 0x01
     1ec:	5a 81       	ldd	r21, Y+2	; 0x02
     1ee:	6b 81       	ldd	r22, Y+3	; 0x03
     1f0:	7c 81       	ldd	r23, Y+4	; 0x04
     1f2:	8d 81       	ldd	r24, Y+5	; 0x05
     1f4:	60 df       	rcall	.-320    	; 0xb6 <calculateDayAverageTimeChange>
     1f6:	6b 01       	movw	r12, r22
     1f8:	7c 01       	movw	r14, r24
	int final_change = (int) (average_change*((float)dec_date)); //odchylka od (first_hour+first_hour)
     1fa:	60 2f       	mov	r22, r16
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	5e d4       	rcall	.+2236   	; 0xac0 <__floatunsisf>
     204:	9b 01       	movw	r18, r22
     206:	ac 01       	movw	r20, r24
     208:	c7 01       	movw	r24, r14
     20a:	b6 01       	movw	r22, r12
     20c:	e7 d4       	rcall	.+2510   	; 0xbdc <__mulsf3>
     20e:	27 d4       	rcall	.+2126   	; 0xa5e <__fixsfsi>
     210:	6b 01       	movw	r12, r22
     212:	7c 01       	movw	r14, r24
	
	int first_time_minutes = hourAndMinuteToMinutes(month_sun_rises.first_hour, month_sun_rises.first_minute);
     214:	6a 81       	ldd	r22, Y+2	; 0x02
     216:	89 81       	ldd	r24, Y+1	; 0x01
     218:	45 df       	rcall	.-374    	; 0xa4 <hourAndMinuteToMinutes>
	
	int final_time_minutes = first_time_minutes + final_change;
     21a:	c8 0e       	add	r12, r24
     21c:	d9 1e       	adc	r13, r25
	//minutes to hours and minutes
	uint8_t hours = final_time_minutes/60;
     21e:	c6 01       	movw	r24, r12
     220:	6c e3       	ldi	r22, 0x3C	; 60
     222:	70 e0       	ldi	r23, 0x00	; 0
     224:	3e d5       	rcall	.+2684   	; 0xca2 <__divmodhi4>
     226:	86 2f       	mov	r24, r22
	uint8_t minutes = final_time_minutes - (hours*60);
     228:	9c e3       	ldi	r25, 0x3C	; 60
     22a:	69 9f       	mul	r22, r25
     22c:	c0 18       	sub	r12, r0
     22e:	11 24       	eor	r1, r1
	
	next_hour = decimalToHex(hours);
     230:	97 df       	rcall	.-210    	; 0x160 <decimalToHex>
     232:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <next_hour+0x1>
     236:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <next_hour>
	next_minute = decimalToHex(minutes);
     23a:	8c 2d       	mov	r24, r12
     23c:	91 df       	rcall	.-222    	; 0x160 <decimalToHex>
     23e:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <next_minute+0x1>
     242:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <next_minute>
}
     246:	0f 90       	pop	r0
     248:	0f 90       	pop	r0
     24a:	0f 90       	pop	r0
     24c:	0f 90       	pop	r0
     24e:	0f 90       	pop	r0
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	1f 91       	pop	r17
     256:	0f 91       	pop	r16
     258:	ff 90       	pop	r15
     25a:	ef 90       	pop	r14
     25c:	df 90       	pop	r13
     25e:	cf 90       	pop	r12
     260:	08 95       	ret

00000262 <initMonthsSunRises>:
	return (second_degree*16) + first_degree;
}

void initMonthsSunRises() {
	//leden
	months_sun_rises[0].first_hour = 7;
     262:	e3 e5       	ldi	r30, 0x53	; 83
     264:	f1 e0       	ldi	r31, 0x01	; 1
     266:	27 e0       	ldi	r18, 0x07	; 7
     268:	20 83       	st	Z, r18
	months_sun_rises[0].first_minute = 54;
     26a:	66 e3       	ldi	r22, 0x36	; 54
     26c:	61 83       	std	Z+1, r22	; 0x01
	months_sun_rises[0].last_hour = 7;
     26e:	22 83       	std	Z+2, r18	; 0x02
	months_sun_rises[0].last_minute = 33;
     270:	81 e2       	ldi	r24, 0x21	; 33
     272:	83 83       	std	Z+3, r24	; 0x03
	months_sun_rises[0].days_count = 31;
     274:	9f e1       	ldi	r25, 0x1F	; 31
     276:	94 83       	std	Z+4, r25	; 0x04
	
	//unor
	months_sun_rises[1].first_hour = 7;
     278:	25 83       	std	Z+5, r18	; 0x05
	months_sun_rises[1].first_minute = 31;
     27a:	96 83       	std	Z+6, r25	; 0x06
	months_sun_rises[1].last_hour = 6;
     27c:	86 e0       	ldi	r24, 0x06	; 6
     27e:	87 83       	std	Z+7, r24	; 0x07
	months_sun_rises[1].last_minute = 44;
     280:	3c e2       	ldi	r19, 0x2C	; 44
     282:	30 87       	std	Z+8, r19	; 0x08
	months_sun_rises[1].days_count = 28;
     284:	3c e1       	ldi	r19, 0x1C	; 28
     286:	31 87       	std	Z+9, r19	; 0x09
	
	//brezen
	months_sun_rises[2].first_hour = 6;
     288:	82 87       	std	Z+10, r24	; 0x0a
	months_sun_rises[2].first_minute = 42;
     28a:	3a e2       	ldi	r19, 0x2A	; 42
     28c:	33 87       	std	Z+11, r19	; 0x0b
	months_sun_rises[2].last_hour = 6;
     28e:	84 87       	std	Z+12, r24	; 0x0c
	months_sun_rises[2].last_minute = 38;
     290:	36 e2       	ldi	r19, 0x26	; 38
     292:	35 87       	std	Z+13, r19	; 0x0d
	months_sun_rises[2].days_count = 31;
     294:	96 87       	std	Z+14, r25	; 0x0e
	
	//duben
	months_sun_rises[3].first_hour = 6;
     296:	87 87       	std	Z+15, r24	; 0x0f
	months_sun_rises[3].first_minute = 35;
     298:	33 e2       	ldi	r19, 0x23	; 35
     29a:	30 8b       	std	Z+16, r19	; 0x10
	months_sun_rises[3].last_hour = 5;
     29c:	45 e0       	ldi	r20, 0x05	; 5
     29e:	41 8b       	std	Z+17, r20	; 0x11
	months_sun_rises[3].last_minute = 36;
     2a0:	34 e2       	ldi	r19, 0x24	; 36
     2a2:	32 8b       	std	Z+18, r19	; 0x12
	months_sun_rises[3].days_count = 30;
     2a4:	3e e1       	ldi	r19, 0x1E	; 30
     2a6:	33 8b       	std	Z+19, r19	; 0x13
	
	//kveten
	months_sun_rises[4].first_hour = 5;
     2a8:	44 8b       	std	Z+20, r20	; 0x14
	months_sun_rises[4].first_minute = 34;
     2aa:	52 e2       	ldi	r21, 0x22	; 34
     2ac:	55 8b       	std	Z+21, r21	; 0x15
	months_sun_rises[4].last_hour = 4;
     2ae:	54 e0       	ldi	r21, 0x04	; 4
     2b0:	56 8b       	std	Z+22, r21	; 0x16
	months_sun_rises[4].last_minute = 53;
     2b2:	75 e3       	ldi	r23, 0x35	; 53
     2b4:	77 8b       	std	Z+23, r23	; 0x17
	months_sun_rises[4].days_count = 31;
     2b6:	90 8f       	std	Z+24, r25	; 0x18
	
	//cerven
	months_sun_rises[5].first_hour = 4;
     2b8:	51 8f       	std	Z+25, r21	; 0x19
	months_sun_rises[5].first_minute = 52;
     2ba:	a4 e3       	ldi	r26, 0x34	; 52
     2bc:	a2 8f       	std	Z+26, r26	; 0x1a
	months_sun_rises[5].last_hour = 4;
     2be:	53 8f       	std	Z+27, r21	; 0x1b
	months_sun_rises[5].last_minute = 49;
     2c0:	b1 e3       	ldi	r27, 0x31	; 49
     2c2:	b4 8f       	std	Z+28, r27	; 0x1c
	months_sun_rises[5].days_count = 30;
     2c4:	35 8f       	std	Z+29, r19	; 0x1d
	
	//cervenec
	months_sun_rises[6].first_hour = 4;
     2c6:	56 8f       	std	Z+30, r21	; 0x1e
	months_sun_rises[6].first_minute = 50;
     2c8:	52 e3       	ldi	r21, 0x32	; 50
     2ca:	57 8f       	std	Z+31, r21	; 0x1f
	months_sun_rises[6].last_hour = 5;
     2cc:	40 a3       	std	Z+32, r20	; 0x20
	months_sun_rises[6].last_minute = 21;
     2ce:	55 e1       	ldi	r21, 0x15	; 21
     2d0:	51 a3       	std	Z+33, r21	; 0x21
	months_sun_rises[6].days_count = 31;
     2d2:	92 a3       	std	Z+34, r25	; 0x22
	
	//srpen
	months_sun_rises[7].first_hour = 5;
     2d4:	43 a3       	std	Z+35, r20	; 0x23
	months_sun_rises[7].first_minute = 23;
     2d6:	47 e1       	ldi	r20, 0x17	; 23
     2d8:	44 a3       	std	Z+36, r20	; 0x24
	months_sun_rises[7].last_hour = 6;
     2da:	85 a3       	std	Z+37, r24	; 0x25
	months_sun_rises[7].last_minute = 07;
     2dc:	26 a3       	std	Z+38, r18	; 0x26
	months_sun_rises[7].days_count = 31;
     2de:	97 a3       	std	Z+39, r25	; 0x27
	
	//zari
	months_sun_rises[8].first_hour = 6;
     2e0:	80 a7       	std	Z+40, r24	; 0x28
	months_sun_rises[8].first_minute = 8;
     2e2:	48 e0       	ldi	r20, 0x08	; 8
     2e4:	41 a7       	std	Z+41, r20	; 0x29
	months_sun_rises[8].last_hour = 6;
     2e6:	82 a7       	std	Z+42, r24	; 0x2a
	months_sun_rises[8].last_minute = 52;
     2e8:	a3 a7       	std	Z+43, r26	; 0x2b
	months_sun_rises[8].days_count = 30;
     2ea:	34 a7       	std	Z+44, r19	; 0x2c
	
	//rijen
	months_sun_rises[9].first_hour = 6;
     2ec:	85 a7       	std	Z+45, r24	; 0x2d
	months_sun_rises[9].first_minute = 53;
     2ee:	76 a7       	std	Z+46, r23	; 0x2e
	months_sun_rises[9].last_hour = 6;
     2f0:	87 a7       	std	Z+47, r24	; 0x2f
	months_sun_rises[9].last_minute = 41;
     2f2:	49 e2       	ldi	r20, 0x29	; 41
     2f4:	40 ab       	std	Z+48, r20	; 0x30
	months_sun_rises[9].days_count = 31;	
     2f6:	91 ab       	std	Z+49, r25	; 0x31
	
	//listopad
	months_sun_rises[10].first_hour = 6;
     2f8:	82 ab       	std	Z+50, r24	; 0x32
	months_sun_rises[10].first_minute = 43;
     2fa:	8b e2       	ldi	r24, 0x2B	; 43
     2fc:	83 ab       	std	Z+51, r24	; 0x33
	months_sun_rises[10].last_hour = 7;
     2fe:	24 ab       	std	Z+52, r18	; 0x34
	months_sun_rises[10].last_minute = 29;
     300:	8d e1       	ldi	r24, 0x1D	; 29
     302:	85 ab       	std	Z+53, r24	; 0x35
	months_sun_rises[10].days_count = 30;
     304:	36 ab       	std	Z+54, r19	; 0x36
	
	//prosinec
	months_sun_rises[11].first_hour = 7;
     306:	27 ab       	std	Z+55, r18	; 0x37
	months_sun_rises[11].first_minute = 30;
     308:	30 af       	std	Z+56, r19	; 0x38
	months_sun_rises[11].last_hour = 7;
     30a:	21 af       	std	Z+57, r18	; 0x39
	months_sun_rises[11].last_minute = 54;
     30c:	62 af       	std	Z+58, r22	; 0x3a
	months_sun_rises[11].days_count = 31;
     30e:	93 af       	std	Z+59, r25	; 0x3b
     310:	08 95       	ret

00000312 <clockInit>:
void RTC_Clock_Write(char hour, char minute, char second, char AMPM);

char* days[7] = {"Mon","Tue","Wed","Thu","Fri","Sat","Sun"};

void clockInit() {
	I2C_Init();										// Initialize I2C
     312:	88 d0       	rcall	.+272    	; 0x424 <I2C_Init>
     314:	08 95       	ret

00000316 <RTC_Read_Clock>:
//data will be stored at date,month... int variables (at ClockManager.h)
void readCalendar() {
	RTC_Read_Calendar(3);
}

void RTC_Read_Clock(char read_clock_address) {
     316:	cf 93       	push	r28
     318:	c8 2f       	mov	r28, r24
	I2C_Start(Device_Write_address);				// Start I2C communication with RTC
     31a:	80 ed       	ldi	r24, 0xD0	; 208
     31c:	89 d0       	rcall	.+274    	; 0x430 <I2C_Start>
	I2C_Write(read_clock_address);					// Write address to read
     31e:	8c 2f       	mov	r24, r28
     320:	d7 d0       	rcall	.+430    	; 0x4d0 <I2C_Write>
	I2C_Repeated_Start(Device_Read_address);		// Repeated start with device read address
     322:	81 ed       	ldi	r24, 0xD1	; 209
     324:	a9 d0       	rcall	.+338    	; 0x478 <I2C_Repeated_Start>

	_second = I2C_Read_Ack();						// Read second
     326:	ea d0       	rcall	.+468    	; 0x4fc <I2C_Read_Ack>
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <_second+0x1>
     32e:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <_second>
	_minute = I2C_Read_Ack();						// Read minute
     332:	e4 d0       	rcall	.+456    	; 0x4fc <I2C_Read_Ack>
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <_minute+0x1>
     33a:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <_minute>
	_hour = I2C_Read_Nack();							// Read hour with Nack
     33e:	e8 d0       	rcall	.+464    	; 0x510 <I2C_Read_Nack>
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <_hour+0x1>
     346:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <_hour>
	I2C_Stop();										// Stop i2C communication
     34a:	ba d0       	rcall	.+372    	; 0x4c0 <I2C_Stop>
}
     34c:	cf 91       	pop	r28
     34e:	08 95       	ret

00000350 <readClock>:
	I2C_Init();										// Initialize I2C
}

//data will be stored at second,minute... int variables (at ClockManager.h)
void readClock() {
	RTC_Read_Clock(0);
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	e1 df       	rcall	.-62     	; 0x316 <RTC_Read_Clock>
     354:	08 95       	ret

00000356 <RTC_Read_Calendar>:
	_second = I2C_Read_Ack();						// Read second
	_minute = I2C_Read_Ack();						// Read minute
	_hour = I2C_Read_Nack();							// Read hour with Nack
	I2C_Stop();										// Stop i2C communication
}
void RTC_Read_Calendar(char read_calendar_address) {
     356:	cf 93       	push	r28
     358:	c8 2f       	mov	r28, r24
	I2C_Start(Device_Write_address);
     35a:	80 ed       	ldi	r24, 0xD0	; 208
     35c:	69 d0       	rcall	.+210    	; 0x430 <I2C_Start>
	I2C_Write(read_calendar_address);
     35e:	8c 2f       	mov	r24, r28
     360:	b7 d0       	rcall	.+366    	; 0x4d0 <I2C_Write>
	I2C_Repeated_Start(Device_Read_address);
     362:	81 ed       	ldi	r24, 0xD1	; 209
     364:	89 d0       	rcall	.+274    	; 0x478 <I2C_Repeated_Start>

	_day = I2C_Read_Ack();							// Read day
     366:	ca d0       	rcall	.+404    	; 0x4fc <I2C_Read_Ack>
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <_day+0x1>
     36e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <_day>
	_date = I2C_Read_Ack();							// Read date
     372:	c4 d0       	rcall	.+392    	; 0x4fc <I2C_Read_Ack>
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <_date+0x1>
     37a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <_date>
	_month = I2C_Read_Ack();							// Read month
     37e:	be d0       	rcall	.+380    	; 0x4fc <I2C_Read_Ack>
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <_month+0x1>
     386:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <_month>
	_year = I2C_Read_Nack();							// Read the year with Nack
     38a:	c2 d0       	rcall	.+388    	; 0x510 <I2C_Read_Nack>
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <_year+0x1>
     392:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <_year>
	I2C_Stop();										// Stop i2C communication
     396:	94 d0       	rcall	.+296    	; 0x4c0 <I2C_Stop>
}
     398:	cf 91       	pop	r28
     39a:	08 95       	ret

0000039c <readCalendar>:
	RTC_Read_Clock(0);
}

//data will be stored at date,month... int variables (at ClockManager.h)
void readCalendar() {
	RTC_Read_Calendar(3);
     39c:	83 e0       	ldi	r24, 0x03	; 3
     39e:	db df       	rcall	.-74     	; 0x356 <RTC_Read_Calendar>
     3a0:	08 95       	ret

000003a2 <RTC_Clock_Write>:


///////////////write////////////////////
#define hour_24					0x00

void RTC_Clock_Write(char hour, char minute, char second, char AMPM) {
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	d6 2f       	mov	r29, r22
     3aa:	14 2f       	mov	r17, r20
	hour |= AMPM;
     3ac:	c8 2f       	mov	r28, r24
     3ae:	c2 2b       	or	r28, r18
	I2C_Start(Device_Write_address);			// Start I2C communication with RTC
     3b0:	80 ed       	ldi	r24, 0xD0	; 208
     3b2:	3e d0       	rcall	.+124    	; 0x430 <I2C_Start>
	I2C_Write(0);								// Write on 0 location for second value
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	8c d0       	rcall	.+280    	; 0x4d0 <I2C_Write>
	I2C_Write(second);							// Write second value on 00 location
     3b8:	81 2f       	mov	r24, r17
     3ba:	8a d0       	rcall	.+276    	; 0x4d0 <I2C_Write>
	I2C_Write(minute);							// Write minute value on 01 location
     3bc:	8d 2f       	mov	r24, r29
     3be:	88 d0       	rcall	.+272    	; 0x4d0 <I2C_Write>
	I2C_Write(hour);							// Write hour value on 02 location
     3c0:	8c 2f       	mov	r24, r28
     3c2:	86 d0       	rcall	.+268    	; 0x4d0 <I2C_Write>
	I2C_Stop();									// Stop I2C communication
     3c4:	7d d0       	rcall	.+250    	; 0x4c0 <I2C_Stop>
}
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	1f 91       	pop	r17
     3cc:	08 95       	ret

000003ce <RTC_Calendar_Write>:

void RTC_Calendar_Write(char day, char date, char month, char year)	{ // function for calendar
     3ce:	0f 93       	push	r16
     3d0:	1f 93       	push	r17
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	08 2f       	mov	r16, r24
     3d8:	16 2f       	mov	r17, r22
     3da:	d4 2f       	mov	r29, r20
     3dc:	c2 2f       	mov	r28, r18

	I2C_Start(Device_Write_address);			// Start I2C communication with RTC
     3de:	80 ed       	ldi	r24, 0xD0	; 208
     3e0:	27 d0       	rcall	.+78     	; 0x430 <I2C_Start>
	I2C_Write(3);								// Write on 3 location for day value
     3e2:	83 e0       	ldi	r24, 0x03	; 3
     3e4:	75 d0       	rcall	.+234    	; 0x4d0 <I2C_Write>
	I2C_Write(day);							// Write day value on 03 location
     3e6:	80 2f       	mov	r24, r16
     3e8:	73 d0       	rcall	.+230    	; 0x4d0 <I2C_Write>
	I2C_Write(date);							// Write date value on 04 location
     3ea:	81 2f       	mov	r24, r17
     3ec:	71 d0       	rcall	.+226    	; 0x4d0 <I2C_Write>
	I2C_Write(month);							// Write month value on 05 location
     3ee:	8d 2f       	mov	r24, r29
     3f0:	6f d0       	rcall	.+222    	; 0x4d0 <I2C_Write>
	I2C_Write(year);							// Write year value on 06 location
     3f2:	8c 2f       	mov	r24, r28
     3f4:	6d d0       	rcall	.+218    	; 0x4d0 <I2C_Write>
	I2C_Stop();									// Stop I2C communication
     3f6:	64 d0       	rcall	.+200    	; 0x4c0 <I2C_Stop>
}
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	08 95       	ret

00000402 <setClockAndCalendar>:


//day -> 0x00-Sobota, 0x06-Patek
void setClockAndCalendar(uint8_t hour, uint8_t minute, uint8_t second, uint8_t day, uint8_t date, uint8_t month, uint8_t year) {
     402:	cf 92       	push	r12
     404:	ef 92       	push	r14
     406:	0f 93       	push	r16
     408:	cf 93       	push	r28
     40a:	c2 2f       	mov	r28, r18
	RTC_Clock_Write(hour, minute, second, hour_24);// Write Hour Minute Second Format
     40c:	20 e0       	ldi	r18, 0x00	; 0
     40e:	c9 df       	rcall	.-110    	; 0x3a2 <RTC_Clock_Write>
	RTC_Calendar_Write(day, date, month, year);	// Write day date month and year
     410:	2c 2d       	mov	r18, r12
     412:	4e 2d       	mov	r20, r14
     414:	60 2f       	mov	r22, r16
     416:	8c 2f       	mov	r24, r28
     418:	da df       	rcall	.-76     	; 0x3ce <RTC_Calendar_Write>
     41a:	cf 91       	pop	r28
     41c:	0f 91       	pop	r16
     41e:	ef 90       	pop	r14
     420:	cf 90       	pop	r12
     422:	08 95       	ret

00000424 <I2C_Init>:
			I2C_Stop();										/* If not then generate stop condition */
			continue;										/* continue with start loop again */
		}
		break;												/* If yes then break loop */
	}
}
     424:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
     428:	8f ef       	ldi	r24, 0xFF	; 255
     42a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7fe0b8>
     42e:	08 95       	ret

00000430 <I2C_Start>:
     430:	94 ea       	ldi	r25, 0xA4	; 164
     432:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     436:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     43a:	99 23       	and	r25, r25
     43c:	e4 f7       	brge	.-8      	; 0x436 <I2C_Start+0x6>
     43e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
     442:	98 7f       	andi	r25, 0xF8	; 248
     444:	98 30       	cpi	r25, 0x08	; 8
     446:	91 f4       	brne	.+36     	; 0x46c <I2C_Start+0x3c>
     448:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
     44c:	84 e8       	ldi	r24, 0x84	; 132
     44e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     452:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     456:	88 23       	and	r24, r24
     458:	e4 f7       	brge	.-8      	; 0x452 <I2C_Start+0x22>
     45a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
     45e:	88 7f       	andi	r24, 0xF8	; 248
     460:	88 31       	cpi	r24, 0x18	; 24
     462:	31 f0       	breq	.+12     	; 0x470 <I2C_Start+0x40>
     464:	80 32       	cpi	r24, 0x20	; 32
     466:	31 f4       	brne	.+12     	; 0x474 <I2C_Start+0x44>
     468:	82 e0       	ldi	r24, 0x02	; 2
     46a:	08 95       	ret
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	08 95       	ret
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	08 95       	ret
     474:	83 e0       	ldi	r24, 0x03	; 3
     476:	08 95       	ret

00000478 <I2C_Repeated_Start>:
     478:	94 ea       	ldi	r25, 0xA4	; 164
     47a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     47e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     482:	99 23       	and	r25, r25
     484:	e4 f7       	brge	.-8      	; 0x47e <I2C_Repeated_Start+0x6>
     486:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
     48a:	98 7f       	andi	r25, 0xF8	; 248
     48c:	90 31       	cpi	r25, 0x10	; 16
     48e:	91 f4       	brne	.+36     	; 0x4b4 <I2C_Repeated_Start+0x3c>
     490:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
     494:	84 e8       	ldi	r24, 0x84	; 132
     496:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     49a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     49e:	88 23       	and	r24, r24
     4a0:	e4 f7       	brge	.-8      	; 0x49a <I2C_Repeated_Start+0x22>
     4a2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
     4a6:	88 7f       	andi	r24, 0xF8	; 248
     4a8:	80 34       	cpi	r24, 0x40	; 64
     4aa:	31 f0       	breq	.+12     	; 0x4b8 <I2C_Repeated_Start+0x40>
     4ac:	80 32       	cpi	r24, 0x20	; 32
     4ae:	31 f4       	brne	.+12     	; 0x4bc <I2C_Repeated_Start+0x44>
     4b0:	82 e0       	ldi	r24, 0x02	; 2
     4b2:	08 95       	ret
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	08 95       	ret
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	08 95       	ret
     4bc:	83 e0       	ldi	r24, 0x03	; 3
     4be:	08 95       	ret

000004c0 <I2C_Stop>:
     4c0:	84 e9       	ldi	r24, 0x94	; 148
     4c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     4c6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     4ca:	84 fd       	sbrc	r24, 4
     4cc:	fc cf       	rjmp	.-8      	; 0x4c6 <I2C_Stop+0x6>
     4ce:	08 95       	ret

000004d0 <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
     4d0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     4d4:	84 e8       	ldi	r24, 0x84	; 132
     4d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     4da:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     4de:	88 23       	and	r24, r24
     4e0:	e4 f7       	brge	.-8      	; 0x4da <I2C_Write+0xa>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     4e2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7fe0b9>
     4e6:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
     4e8:	88 32       	cpi	r24, 0x28	; 40
     4ea:	21 f0       	breq	.+8      	; 0x4f4 <I2C_Write+0x24>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
     4ec:	80 33       	cpi	r24, 0x30	; 48
     4ee:	21 f4       	brne	.+8      	; 0x4f8 <I2C_Write+0x28>
	return 1;												/* If yes then return 1 to indicate nack received */
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
     4f8:	82 e0       	ldi	r24, 0x02	; 2
}
     4fa:	08 95       	ret

000004fc <I2C_Read_Ack>:

char I2C_Read_Ack()											/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     4fc:	84 ec       	ldi	r24, 0xC4	; 196
     4fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     502:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     506:	88 23       	and	r24, r24
     508:	e4 f7       	brge	.-8      	; 0x502 <__stack+0x3>
	return TWDR;											/* Return received data */
     50a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
}	
     50e:	08 95       	ret

00000510 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     510:	84 e8       	ldi	r24, 0x84	; 132
     512:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     516:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fe0bc>
     51a:	88 23       	and	r24, r24
     51c:	e4 f7       	brge	.-8      	; 0x516 <I2C_Read_Nack+0x6>
	return TWDR;											/* Return received data */
     51e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fe0bb>
}	
     522:	08 95       	ret

00000524 <lcdcommand>:
 */ 
#include "LCD16x2_4bit.h"

void lcdcommand(unsigned char cmnd)
{
	LCD_DPRT = (LCD_DPRT & 0x0f)|(cmnd & 0xf0);		/* SEND COMMAND TO DATA PORT */
     524:	9b b1       	in	r25, 0x0b	; 11
     526:	9f 70       	andi	r25, 0x0F	; 15
     528:	28 2f       	mov	r18, r24
     52a:	20 7f       	andi	r18, 0xF0	; 240
     52c:	92 2b       	or	r25, r18
     52e:	9b b9       	out	0x0b, r25	; 11
	LCD_DPRT &= ~ (1<<LCD_RS);						/* RS = 0 FOR COMMAND */
     530:	9b b1       	in	r25, 0x0b	; 11
     532:	9e 7f       	andi	r25, 0xFE	; 254
     534:	9b b9       	out	0x0b, r25	; 11
	LCD_DPRT |= (1<<LCD_EN);						/* EN = 1 FOR H TO L PULSE */
     536:	9b b1       	in	r25, 0x0b	; 11
     538:	92 60       	ori	r25, 0x02	; 2
     53a:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     53c:	00 00       	nop
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
     53e:	9b b1       	in	r25, 0x0b	; 11
     540:	9d 7f       	andi	r25, 0xFD	; 253
     542:	9b b9       	out	0x0b, r25	; 11
     544:	31 e2       	ldi	r19, 0x21	; 33
     546:	3a 95       	dec	r19
     548:	f1 f7       	brne	.-4      	; 0x546 <lcdcommand+0x22>
     54a:	00 00       	nop
	_delay_us(100);									/* WAIT FOR MAKE ENABLE WIDE */
	
	LCD_DPRT = (LCD_DPRT & 0x0f)|(cmnd << 4);		/* SEND COMMAND TO DATA PORT */
     54c:	2b b1       	in	r18, 0x0b	; 11
     54e:	30 e1       	ldi	r19, 0x10	; 16
     550:	83 9f       	mul	r24, r19
     552:	c0 01       	movw	r24, r0
     554:	11 24       	eor	r1, r1
     556:	92 2f       	mov	r25, r18
     558:	9f 70       	andi	r25, 0x0F	; 15
     55a:	89 2b       	or	r24, r25
     55c:	8b b9       	out	0x0b, r24	; 11
	LCD_DPRT |= (1<<LCD_EN);						/* EN = 1 FOR H TO L PULSE */
     55e:	8b b1       	in	r24, 0x0b	; 11
     560:	82 60       	ori	r24, 0x02	; 2
     562:	8b b9       	out	0x0b, r24	; 11
     564:	00 00       	nop
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
     566:	8b b1       	in	r24, 0x0b	; 11
     568:	8d 7f       	andi	r24, 0xFD	; 253
     56a:	8b b9       	out	0x0b, r24	; 11
     56c:	83 ef       	ldi	r24, 0xF3	; 243
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	01 97       	sbiw	r24, 0x01	; 1
     572:	f1 f7       	brne	.-4      	; 0x570 <lcdcommand+0x4c>
     574:	00 c0       	rjmp	.+0      	; 0x576 <lcdcommand+0x52>
     576:	00 00       	nop
     578:	08 95       	ret

0000057a <lcddata>:
	_delay_us(2000);								/* WAIT FOR MAKE ENABLE WIDE */
}

void lcddata(unsigned char data)
{
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data & 0xf0);		/* SEND DATA TO DATA PORT */
     57a:	9b b1       	in	r25, 0x0b	; 11
     57c:	9f 70       	andi	r25, 0x0F	; 15
     57e:	28 2f       	mov	r18, r24
     580:	20 7f       	andi	r18, 0xF0	; 240
     582:	92 2b       	or	r25, r18
     584:	9b b9       	out	0x0b, r25	; 11
	LCD_DPRT |= (1<<LCD_RS);						/* MAKE RS = 1 FOR DATA */
     586:	9b b1       	in	r25, 0x0b	; 11
     588:	91 60       	ori	r25, 0x01	; 1
     58a:	9b b9       	out	0x0b, r25	; 11
	LCD_DPRT |= (1<<LCD_EN);						/* EN=0 FOR H TO L PULSE */
     58c:	9b b1       	in	r25, 0x0b	; 11
     58e:	92 60       	ori	r25, 0x02	; 2
     590:	9b b9       	out	0x0b, r25	; 11
     592:	00 00       	nop
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
     594:	9b b1       	in	r25, 0x0b	; 11
     596:	9d 7f       	andi	r25, 0xFD	; 253
     598:	9b b9       	out	0x0b, r25	; 11
     59a:	31 e2       	ldi	r19, 0x21	; 33
     59c:	3a 95       	dec	r19
     59e:	f1 f7       	brne	.-4      	; 0x59c <lcddata+0x22>
     5a0:	00 00       	nop
	_delay_us(100);									/* WAIT FOR MAKE ENABLE WIDE */
	
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data << 4);		/*  */
     5a2:	2b b1       	in	r18, 0x0b	; 11
     5a4:	30 e1       	ldi	r19, 0x10	; 16
     5a6:	83 9f       	mul	r24, r19
     5a8:	c0 01       	movw	r24, r0
     5aa:	11 24       	eor	r1, r1
     5ac:	92 2f       	mov	r25, r18
     5ae:	9f 70       	andi	r25, 0x0F	; 15
     5b0:	89 2b       	or	r24, r25
     5b2:	8b b9       	out	0x0b, r24	; 11
	LCD_DPRT |= (1<<LCD_EN);						/* EN=0 FOR H TO L PULSE*/
     5b4:	8b b1       	in	r24, 0x0b	; 11
     5b6:	82 60       	ori	r24, 0x02	; 2
     5b8:	8b b9       	out	0x0b, r24	; 11
     5ba:	00 00       	nop
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE*/
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE*/
     5bc:	8b b1       	in	r24, 0x0b	; 11
     5be:	8d 7f       	andi	r24, 0xFD	; 253
     5c0:	8b b9       	out	0x0b, r24	; 11
     5c2:	83 ef       	ldi	r24, 0xF3	; 243
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	01 97       	sbiw	r24, 0x01	; 1
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <lcddata+0x4c>
     5ca:	00 c0       	rjmp	.+0      	; 0x5cc <lcddata+0x52>
     5cc:	00 00       	nop
     5ce:	08 95       	ret

000005d0 <lcdinit>:
	_delay_us(2000);								/* WAIT FOR MAKE ENABLE WIDE*/
}

void lcdinit()
{
	LCD_DDDR = 0xFF;
     5d0:	8f ef       	ldi	r24, 0xFF	; 255
     5d2:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5d4:	8f e4       	ldi	r24, 0x4F	; 79
     5d6:	93 ec       	ldi	r25, 0xC3	; 195
     5d8:	01 97       	sbiw	r24, 0x01	; 1
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <lcdinit+0x8>
     5dc:	00 c0       	rjmp	.+0      	; 0x5de <lcdinit+0xe>
     5de:	00 00       	nop
	_delay_ms(200);									/* WAIT FOR SOME TIME */
	lcdcommand(0x33);
     5e0:	83 e3       	ldi	r24, 0x33	; 51
     5e2:	a0 df       	rcall	.-192    	; 0x524 <lcdcommand>
	lcdcommand(0x32);								/* SEND $32 FOR INIT OT 0X02 */
     5e4:	82 e3       	ldi	r24, 0x32	; 50
     5e6:	9e df       	rcall	.-196    	; 0x524 <lcdcommand>
	lcdcommand(0x28);								/* INIT. LCD 2 LINE, 5 X 7 MATRIX */
     5e8:	88 e2       	ldi	r24, 0x28	; 40
     5ea:	9c df       	rcall	.-200    	; 0x524 <lcdcommand>
	lcdcommand(0x0C);								/* DISPLAY ON CURSOR ON */
     5ec:	8c e0       	ldi	r24, 0x0C	; 12
     5ee:	9a df       	rcall	.-204    	; 0x524 <lcdcommand>
	lcdcommand(0x01);								/* LCD CLEAR */
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	98 df       	rcall	.-208    	; 0x524 <lcdcommand>
	lcdcommand(0x82);								/* SHIFT CURSOR TO WRITE */
     5f4:	82 e8       	ldi	r24, 0x82	; 130
     5f6:	96 df       	rcall	.-212    	; 0x524 <lcdcommand>
     5f8:	08 95       	ret

000005fa <lcd_print>:
}
void lcd_print(char *str)
{
     5fa:	0f 93       	push	r16
     5fc:	1f 93       	push	r17
     5fe:	cf 93       	push	r28
     600:	8c 01       	movw	r16, r24
	unsigned char i=0;
     602:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[i] |= 0)
     604:	02 c0       	rjmp	.+4      	; 0x60a <lcd_print+0x10>
	{
		lcddata(str[i]);
     606:	b9 df       	rcall	.-142    	; 0x57a <lcddata>
		i++;
     608:	cf 5f       	subi	r28, 0xFF	; 255
	lcdcommand(0x82);								/* SHIFT CURSOR TO WRITE */
}
void lcd_print(char *str)
{
	unsigned char i=0;
	while (str[i] |= 0)
     60a:	f8 01       	movw	r30, r16
     60c:	ec 0f       	add	r30, r28
     60e:	f1 1d       	adc	r31, r1
     610:	80 81       	ld	r24, Z
     612:	81 11       	cpse	r24, r1
     614:	f8 cf       	rjmp	.-16     	; 0x606 <lcd_print+0xc>
	{
		lcddata(str[i]);
		i++;
	}
}
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	08 95       	ret

0000061e <lcd_print_xy>:


void lcd_print_xy(char row, char pos, char* str)
{
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
     624:	81 11       	cpse	r24, r1
     626:	07 c0       	rjmp	.+14     	; 0x636 <lcd_print_xy+0x18>
     628:	60 31       	cpi	r22, 0x10	; 16
     62a:	28 f4       	brcc	.+10     	; 0x636 <lcd_print_xy+0x18>
	lcdcommand((pos & 0x0F)|0x80);		/* Command of first row and required position<16 */
     62c:	86 2f       	mov	r24, r22
     62e:	8f 70       	andi	r24, 0x0F	; 15
     630:	80 68       	ori	r24, 0x80	; 128
     632:	78 df       	rcall	.-272    	; 0x524 <lcdcommand>
     634:	08 c0       	rjmp	.+16     	; 0x646 <lcd_print_xy+0x28>
	else if (row == 1 && pos<16)
     636:	81 30       	cpi	r24, 0x01	; 1
     638:	31 f4       	brne	.+12     	; 0x646 <lcd_print_xy+0x28>
     63a:	60 31       	cpi	r22, 0x10	; 16
     63c:	20 f4       	brcc	.+8      	; 0x646 <lcd_print_xy+0x28>
	lcdcommand((pos & 0x0F)|0xC0);		/* Command of first row and required position<16 */
     63e:	86 2f       	mov	r24, r22
     640:	8f 70       	andi	r24, 0x0F	; 15
     642:	80 6c       	ori	r24, 0xC0	; 192
     644:	6f df       	rcall	.-290    	; 0x524 <lcdcommand>
	lcd_print(str);					/* Call LCD string function */
     646:	ce 01       	movw	r24, r28
     648:	d8 df       	rcall	.-80     	; 0x5fa <lcd_print>
}
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	08 95       	ret

00000650 <lcd_clear>:

void lcd_clear()
{
	lcdcommand(0x01);
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	68 df       	rcall	.-304    	; 0x524 <lcdcommand>
     654:	83 ef       	ldi	r24, 0xF3	; 243
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	01 97       	sbiw	r24, 0x01	; 1
     65a:	f1 f7       	brne	.-4      	; 0x658 <lcd_clear+0x8>
     65c:	00 c0       	rjmp	.+0      	; 0x65e <lcd_clear+0xe>
     65e:	00 00       	nop
     660:	08 95       	ret

00000662 <setBacklit>:
	_delay_ms(2);
}

void setBacklit(bool shine) {
	if (shine)
     662:	88 23       	and	r24, r24
     664:	21 f0       	breq	.+8      	; 0x66e <setBacklit+0xc>
		LCD_DPRT |= (0b00000001<<LCD_A);
     666:	8b b1       	in	r24, 0x0b	; 11
     668:	84 60       	ori	r24, 0x04	; 4
     66a:	8b b9       	out	0x0b, r24	; 11
     66c:	08 95       	ret
	else
		LCD_DPRT &= ~(0b00000001<<LCD_A);
     66e:	8b b1       	in	r24, 0x0b	; 11
     670:	8b 7f       	andi	r24, 0xFB	; 251
     672:	8b b9       	out	0x0b, r24	; 11
     674:	08 95       	ret

00000676 <updateDisplayText>:
	if ((PINB&0b00000001) == 0b00000001) { //zacni zasunovat
		startMotorAntiClockwise();
	}
	
	if ((PINB&0b00000010) == 0b00000010) { //zacni vysunovat
		startMotorClockwise();
     676:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <is_display_on>
     67a:	88 23       	and	r24, r24
     67c:	51 f0       	breq	.+20     	; 0x692 <updateDisplayText+0x1c>
     67e:	4a ea       	ldi	r20, 0xAA	; 170
     680:	51 e0       	ldi	r21, 0x01	; 1
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	cb df       	rcall	.-106    	; 0x61e <lcd_print_xy>
     688:	48 e9       	ldi	r20, 0x98	; 152
     68a:	51 e0       	ldi	r21, 0x01	; 1
     68c:	60 e0       	ldi	r22, 0x00	; 0
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	c6 df       	rcall	.-116    	; 0x61e <lcd_print_xy>
     692:	08 95       	ret

00000694 <startDoorOpening>:
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <door_is_opening>
     69a:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <motor_direction>
     69e:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <motor_timer+0x1>
     6a2:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <motor_timer>
     6a6:	08 95       	ret

000006a8 <firstlySwitched>:
     6a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6b0:	0b 97       	sbiw	r24, 0x0b	; 11
     6b2:	54 f4       	brge	.+20     	; 0x6c8 <firstlySwitched+0x20>
     6b4:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     6b8:	8f 5f       	subi	r24, 0xFF	; 255
     6ba:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
     6be:	84 30       	cpi	r24, 0x04	; 4
     6c0:	19 f4       	brne	.+6      	; 0x6c8 <firstlySwitched+0x20>
     6c2:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
     6c6:	e6 df       	rcall	.-52     	; 0x694 <startDoorOpening>
     6c8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6cc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     6d0:	08 95       	ret

000006d2 <leverHandler>:
     6d2:	1a 9b       	sbis	0x03, 2	; 3
     6d4:	0b c0       	rjmp	.+22     	; 0x6ec <leverHandler+0x1a>
     6d6:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <is_display_on>
     6da:	81 11       	cpse	r24, r1
     6dc:	01 c0       	rjmp	.+2      	; 0x6e0 <leverHandler+0xe>
     6de:	e4 df       	rcall	.-56     	; 0x6a8 <firstlySwitched>
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	bf df       	rcall	.-130    	; 0x662 <setBacklit>
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <is_display_on>
     6ea:	07 c0       	rjmp	.+14     	; 0x6fa <leverHandler+0x28>
     6ec:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <is_display_on>
     6f0:	81 11       	cpse	r24, r1
     6f2:	da df       	rcall	.-76     	; 0x6a8 <firstlySwitched>
     6f4:	ad df       	rcall	.-166    	; 0x650 <lcd_clear>
     6f6:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <is_display_on>
     6fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     702:	8a 30       	cpi	r24, 0x0A	; 10
     704:	91 05       	cpc	r25, r1
     706:	14 f0       	brlt	.+4      	; 0x70c <leverHandler+0x3a>
     708:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
     70c:	8a 30       	cpi	r24, 0x0A	; 10
     70e:	91 05       	cpc	r25, r1
     710:	4c f4       	brge	.+18     	; 0x724 <leverHandler+0x52>
     712:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <__data_end>
     716:	22 23       	and	r18, r18
     718:	29 f0       	breq	.+10     	; 0x724 <leverHandler+0x52>
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     720:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     724:	08 95       	ret

00000726 <startMotorClockwise>:
     726:	88 b1       	in	r24, 0x08	; 8
     728:	81 60       	ori	r24, 0x01	; 1
     72a:	88 b9       	out	0x08, r24	; 8
     72c:	88 b1       	in	r24, 0x08	; 8
     72e:	8d 7f       	andi	r24, 0xFD	; 253
     730:	88 b9       	out	0x08, r24	; 8
     732:	08 95       	ret

00000734 <startMotorAntiClockwise>:
     734:	88 b1       	in	r24, 0x08	; 8
     736:	82 60       	ori	r24, 0x02	; 2
     738:	88 b9       	out	0x08, r24	; 8
     73a:	88 b1       	in	r24, 0x08	; 8
     73c:	8e 7f       	andi	r24, 0xFE	; 254
     73e:	88 b9       	out	0x08, r24	; 8
     740:	08 95       	ret

00000742 <stopMotor>:
     742:	88 b1       	in	r24, 0x08	; 8
     744:	8c 7f       	andi	r24, 0xFC	; 252
     746:	88 b9       	out	0x08, r24	; 8
     748:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
     74c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     750:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     754:	08 95       	ret

00000756 <doorOpeningManager>:
     756:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <door_is_opening>
     75a:	88 23       	and	r24, r24
     75c:	09 f1       	breq	.+66     	; 0x7a0 <doorOpeningManager+0x4a>
     75e:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <motor_direction>
     762:	81 11       	cpse	r24, r1
     764:	02 c0       	rjmp	.+4      	; 0x76a <doorOpeningManager+0x14>
     766:	df df       	rcall	.-66     	; 0x726 <startMotorClockwise>
     768:	03 c0       	rjmp	.+6      	; 0x770 <doorOpeningManager+0x1a>
     76a:	81 30       	cpi	r24, 0x01	; 1
     76c:	09 f4       	brne	.+2      	; 0x770 <doorOpeningManager+0x1a>
     76e:	e2 df       	rcall	.-60     	; 0x734 <startMotorAntiClockwise>
     770:	18 9b       	sbis	0x03, 0	; 3
     772:	03 c0       	rjmp	.+6      	; 0x77a <doorOpeningManager+0x24>
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <motor_direction>
     77a:	19 9b       	sbis	0x03, 1	; 3
     77c:	07 c0       	rjmp	.+14     	; 0x78c <doorOpeningManager+0x36>
     77e:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <motor_direction>
     782:	81 30       	cpi	r24, 0x01	; 1
     784:	19 f4       	brne	.+6      	; 0x78c <doorOpeningManager+0x36>
     786:	dd df       	rcall	.-70     	; 0x742 <stopMotor>
     788:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <door_is_opening>
     78c:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <motor_timer>
     790:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <motor_timer+0x1>
     794:	01 96       	adiw	r24, 0x01	; 1
     796:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <motor_timer+0x1>
     79a:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <motor_timer>
     79e:	08 95       	ret
     7a0:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <motor_timer>
     7a4:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <motor_timer+0x1>
     7a8:	88 3e       	cpi	r24, 0xE8	; 232
     7aa:	93 40       	sbci	r25, 0x03	; 3
     7ac:	18 f0       	brcs	.+6      	; 0x7b4 <doorOpeningManager+0x5e>
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <hardware_error>
     7b4:	08 95       	ret

000007b6 <set8SecondsDeepSleep>:
	}
}

void set8SecondsDeepSleep() {	
	DDRC=0x0;
     7b6:	17 b8       	out	0x07, r1	; 7
	DDRD=0x0;
     7b8:	1a b8       	out	0x0a, r1	; 10
	
	PORTC &= 0b11110111;
     7ba:	88 b1       	in	r24, 0x08	; 8
     7bc:	87 7f       	andi	r24, 0xF7	; 247
     7be:	88 b9       	out	0x08, r24	; 8
	setBacklit(false);
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	4f df       	rcall	.-354    	; 0x662 <setBacklit>
	lcd_clear();
     7c4:	45 df       	rcall	.-374    	; 0x650 <lcd_clear>
	
	wdt_reset();
     7c6:	a8 95       	wdr
	sleep_mode(); // sleep now!
     7c8:	83 b7       	in	r24, 0x33	; 51
     7ca:	81 60       	ori	r24, 0x01	; 1
     7cc:	83 bf       	out	0x33, r24	; 51
     7ce:	88 95       	sleep
     7d0:	83 b7       	in	r24, 0x33	; 51
     7d2:	8e 7f       	andi	r24, 0xFE	; 254
     7d4:	83 bf       	out	0x33, r24	; 51
	
	DDRC=0xff;
     7d6:	8f ef       	ldi	r24, 0xFF	; 255
     7d8:	87 b9       	out	0x07, r24	; 7
	DDRD=0xff;
     7da:	8a b9       	out	0x0a, r24	; 10
	PORTC |= 0b00001000;
     7dc:	88 b1       	in	r24, 0x08	; 8
     7de:	88 60       	ori	r24, 0x08	; 8
     7e0:	88 b9       	out	0x08, r24	; 8
	
	lever_counter = 0;
     7e2:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
	lever_timer = 0;
     7e6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     7ea:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	after_8sleep = true;
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <after_8sleep>
     7f4:	08 95       	ret

000007f6 <watchdogSetup>:
}

void watchdogSetup() {
	cli();
     7f6:	f8 94       	cli
	wdt_reset();
     7f8:	a8 95       	wdr
	WDTCSR |= (1<<WDCE) | (1<<WDE);
     7fa:	e0 e6       	ldi	r30, 0x60	; 96
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	80 81       	ld	r24, Z
     800:	88 61       	ori	r24, 0x18	; 24
     802:	80 83       	st	Z, r24
	WDTCSR = (1<<WDIE) | (0<<WDE) | (1<<WDP3) | (1<<WDP0);  // 8s / interrupt, no system reset (8s is max watchdog oscillation)
     804:	81 e6       	ldi	r24, 0x61	; 97
     806:	80 83       	st	Z, r24
	sei();
     808:	78 94       	sei
     80a:	08 95       	ret

0000080c <mainInit>:
	}
	
}

void mainInit() {
	DDRC = 0xff;
     80c:	8f ef       	ldi	r24, 0xFF	; 255
     80e:	87 b9       	out	0x07, r24	; 7
	DDRB = 0x00;
     810:	14 b8       	out	0x04, r1	; 4
	
	PORTC |= 0b00001000;
     812:	88 b1       	in	r24, 0x08	; 8
     814:	88 60       	ori	r24, 0x08	; 8
     816:	88 b9       	out	0x08, r24	; 8
	
	clockInit();
     818:	7c dd       	rcall	.-1288   	; 0x312 <clockInit>
	lcdinit();
     81a:	da de       	rcall	.-588    	; 0x5d0 <lcdinit>
	initMonthsSunRises();
     81c:	22 dd       	rcall	.-1468   	; 0x262 <initMonthsSunRises>
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     81e:	83 b7       	in	r24, 0x33	; 51
     820:	81 7f       	andi	r24, 0xF1	; 241
     822:	84 60       	ori	r24, 0x04	; 4
     824:	83 bf       	out	0x33, r24	; 51
	watchdogSetup();
     826:	e7 df       	rcall	.-50     	; 0x7f6 <watchdogSetup>
     828:	08 95       	ret

0000082a <main>:

//when some mechanical part stops working (v podstate jen kontroluju jestli motor nebezi moc dlouho)
bool hardware_error;

int main() {
	mainInit();
     82a:	f0 df       	rcall	.-32     	; 0x80c <mainInit>
	setClockAndCalendar(0x20, 0x51, 0x00, 0x05, 0x20, 0x05, 0x21);
     82c:	0f 2e       	mov	r0, r31
     82e:	f1 e2       	ldi	r31, 0x21	; 33
     830:	cf 2e       	mov	r12, r31
     832:	f0 2d       	mov	r31, r0
     834:	0f 2e       	mov	r0, r31
     836:	f5 e0       	ldi	r31, 0x05	; 5
     838:	ef 2e       	mov	r14, r31
     83a:	f0 2d       	mov	r31, r0
     83c:	00 e2       	ldi	r16, 0x20	; 32
     83e:	25 e0       	ldi	r18, 0x05	; 5
     840:	40 e0       	ldi	r20, 0x00	; 0
     842:	61 e5       	ldi	r22, 0x51	; 81
     844:	80 e2       	ldi	r24, 0x20	; 32
     846:	dd dd       	rcall	.-1094   	; 0x402 <setClockAndCalendar>
	
	setNextAlarm(1);
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	9f dc       	rcall	.-1730   	; 0x18a <setNextAlarm>
	
	setBacklit(true);
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	09 df       	rcall	.-494    	; 0x662 <setBacklit>
	
	while(1) {
		if (hardware_error) {
     850:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <hardware_error>
     854:	88 23       	and	r24, r24
     856:	b1 f0       	breq	.+44     	; 0x884 <main+0x5a>
			stopMotor();
     858:	74 df       	rcall	.-280    	; 0x742 <stopMotor>
			
			sprintf(clock_date_buffer, "hardware error");
     85a:	8a ea       	ldi	r24, 0xAA	; 170
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	2f e0       	ldi	r18, 0x0F	; 15
     860:	e2 e0       	ldi	r30, 0x02	; 2
     862:	f1 e0       	ldi	r31, 0x01	; 1
     864:	dc 01       	movw	r26, r24
     866:	01 90       	ld	r0, Z+
     868:	0d 92       	st	X+, r0
     86a:	2a 95       	dec	r18
     86c:	e1 f7       	brne	.-8      	; 0x866 <main+0x3c>
			sprintf(clock_date_buffer, '\0');
     86e:	1f 92       	push	r1
     870:	1f 92       	push	r1
     872:	9f 93       	push	r25
     874:	8f 93       	push	r24
     876:	3c d2       	rcall	.+1144   	; 0xcf0 <sprintf>
			updateDisplayText();
     878:	fe de       	rcall	.-516    	; 0x676 <updateDisplayText>
     87a:	0f 90       	pop	r0
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	0f 90       	pop	r0
     882:	74 c0       	rjmp	.+232    	; 0x96c <main+0x142>
		} else {
			leverHandler();
     884:	26 df       	rcall	.-436    	; 0x6d2 <leverHandler>
			
			if (!door_is_opening) {
     886:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <door_is_opening>
     88a:	81 11       	cpse	r24, r1
     88c:	6e c0       	rjmp	.+220    	; 0x96a <main+0x140>
				if (!is_display_on && lever_counter == 0) {
     88e:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <is_display_on>
     892:	81 11       	cpse	r24, r1
     894:	06 c0       	rjmp	.+12     	; 0x8a2 <main+0x78>
     896:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     89a:	81 11       	cpse	r24, r1
     89c:	02 c0       	rjmp	.+4      	; 0x8a2 <main+0x78>
					set8SecondsDeepSleep();
     89e:	8b df       	rcall	.-234    	; 0x7b6 <set8SecondsDeepSleep>
					continue;
     8a0:	d7 cf       	rjmp	.-82     	; 0x850 <main+0x26>
				}
				
				if (after_8sleep) {
     8a2:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <after_8sleep>
     8a6:	88 23       	and	r24, r24
     8a8:	19 f0       	breq	.+6      	; 0x8b0 <main+0x86>
					lcdinit();
     8aa:	92 de       	rcall	.-732    	; 0x5d0 <lcdinit>
					after_8sleep = false;	
     8ac:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <after_8sleep>
				}
				
				readClock();
     8b0:	4f dd       	rcall	.-1378   	; 0x350 <readClock>
				readCalendar();
     8b2:	74 dd       	rcall	.-1304   	; 0x39c <readCalendar>
			
				int last_num_of_year = _year - ((_year/16)*16); //vybere z roku posledni cislo (0x21 => 0x01)
     8b4:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <_year>
     8b8:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <_year+0x1>
     8bc:	8f 70       	andi	r24, 0x0F	; 15
     8be:	90 78       	andi	r25, 0x80	; 128
     8c0:	99 23       	and	r25, r25
     8c2:	24 f4       	brge	.+8      	; 0x8cc <main+0xa2>
     8c4:	01 97       	sbiw	r24, 0x01	; 1
     8c6:	80 6f       	ori	r24, 0xF0	; 240
     8c8:	9f 6f       	ori	r25, 0xFF	; 255
     8ca:	01 96       	adiw	r24, 0x01	; 1
				
				sprintf(clock_date_buffer, "%02x:%02x:%02x %02x/%02x/%01x", _hour, _minute, _second, _date, _month, last_num_of_year);
     8cc:	9f 93       	push	r25
     8ce:	8f 93       	push	r24
     8d0:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <_month+0x1>
     8d4:	8f 93       	push	r24
     8d6:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <_month>
     8da:	8f 93       	push	r24
     8dc:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <_date+0x1>
     8e0:	8f 93       	push	r24
     8e2:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <_date>
     8e6:	8f 93       	push	r24
     8e8:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <_second+0x1>
     8ec:	8f 93       	push	r24
     8ee:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <_second>
     8f2:	8f 93       	push	r24
     8f4:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <_minute+0x1>
     8f8:	8f 93       	push	r24
     8fa:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <_minute>
     8fe:	8f 93       	push	r24
     900:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <_hour+0x1>
     904:	8f 93       	push	r24
     906:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <_hour>
     90a:	8f 93       	push	r24
     90c:	81 e1       	ldi	r24, 0x11	; 17
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	9f 93       	push	r25
     912:	8f 93       	push	r24
     914:	8a ea       	ldi	r24, 0xAA	; 170
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	9f 93       	push	r25
     91a:	8f 93       	push	r24
     91c:	e9 d1       	rcall	.+978    	; 0xcf0 <sprintf>
				sprintf(alarm_clock_buffer, "budicek v: %02x:%02x", next_hour, next_minute);
     91e:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <next_minute+0x1>
     922:	8f 93       	push	r24
     924:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <next_minute>
     928:	8f 93       	push	r24
     92a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <next_hour+0x1>
     92e:	8f 93       	push	r24
     930:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <next_hour>
     934:	8f 93       	push	r24
     936:	8f e2       	ldi	r24, 0x2F	; 47
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	9f 93       	push	r25
     93c:	8f 93       	push	r24
     93e:	88 e9       	ldi	r24, 0x98	; 152
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	9f 93       	push	r25
     944:	8f 93       	push	r24
     946:	d4 d1       	rcall	.+936    	; 0xcf0 <sprintf>
			
				updateDisplayText();
     948:	96 de       	rcall	.-724    	; 0x676 <updateDisplayText>
			
				if (checkAlarm()) {
     94a:	90 db       	rcall	.-2272   	; 0x6c <checkAlarm>
     94c:	2d b7       	in	r18, 0x3d	; 61
     94e:	3e b7       	in	r19, 0x3e	; 62
     950:	28 5e       	subi	r18, 0xE8	; 232
     952:	3f 4f       	sbci	r19, 0xFF	; 255
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	3e bf       	out	0x3e, r19	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	2d bf       	out	0x3d, r18	; 61
     95e:	88 23       	and	r24, r24
     960:	29 f0       	breq	.+10     	; 0x96c <main+0x142>
					startDoorOpening();
     962:	98 de       	rcall	.-720    	; 0x694 <startDoorOpening>
					
					setNextAlarm(1);
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	11 dc       	rcall	.-2014   	; 0x18a <setNextAlarm>
     968:	01 c0       	rjmp	.+2      	; 0x96c <main+0x142>
				}
			} else {
				doorOpeningManager();
     96a:	f5 de       	rcall	.-534    	; 0x756 <doorOpeningManager>
     96c:	89 ef       	ldi	r24, 0xF9	; 249
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	01 97       	sbiw	r24, 0x01	; 1
     972:	f1 f7       	brne	.-4      	; 0x970 <main+0x146>
     974:	00 c0       	rjmp	.+0      	; 0x976 <main+0x14c>
     976:	00 00       	nop
     978:	6b cf       	rjmp	.-298    	; 0x850 <main+0x26>

0000097a <__vector_6>:
	WDTCSR |= (1<<WDCE) | (1<<WDE);
	WDTCSR = (1<<WDIE) | (0<<WDE) | (1<<WDP3) | (1<<WDP0);  // 8s / interrupt, no system reset (8s is max watchdog oscillation)
	sei();
}

ISR(WDT_vect) { 
     97a:	1f 92       	push	r1
     97c:	0f 92       	push	r0
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	0f 92       	push	r0
     982:	11 24       	eor	r1, r1
	
}
     984:	0f 90       	pop	r0
     986:	0f be       	out	0x3f, r0	; 63
     988:	0f 90       	pop	r0
     98a:	1f 90       	pop	r1
     98c:	18 95       	reti

0000098e <__divsf3>:
     98e:	0c d0       	rcall	.+24     	; 0x9a8 <__divsf3x>
     990:	eb c0       	rjmp	.+470    	; 0xb68 <__fp_round>
     992:	e3 d0       	rcall	.+454    	; 0xb5a <__fp_pscB>
     994:	40 f0       	brcs	.+16     	; 0x9a6 <__divsf3+0x18>
     996:	da d0       	rcall	.+436    	; 0xb4c <__fp_pscA>
     998:	30 f0       	brcs	.+12     	; 0x9a6 <__divsf3+0x18>
     99a:	21 f4       	brne	.+8      	; 0x9a4 <__divsf3+0x16>
     99c:	5f 3f       	cpi	r21, 0xFF	; 255
     99e:	19 f0       	breq	.+6      	; 0x9a6 <__divsf3+0x18>
     9a0:	cc c0       	rjmp	.+408    	; 0xb3a <__fp_inf>
     9a2:	51 11       	cpse	r21, r1
     9a4:	15 c1       	rjmp	.+554    	; 0xbd0 <__fp_szero>
     9a6:	cf c0       	rjmp	.+414    	; 0xb46 <__fp_nan>

000009a8 <__divsf3x>:
     9a8:	f0 d0       	rcall	.+480    	; 0xb8a <__fp_split3>
     9aa:	98 f3       	brcs	.-26     	; 0x992 <__divsf3+0x4>

000009ac <__divsf3_pse>:
     9ac:	99 23       	and	r25, r25
     9ae:	c9 f3       	breq	.-14     	; 0x9a2 <__divsf3+0x14>
     9b0:	55 23       	and	r21, r21
     9b2:	b1 f3       	breq	.-20     	; 0x9a0 <__divsf3+0x12>
     9b4:	95 1b       	sub	r25, r21
     9b6:	55 0b       	sbc	r21, r21
     9b8:	bb 27       	eor	r27, r27
     9ba:	aa 27       	eor	r26, r26
     9bc:	62 17       	cp	r22, r18
     9be:	73 07       	cpc	r23, r19
     9c0:	84 07       	cpc	r24, r20
     9c2:	38 f0       	brcs	.+14     	; 0x9d2 <__divsf3_pse+0x26>
     9c4:	9f 5f       	subi	r25, 0xFF	; 255
     9c6:	5f 4f       	sbci	r21, 0xFF	; 255
     9c8:	22 0f       	add	r18, r18
     9ca:	33 1f       	adc	r19, r19
     9cc:	44 1f       	adc	r20, r20
     9ce:	aa 1f       	adc	r26, r26
     9d0:	a9 f3       	breq	.-22     	; 0x9bc <__divsf3_pse+0x10>
     9d2:	33 d0       	rcall	.+102    	; 0xa3a <__divsf3_pse+0x8e>
     9d4:	0e 2e       	mov	r0, r30
     9d6:	3a f0       	brmi	.+14     	; 0x9e6 <__divsf3_pse+0x3a>
     9d8:	e0 e8       	ldi	r30, 0x80	; 128
     9da:	30 d0       	rcall	.+96     	; 0xa3c <__divsf3_pse+0x90>
     9dc:	91 50       	subi	r25, 0x01	; 1
     9de:	50 40       	sbci	r21, 0x00	; 0
     9e0:	e6 95       	lsr	r30
     9e2:	00 1c       	adc	r0, r0
     9e4:	ca f7       	brpl	.-14     	; 0x9d8 <__divsf3_pse+0x2c>
     9e6:	29 d0       	rcall	.+82     	; 0xa3a <__divsf3_pse+0x8e>
     9e8:	fe 2f       	mov	r31, r30
     9ea:	27 d0       	rcall	.+78     	; 0xa3a <__divsf3_pse+0x8e>
     9ec:	66 0f       	add	r22, r22
     9ee:	77 1f       	adc	r23, r23
     9f0:	88 1f       	adc	r24, r24
     9f2:	bb 1f       	adc	r27, r27
     9f4:	26 17       	cp	r18, r22
     9f6:	37 07       	cpc	r19, r23
     9f8:	48 07       	cpc	r20, r24
     9fa:	ab 07       	cpc	r26, r27
     9fc:	b0 e8       	ldi	r27, 0x80	; 128
     9fe:	09 f0       	breq	.+2      	; 0xa02 <__divsf3_pse+0x56>
     a00:	bb 0b       	sbc	r27, r27
     a02:	80 2d       	mov	r24, r0
     a04:	bf 01       	movw	r22, r30
     a06:	ff 27       	eor	r31, r31
     a08:	93 58       	subi	r25, 0x83	; 131
     a0a:	5f 4f       	sbci	r21, 0xFF	; 255
     a0c:	2a f0       	brmi	.+10     	; 0xa18 <__divsf3_pse+0x6c>
     a0e:	9e 3f       	cpi	r25, 0xFE	; 254
     a10:	51 05       	cpc	r21, r1
     a12:	68 f0       	brcs	.+26     	; 0xa2e <__divsf3_pse+0x82>
     a14:	92 c0       	rjmp	.+292    	; 0xb3a <__fp_inf>
     a16:	dc c0       	rjmp	.+440    	; 0xbd0 <__fp_szero>
     a18:	5f 3f       	cpi	r21, 0xFF	; 255
     a1a:	ec f3       	brlt	.-6      	; 0xa16 <__divsf3_pse+0x6a>
     a1c:	98 3e       	cpi	r25, 0xE8	; 232
     a1e:	dc f3       	brlt	.-10     	; 0xa16 <__divsf3_pse+0x6a>
     a20:	86 95       	lsr	r24
     a22:	77 95       	ror	r23
     a24:	67 95       	ror	r22
     a26:	b7 95       	ror	r27
     a28:	f7 95       	ror	r31
     a2a:	9f 5f       	subi	r25, 0xFF	; 255
     a2c:	c9 f7       	brne	.-14     	; 0xa20 <__divsf3_pse+0x74>
     a2e:	88 0f       	add	r24, r24
     a30:	91 1d       	adc	r25, r1
     a32:	96 95       	lsr	r25
     a34:	87 95       	ror	r24
     a36:	97 f9       	bld	r25, 7
     a38:	08 95       	ret
     a3a:	e1 e0       	ldi	r30, 0x01	; 1
     a3c:	66 0f       	add	r22, r22
     a3e:	77 1f       	adc	r23, r23
     a40:	88 1f       	adc	r24, r24
     a42:	bb 1f       	adc	r27, r27
     a44:	62 17       	cp	r22, r18
     a46:	73 07       	cpc	r23, r19
     a48:	84 07       	cpc	r24, r20
     a4a:	ba 07       	cpc	r27, r26
     a4c:	20 f0       	brcs	.+8      	; 0xa56 <__divsf3_pse+0xaa>
     a4e:	62 1b       	sub	r22, r18
     a50:	73 0b       	sbc	r23, r19
     a52:	84 0b       	sbc	r24, r20
     a54:	ba 0b       	sbc	r27, r26
     a56:	ee 1f       	adc	r30, r30
     a58:	88 f7       	brcc	.-30     	; 0xa3c <__divsf3_pse+0x90>
     a5a:	e0 95       	com	r30
     a5c:	08 95       	ret

00000a5e <__fixsfsi>:
     a5e:	04 d0       	rcall	.+8      	; 0xa68 <__fixunssfsi>
     a60:	68 94       	set
     a62:	b1 11       	cpse	r27, r1
     a64:	b5 c0       	rjmp	.+362    	; 0xbd0 <__fp_szero>
     a66:	08 95       	ret

00000a68 <__fixunssfsi>:
     a68:	98 d0       	rcall	.+304    	; 0xb9a <__fp_splitA>
     a6a:	88 f0       	brcs	.+34     	; 0xa8e <__fixunssfsi+0x26>
     a6c:	9f 57       	subi	r25, 0x7F	; 127
     a6e:	90 f0       	brcs	.+36     	; 0xa94 <__fixunssfsi+0x2c>
     a70:	b9 2f       	mov	r27, r25
     a72:	99 27       	eor	r25, r25
     a74:	b7 51       	subi	r27, 0x17	; 23
     a76:	a0 f0       	brcs	.+40     	; 0xaa0 <__fixunssfsi+0x38>
     a78:	d1 f0       	breq	.+52     	; 0xaae <__fixunssfsi+0x46>
     a7a:	66 0f       	add	r22, r22
     a7c:	77 1f       	adc	r23, r23
     a7e:	88 1f       	adc	r24, r24
     a80:	99 1f       	adc	r25, r25
     a82:	1a f0       	brmi	.+6      	; 0xa8a <__fixunssfsi+0x22>
     a84:	ba 95       	dec	r27
     a86:	c9 f7       	brne	.-14     	; 0xa7a <__fixunssfsi+0x12>
     a88:	12 c0       	rjmp	.+36     	; 0xaae <__fixunssfsi+0x46>
     a8a:	b1 30       	cpi	r27, 0x01	; 1
     a8c:	81 f0       	breq	.+32     	; 0xaae <__fixunssfsi+0x46>
     a8e:	9f d0       	rcall	.+318    	; 0xbce <__fp_zero>
     a90:	b1 e0       	ldi	r27, 0x01	; 1
     a92:	08 95       	ret
     a94:	9c c0       	rjmp	.+312    	; 0xbce <__fp_zero>
     a96:	67 2f       	mov	r22, r23
     a98:	78 2f       	mov	r23, r24
     a9a:	88 27       	eor	r24, r24
     a9c:	b8 5f       	subi	r27, 0xF8	; 248
     a9e:	39 f0       	breq	.+14     	; 0xaae <__fixunssfsi+0x46>
     aa0:	b9 3f       	cpi	r27, 0xF9	; 249
     aa2:	cc f3       	brlt	.-14     	; 0xa96 <__fixunssfsi+0x2e>
     aa4:	86 95       	lsr	r24
     aa6:	77 95       	ror	r23
     aa8:	67 95       	ror	r22
     aaa:	b3 95       	inc	r27
     aac:	d9 f7       	brne	.-10     	; 0xaa4 <__fixunssfsi+0x3c>
     aae:	3e f4       	brtc	.+14     	; 0xabe <__fixunssfsi+0x56>
     ab0:	90 95       	com	r25
     ab2:	80 95       	com	r24
     ab4:	70 95       	com	r23
     ab6:	61 95       	neg	r22
     ab8:	7f 4f       	sbci	r23, 0xFF	; 255
     aba:	8f 4f       	sbci	r24, 0xFF	; 255
     abc:	9f 4f       	sbci	r25, 0xFF	; 255
     abe:	08 95       	ret

00000ac0 <__floatunsisf>:
     ac0:	e8 94       	clt
     ac2:	09 c0       	rjmp	.+18     	; 0xad6 <__floatsisf+0x12>

00000ac4 <__floatsisf>:
     ac4:	97 fb       	bst	r25, 7
     ac6:	3e f4       	brtc	.+14     	; 0xad6 <__floatsisf+0x12>
     ac8:	90 95       	com	r25
     aca:	80 95       	com	r24
     acc:	70 95       	com	r23
     ace:	61 95       	neg	r22
     ad0:	7f 4f       	sbci	r23, 0xFF	; 255
     ad2:	8f 4f       	sbci	r24, 0xFF	; 255
     ad4:	9f 4f       	sbci	r25, 0xFF	; 255
     ad6:	99 23       	and	r25, r25
     ad8:	a9 f0       	breq	.+42     	; 0xb04 <__floatsisf+0x40>
     ada:	f9 2f       	mov	r31, r25
     adc:	96 e9       	ldi	r25, 0x96	; 150
     ade:	bb 27       	eor	r27, r27
     ae0:	93 95       	inc	r25
     ae2:	f6 95       	lsr	r31
     ae4:	87 95       	ror	r24
     ae6:	77 95       	ror	r23
     ae8:	67 95       	ror	r22
     aea:	b7 95       	ror	r27
     aec:	f1 11       	cpse	r31, r1
     aee:	f8 cf       	rjmp	.-16     	; 0xae0 <__floatsisf+0x1c>
     af0:	fa f4       	brpl	.+62     	; 0xb30 <__floatsisf+0x6c>
     af2:	bb 0f       	add	r27, r27
     af4:	11 f4       	brne	.+4      	; 0xafa <__floatsisf+0x36>
     af6:	60 ff       	sbrs	r22, 0
     af8:	1b c0       	rjmp	.+54     	; 0xb30 <__floatsisf+0x6c>
     afa:	6f 5f       	subi	r22, 0xFF	; 255
     afc:	7f 4f       	sbci	r23, 0xFF	; 255
     afe:	8f 4f       	sbci	r24, 0xFF	; 255
     b00:	9f 4f       	sbci	r25, 0xFF	; 255
     b02:	16 c0       	rjmp	.+44     	; 0xb30 <__floatsisf+0x6c>
     b04:	88 23       	and	r24, r24
     b06:	11 f0       	breq	.+4      	; 0xb0c <__floatsisf+0x48>
     b08:	96 e9       	ldi	r25, 0x96	; 150
     b0a:	11 c0       	rjmp	.+34     	; 0xb2e <__floatsisf+0x6a>
     b0c:	77 23       	and	r23, r23
     b0e:	21 f0       	breq	.+8      	; 0xb18 <__floatsisf+0x54>
     b10:	9e e8       	ldi	r25, 0x8E	; 142
     b12:	87 2f       	mov	r24, r23
     b14:	76 2f       	mov	r23, r22
     b16:	05 c0       	rjmp	.+10     	; 0xb22 <__floatsisf+0x5e>
     b18:	66 23       	and	r22, r22
     b1a:	71 f0       	breq	.+28     	; 0xb38 <__floatsisf+0x74>
     b1c:	96 e8       	ldi	r25, 0x86	; 134
     b1e:	86 2f       	mov	r24, r22
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	2a f0       	brmi	.+10     	; 0xb30 <__floatsisf+0x6c>
     b26:	9a 95       	dec	r25
     b28:	66 0f       	add	r22, r22
     b2a:	77 1f       	adc	r23, r23
     b2c:	88 1f       	adc	r24, r24
     b2e:	da f7       	brpl	.-10     	; 0xb26 <__floatsisf+0x62>
     b30:	88 0f       	add	r24, r24
     b32:	96 95       	lsr	r25
     b34:	87 95       	ror	r24
     b36:	97 f9       	bld	r25, 7
     b38:	08 95       	ret

00000b3a <__fp_inf>:
     b3a:	97 f9       	bld	r25, 7
     b3c:	9f 67       	ori	r25, 0x7F	; 127
     b3e:	80 e8       	ldi	r24, 0x80	; 128
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	60 e0       	ldi	r22, 0x00	; 0
     b44:	08 95       	ret

00000b46 <__fp_nan>:
     b46:	9f ef       	ldi	r25, 0xFF	; 255
     b48:	80 ec       	ldi	r24, 0xC0	; 192
     b4a:	08 95       	ret

00000b4c <__fp_pscA>:
     b4c:	00 24       	eor	r0, r0
     b4e:	0a 94       	dec	r0
     b50:	16 16       	cp	r1, r22
     b52:	17 06       	cpc	r1, r23
     b54:	18 06       	cpc	r1, r24
     b56:	09 06       	cpc	r0, r25
     b58:	08 95       	ret

00000b5a <__fp_pscB>:
     b5a:	00 24       	eor	r0, r0
     b5c:	0a 94       	dec	r0
     b5e:	12 16       	cp	r1, r18
     b60:	13 06       	cpc	r1, r19
     b62:	14 06       	cpc	r1, r20
     b64:	05 06       	cpc	r0, r21
     b66:	08 95       	ret

00000b68 <__fp_round>:
     b68:	09 2e       	mov	r0, r25
     b6a:	03 94       	inc	r0
     b6c:	00 0c       	add	r0, r0
     b6e:	11 f4       	brne	.+4      	; 0xb74 <__fp_round+0xc>
     b70:	88 23       	and	r24, r24
     b72:	52 f0       	brmi	.+20     	; 0xb88 <__fp_round+0x20>
     b74:	bb 0f       	add	r27, r27
     b76:	40 f4       	brcc	.+16     	; 0xb88 <__fp_round+0x20>
     b78:	bf 2b       	or	r27, r31
     b7a:	11 f4       	brne	.+4      	; 0xb80 <__fp_round+0x18>
     b7c:	60 ff       	sbrs	r22, 0
     b7e:	04 c0       	rjmp	.+8      	; 0xb88 <__fp_round+0x20>
     b80:	6f 5f       	subi	r22, 0xFF	; 255
     b82:	7f 4f       	sbci	r23, 0xFF	; 255
     b84:	8f 4f       	sbci	r24, 0xFF	; 255
     b86:	9f 4f       	sbci	r25, 0xFF	; 255
     b88:	08 95       	ret

00000b8a <__fp_split3>:
     b8a:	57 fd       	sbrc	r21, 7
     b8c:	90 58       	subi	r25, 0x80	; 128
     b8e:	44 0f       	add	r20, r20
     b90:	55 1f       	adc	r21, r21
     b92:	59 f0       	breq	.+22     	; 0xbaa <__fp_splitA+0x10>
     b94:	5f 3f       	cpi	r21, 0xFF	; 255
     b96:	71 f0       	breq	.+28     	; 0xbb4 <__fp_splitA+0x1a>
     b98:	47 95       	ror	r20

00000b9a <__fp_splitA>:
     b9a:	88 0f       	add	r24, r24
     b9c:	97 fb       	bst	r25, 7
     b9e:	99 1f       	adc	r25, r25
     ba0:	61 f0       	breq	.+24     	; 0xbba <__fp_splitA+0x20>
     ba2:	9f 3f       	cpi	r25, 0xFF	; 255
     ba4:	79 f0       	breq	.+30     	; 0xbc4 <__fp_splitA+0x2a>
     ba6:	87 95       	ror	r24
     ba8:	08 95       	ret
     baa:	12 16       	cp	r1, r18
     bac:	13 06       	cpc	r1, r19
     bae:	14 06       	cpc	r1, r20
     bb0:	55 1f       	adc	r21, r21
     bb2:	f2 cf       	rjmp	.-28     	; 0xb98 <__fp_split3+0xe>
     bb4:	46 95       	lsr	r20
     bb6:	f1 df       	rcall	.-30     	; 0xb9a <__fp_splitA>
     bb8:	08 c0       	rjmp	.+16     	; 0xbca <__fp_splitA+0x30>
     bba:	16 16       	cp	r1, r22
     bbc:	17 06       	cpc	r1, r23
     bbe:	18 06       	cpc	r1, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	f1 cf       	rjmp	.-30     	; 0xba6 <__fp_splitA+0xc>
     bc4:	86 95       	lsr	r24
     bc6:	71 05       	cpc	r23, r1
     bc8:	61 05       	cpc	r22, r1
     bca:	08 94       	sec
     bcc:	08 95       	ret

00000bce <__fp_zero>:
     bce:	e8 94       	clt

00000bd0 <__fp_szero>:
     bd0:	bb 27       	eor	r27, r27
     bd2:	66 27       	eor	r22, r22
     bd4:	77 27       	eor	r23, r23
     bd6:	cb 01       	movw	r24, r22
     bd8:	97 f9       	bld	r25, 7
     bda:	08 95       	ret

00000bdc <__mulsf3>:
     bdc:	0b d0       	rcall	.+22     	; 0xbf4 <__mulsf3x>
     bde:	c4 cf       	rjmp	.-120    	; 0xb68 <__fp_round>
     be0:	b5 df       	rcall	.-150    	; 0xb4c <__fp_pscA>
     be2:	28 f0       	brcs	.+10     	; 0xbee <__mulsf3+0x12>
     be4:	ba df       	rcall	.-140    	; 0xb5a <__fp_pscB>
     be6:	18 f0       	brcs	.+6      	; 0xbee <__mulsf3+0x12>
     be8:	95 23       	and	r25, r21
     bea:	09 f0       	breq	.+2      	; 0xbee <__mulsf3+0x12>
     bec:	a6 cf       	rjmp	.-180    	; 0xb3a <__fp_inf>
     bee:	ab cf       	rjmp	.-170    	; 0xb46 <__fp_nan>
     bf0:	11 24       	eor	r1, r1
     bf2:	ee cf       	rjmp	.-36     	; 0xbd0 <__fp_szero>

00000bf4 <__mulsf3x>:
     bf4:	ca df       	rcall	.-108    	; 0xb8a <__fp_split3>
     bf6:	a0 f3       	brcs	.-24     	; 0xbe0 <__mulsf3+0x4>

00000bf8 <__mulsf3_pse>:
     bf8:	95 9f       	mul	r25, r21
     bfa:	d1 f3       	breq	.-12     	; 0xbf0 <__mulsf3+0x14>
     bfc:	95 0f       	add	r25, r21
     bfe:	50 e0       	ldi	r21, 0x00	; 0
     c00:	55 1f       	adc	r21, r21
     c02:	62 9f       	mul	r22, r18
     c04:	f0 01       	movw	r30, r0
     c06:	72 9f       	mul	r23, r18
     c08:	bb 27       	eor	r27, r27
     c0a:	f0 0d       	add	r31, r0
     c0c:	b1 1d       	adc	r27, r1
     c0e:	63 9f       	mul	r22, r19
     c10:	aa 27       	eor	r26, r26
     c12:	f0 0d       	add	r31, r0
     c14:	b1 1d       	adc	r27, r1
     c16:	aa 1f       	adc	r26, r26
     c18:	64 9f       	mul	r22, r20
     c1a:	66 27       	eor	r22, r22
     c1c:	b0 0d       	add	r27, r0
     c1e:	a1 1d       	adc	r26, r1
     c20:	66 1f       	adc	r22, r22
     c22:	82 9f       	mul	r24, r18
     c24:	22 27       	eor	r18, r18
     c26:	b0 0d       	add	r27, r0
     c28:	a1 1d       	adc	r26, r1
     c2a:	62 1f       	adc	r22, r18
     c2c:	73 9f       	mul	r23, r19
     c2e:	b0 0d       	add	r27, r0
     c30:	a1 1d       	adc	r26, r1
     c32:	62 1f       	adc	r22, r18
     c34:	83 9f       	mul	r24, r19
     c36:	a0 0d       	add	r26, r0
     c38:	61 1d       	adc	r22, r1
     c3a:	22 1f       	adc	r18, r18
     c3c:	74 9f       	mul	r23, r20
     c3e:	33 27       	eor	r19, r19
     c40:	a0 0d       	add	r26, r0
     c42:	61 1d       	adc	r22, r1
     c44:	23 1f       	adc	r18, r19
     c46:	84 9f       	mul	r24, r20
     c48:	60 0d       	add	r22, r0
     c4a:	21 1d       	adc	r18, r1
     c4c:	82 2f       	mov	r24, r18
     c4e:	76 2f       	mov	r23, r22
     c50:	6a 2f       	mov	r22, r26
     c52:	11 24       	eor	r1, r1
     c54:	9f 57       	subi	r25, 0x7F	; 127
     c56:	50 40       	sbci	r21, 0x00	; 0
     c58:	8a f0       	brmi	.+34     	; 0xc7c <__mulsf3_pse+0x84>
     c5a:	e1 f0       	breq	.+56     	; 0xc94 <__mulsf3_pse+0x9c>
     c5c:	88 23       	and	r24, r24
     c5e:	4a f0       	brmi	.+18     	; 0xc72 <__mulsf3_pse+0x7a>
     c60:	ee 0f       	add	r30, r30
     c62:	ff 1f       	adc	r31, r31
     c64:	bb 1f       	adc	r27, r27
     c66:	66 1f       	adc	r22, r22
     c68:	77 1f       	adc	r23, r23
     c6a:	88 1f       	adc	r24, r24
     c6c:	91 50       	subi	r25, 0x01	; 1
     c6e:	50 40       	sbci	r21, 0x00	; 0
     c70:	a9 f7       	brne	.-22     	; 0xc5c <__mulsf3_pse+0x64>
     c72:	9e 3f       	cpi	r25, 0xFE	; 254
     c74:	51 05       	cpc	r21, r1
     c76:	70 f0       	brcs	.+28     	; 0xc94 <__mulsf3_pse+0x9c>
     c78:	60 cf       	rjmp	.-320    	; 0xb3a <__fp_inf>
     c7a:	aa cf       	rjmp	.-172    	; 0xbd0 <__fp_szero>
     c7c:	5f 3f       	cpi	r21, 0xFF	; 255
     c7e:	ec f3       	brlt	.-6      	; 0xc7a <__mulsf3_pse+0x82>
     c80:	98 3e       	cpi	r25, 0xE8	; 232
     c82:	dc f3       	brlt	.-10     	; 0xc7a <__mulsf3_pse+0x82>
     c84:	86 95       	lsr	r24
     c86:	77 95       	ror	r23
     c88:	67 95       	ror	r22
     c8a:	b7 95       	ror	r27
     c8c:	f7 95       	ror	r31
     c8e:	e7 95       	ror	r30
     c90:	9f 5f       	subi	r25, 0xFF	; 255
     c92:	c1 f7       	brne	.-16     	; 0xc84 <__mulsf3_pse+0x8c>
     c94:	fe 2b       	or	r31, r30
     c96:	88 0f       	add	r24, r24
     c98:	91 1d       	adc	r25, r1
     c9a:	96 95       	lsr	r25
     c9c:	87 95       	ror	r24
     c9e:	97 f9       	bld	r25, 7
     ca0:	08 95       	ret

00000ca2 <__divmodhi4>:
     ca2:	97 fb       	bst	r25, 7
     ca4:	07 2e       	mov	r0, r23
     ca6:	16 f4       	brtc	.+4      	; 0xcac <__divmodhi4+0xa>
     ca8:	00 94       	com	r0
     caa:	06 d0       	rcall	.+12     	; 0xcb8 <__divmodhi4_neg1>
     cac:	77 fd       	sbrc	r23, 7
     cae:	08 d0       	rcall	.+16     	; 0xcc0 <__divmodhi4_neg2>
     cb0:	0b d0       	rcall	.+22     	; 0xcc8 <__udivmodhi4>
     cb2:	07 fc       	sbrc	r0, 7
     cb4:	05 d0       	rcall	.+10     	; 0xcc0 <__divmodhi4_neg2>
     cb6:	3e f4       	brtc	.+14     	; 0xcc6 <__divmodhi4_exit>

00000cb8 <__divmodhi4_neg1>:
     cb8:	90 95       	com	r25
     cba:	81 95       	neg	r24
     cbc:	9f 4f       	sbci	r25, 0xFF	; 255
     cbe:	08 95       	ret

00000cc0 <__divmodhi4_neg2>:
     cc0:	70 95       	com	r23
     cc2:	61 95       	neg	r22
     cc4:	7f 4f       	sbci	r23, 0xFF	; 255

00000cc6 <__divmodhi4_exit>:
     cc6:	08 95       	ret

00000cc8 <__udivmodhi4>:
     cc8:	aa 1b       	sub	r26, r26
     cca:	bb 1b       	sub	r27, r27
     ccc:	51 e1       	ldi	r21, 0x11	; 17
     cce:	07 c0       	rjmp	.+14     	; 0xcde <__udivmodhi4_ep>

00000cd0 <__udivmodhi4_loop>:
     cd0:	aa 1f       	adc	r26, r26
     cd2:	bb 1f       	adc	r27, r27
     cd4:	a6 17       	cp	r26, r22
     cd6:	b7 07       	cpc	r27, r23
     cd8:	10 f0       	brcs	.+4      	; 0xcde <__udivmodhi4_ep>
     cda:	a6 1b       	sub	r26, r22
     cdc:	b7 0b       	sbc	r27, r23

00000cde <__udivmodhi4_ep>:
     cde:	88 1f       	adc	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	5a 95       	dec	r21
     ce4:	a9 f7       	brne	.-22     	; 0xcd0 <__udivmodhi4_loop>
     ce6:	80 95       	com	r24
     ce8:	90 95       	com	r25
     cea:	bc 01       	movw	r22, r24
     cec:	cd 01       	movw	r24, r26
     cee:	08 95       	ret

00000cf0 <sprintf>:
     cf0:	ae e0       	ldi	r26, 0x0E	; 14
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	ed e7       	ldi	r30, 0x7D	; 125
     cf6:	f6 e0       	ldi	r31, 0x06	; 6
     cf8:	aa c2       	rjmp	.+1364   	; 0x124e <__prologue_saves__+0x1c>
     cfa:	0d 89       	ldd	r16, Y+21	; 0x15
     cfc:	1e 89       	ldd	r17, Y+22	; 0x16
     cfe:	86 e0       	ldi	r24, 0x06	; 6
     d00:	8c 83       	std	Y+4, r24	; 0x04
     d02:	1a 83       	std	Y+2, r17	; 0x02
     d04:	09 83       	std	Y+1, r16	; 0x01
     d06:	8f ef       	ldi	r24, 0xFF	; 255
     d08:	9f e7       	ldi	r25, 0x7F	; 127
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	ae 01       	movw	r20, r28
     d10:	47 5e       	subi	r20, 0xE7	; 231
     d12:	5f 4f       	sbci	r21, 0xFF	; 255
     d14:	6f 89       	ldd	r22, Y+23	; 0x17
     d16:	78 8d       	ldd	r23, Y+24	; 0x18
     d18:	ce 01       	movw	r24, r28
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	08 d0       	rcall	.+16     	; 0xd2e <vfprintf>
     d1e:	ef 81       	ldd	r30, Y+7	; 0x07
     d20:	f8 85       	ldd	r31, Y+8	; 0x08
     d22:	e0 0f       	add	r30, r16
     d24:	f1 1f       	adc	r31, r17
     d26:	10 82       	st	Z, r1
     d28:	2e 96       	adiw	r28, 0x0e	; 14
     d2a:	e4 e0       	ldi	r30, 0x04	; 4
     d2c:	ac c2       	rjmp	.+1368   	; 0x1286 <__epilogue_restores__+0x1c>

00000d2e <vfprintf>:
     d2e:	ab e0       	ldi	r26, 0x0B	; 11
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	ec e9       	ldi	r30, 0x9C	; 156
     d34:	f6 e0       	ldi	r31, 0x06	; 6
     d36:	7d c2       	rjmp	.+1274   	; 0x1232 <__prologue_saves__>
     d38:	6c 01       	movw	r12, r24
     d3a:	7b 01       	movw	r14, r22
     d3c:	8a 01       	movw	r16, r20
     d3e:	fc 01       	movw	r30, r24
     d40:	17 82       	std	Z+7, r1	; 0x07
     d42:	16 82       	std	Z+6, r1	; 0x06
     d44:	83 81       	ldd	r24, Z+3	; 0x03
     d46:	81 ff       	sbrs	r24, 1
     d48:	bf c1       	rjmp	.+894    	; 0x10c8 <vfprintf+0x39a>
     d4a:	ce 01       	movw	r24, r28
     d4c:	01 96       	adiw	r24, 0x01	; 1
     d4e:	3c 01       	movw	r6, r24
     d50:	f6 01       	movw	r30, r12
     d52:	93 81       	ldd	r25, Z+3	; 0x03
     d54:	f7 01       	movw	r30, r14
     d56:	93 fd       	sbrc	r25, 3
     d58:	85 91       	lpm	r24, Z+
     d5a:	93 ff       	sbrs	r25, 3
     d5c:	81 91       	ld	r24, Z+
     d5e:	7f 01       	movw	r14, r30
     d60:	88 23       	and	r24, r24
     d62:	09 f4       	brne	.+2      	; 0xd66 <vfprintf+0x38>
     d64:	ad c1       	rjmp	.+858    	; 0x10c0 <vfprintf+0x392>
     d66:	85 32       	cpi	r24, 0x25	; 37
     d68:	39 f4       	brne	.+14     	; 0xd78 <vfprintf+0x4a>
     d6a:	93 fd       	sbrc	r25, 3
     d6c:	85 91       	lpm	r24, Z+
     d6e:	93 ff       	sbrs	r25, 3
     d70:	81 91       	ld	r24, Z+
     d72:	7f 01       	movw	r14, r30
     d74:	85 32       	cpi	r24, 0x25	; 37
     d76:	21 f4       	brne	.+8      	; 0xd80 <vfprintf+0x52>
     d78:	b6 01       	movw	r22, r12
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	c0 d1       	rcall	.+896    	; 0x10fe <fputc>
     d7e:	e8 cf       	rjmp	.-48     	; 0xd50 <vfprintf+0x22>
     d80:	91 2c       	mov	r9, r1
     d82:	21 2c       	mov	r2, r1
     d84:	31 2c       	mov	r3, r1
     d86:	ff e1       	ldi	r31, 0x1F	; 31
     d88:	f3 15       	cp	r31, r3
     d8a:	d8 f0       	brcs	.+54     	; 0xdc2 <vfprintf+0x94>
     d8c:	8b 32       	cpi	r24, 0x2B	; 43
     d8e:	79 f0       	breq	.+30     	; 0xdae <vfprintf+0x80>
     d90:	38 f4       	brcc	.+14     	; 0xda0 <vfprintf+0x72>
     d92:	80 32       	cpi	r24, 0x20	; 32
     d94:	79 f0       	breq	.+30     	; 0xdb4 <vfprintf+0x86>
     d96:	83 32       	cpi	r24, 0x23	; 35
     d98:	a1 f4       	brne	.+40     	; 0xdc2 <vfprintf+0x94>
     d9a:	23 2d       	mov	r18, r3
     d9c:	20 61       	ori	r18, 0x10	; 16
     d9e:	1d c0       	rjmp	.+58     	; 0xdda <vfprintf+0xac>
     da0:	8d 32       	cpi	r24, 0x2D	; 45
     da2:	61 f0       	breq	.+24     	; 0xdbc <vfprintf+0x8e>
     da4:	80 33       	cpi	r24, 0x30	; 48
     da6:	69 f4       	brne	.+26     	; 0xdc2 <vfprintf+0x94>
     da8:	23 2d       	mov	r18, r3
     daa:	21 60       	ori	r18, 0x01	; 1
     dac:	16 c0       	rjmp	.+44     	; 0xdda <vfprintf+0xac>
     dae:	83 2d       	mov	r24, r3
     db0:	82 60       	ori	r24, 0x02	; 2
     db2:	38 2e       	mov	r3, r24
     db4:	e3 2d       	mov	r30, r3
     db6:	e4 60       	ori	r30, 0x04	; 4
     db8:	3e 2e       	mov	r3, r30
     dba:	2a c0       	rjmp	.+84     	; 0xe10 <vfprintf+0xe2>
     dbc:	f3 2d       	mov	r31, r3
     dbe:	f8 60       	ori	r31, 0x08	; 8
     dc0:	1d c0       	rjmp	.+58     	; 0xdfc <vfprintf+0xce>
     dc2:	37 fc       	sbrc	r3, 7
     dc4:	2d c0       	rjmp	.+90     	; 0xe20 <vfprintf+0xf2>
     dc6:	20 ed       	ldi	r18, 0xD0	; 208
     dc8:	28 0f       	add	r18, r24
     dca:	2a 30       	cpi	r18, 0x0A	; 10
     dcc:	40 f0       	brcs	.+16     	; 0xdde <vfprintf+0xb0>
     dce:	8e 32       	cpi	r24, 0x2E	; 46
     dd0:	b9 f4       	brne	.+46     	; 0xe00 <vfprintf+0xd2>
     dd2:	36 fc       	sbrc	r3, 6
     dd4:	75 c1       	rjmp	.+746    	; 0x10c0 <vfprintf+0x392>
     dd6:	23 2d       	mov	r18, r3
     dd8:	20 64       	ori	r18, 0x40	; 64
     dda:	32 2e       	mov	r3, r18
     ddc:	19 c0       	rjmp	.+50     	; 0xe10 <vfprintf+0xe2>
     dde:	36 fe       	sbrs	r3, 6
     de0:	06 c0       	rjmp	.+12     	; 0xdee <vfprintf+0xc0>
     de2:	8a e0       	ldi	r24, 0x0A	; 10
     de4:	98 9e       	mul	r9, r24
     de6:	20 0d       	add	r18, r0
     de8:	11 24       	eor	r1, r1
     dea:	92 2e       	mov	r9, r18
     dec:	11 c0       	rjmp	.+34     	; 0xe10 <vfprintf+0xe2>
     dee:	ea e0       	ldi	r30, 0x0A	; 10
     df0:	2e 9e       	mul	r2, r30
     df2:	20 0d       	add	r18, r0
     df4:	11 24       	eor	r1, r1
     df6:	22 2e       	mov	r2, r18
     df8:	f3 2d       	mov	r31, r3
     dfa:	f0 62       	ori	r31, 0x20	; 32
     dfc:	3f 2e       	mov	r3, r31
     dfe:	08 c0       	rjmp	.+16     	; 0xe10 <vfprintf+0xe2>
     e00:	8c 36       	cpi	r24, 0x6C	; 108
     e02:	21 f4       	brne	.+8      	; 0xe0c <vfprintf+0xde>
     e04:	83 2d       	mov	r24, r3
     e06:	80 68       	ori	r24, 0x80	; 128
     e08:	38 2e       	mov	r3, r24
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <vfprintf+0xe2>
     e0c:	88 36       	cpi	r24, 0x68	; 104
     e0e:	41 f4       	brne	.+16     	; 0xe20 <vfprintf+0xf2>
     e10:	f7 01       	movw	r30, r14
     e12:	93 fd       	sbrc	r25, 3
     e14:	85 91       	lpm	r24, Z+
     e16:	93 ff       	sbrs	r25, 3
     e18:	81 91       	ld	r24, Z+
     e1a:	7f 01       	movw	r14, r30
     e1c:	81 11       	cpse	r24, r1
     e1e:	b3 cf       	rjmp	.-154    	; 0xd86 <vfprintf+0x58>
     e20:	98 2f       	mov	r25, r24
     e22:	9f 7d       	andi	r25, 0xDF	; 223
     e24:	95 54       	subi	r25, 0x45	; 69
     e26:	93 30       	cpi	r25, 0x03	; 3
     e28:	28 f4       	brcc	.+10     	; 0xe34 <vfprintf+0x106>
     e2a:	0c 5f       	subi	r16, 0xFC	; 252
     e2c:	1f 4f       	sbci	r17, 0xFF	; 255
     e2e:	9f e3       	ldi	r25, 0x3F	; 63
     e30:	99 83       	std	Y+1, r25	; 0x01
     e32:	0d c0       	rjmp	.+26     	; 0xe4e <vfprintf+0x120>
     e34:	83 36       	cpi	r24, 0x63	; 99
     e36:	31 f0       	breq	.+12     	; 0xe44 <vfprintf+0x116>
     e38:	83 37       	cpi	r24, 0x73	; 115
     e3a:	71 f0       	breq	.+28     	; 0xe58 <vfprintf+0x12a>
     e3c:	83 35       	cpi	r24, 0x53	; 83
     e3e:	09 f0       	breq	.+2      	; 0xe42 <vfprintf+0x114>
     e40:	55 c0       	rjmp	.+170    	; 0xeec <vfprintf+0x1be>
     e42:	20 c0       	rjmp	.+64     	; 0xe84 <vfprintf+0x156>
     e44:	f8 01       	movw	r30, r16
     e46:	80 81       	ld	r24, Z
     e48:	89 83       	std	Y+1, r24	; 0x01
     e4a:	0e 5f       	subi	r16, 0xFE	; 254
     e4c:	1f 4f       	sbci	r17, 0xFF	; 255
     e4e:	88 24       	eor	r8, r8
     e50:	83 94       	inc	r8
     e52:	91 2c       	mov	r9, r1
     e54:	53 01       	movw	r10, r6
     e56:	12 c0       	rjmp	.+36     	; 0xe7c <vfprintf+0x14e>
     e58:	28 01       	movw	r4, r16
     e5a:	f2 e0       	ldi	r31, 0x02	; 2
     e5c:	4f 0e       	add	r4, r31
     e5e:	51 1c       	adc	r5, r1
     e60:	f8 01       	movw	r30, r16
     e62:	a0 80       	ld	r10, Z
     e64:	b1 80       	ldd	r11, Z+1	; 0x01
     e66:	36 fe       	sbrs	r3, 6
     e68:	03 c0       	rjmp	.+6      	; 0xe70 <vfprintf+0x142>
     e6a:	69 2d       	mov	r22, r9
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <vfprintf+0x146>
     e70:	6f ef       	ldi	r22, 0xFF	; 255
     e72:	7f ef       	ldi	r23, 0xFF	; 255
     e74:	c5 01       	movw	r24, r10
     e76:	38 d1       	rcall	.+624    	; 0x10e8 <strnlen>
     e78:	4c 01       	movw	r8, r24
     e7a:	82 01       	movw	r16, r4
     e7c:	f3 2d       	mov	r31, r3
     e7e:	ff 77       	andi	r31, 0x7F	; 127
     e80:	3f 2e       	mov	r3, r31
     e82:	15 c0       	rjmp	.+42     	; 0xeae <vfprintf+0x180>
     e84:	28 01       	movw	r4, r16
     e86:	22 e0       	ldi	r18, 0x02	; 2
     e88:	42 0e       	add	r4, r18
     e8a:	51 1c       	adc	r5, r1
     e8c:	f8 01       	movw	r30, r16
     e8e:	a0 80       	ld	r10, Z
     e90:	b1 80       	ldd	r11, Z+1	; 0x01
     e92:	36 fe       	sbrs	r3, 6
     e94:	03 c0       	rjmp	.+6      	; 0xe9c <vfprintf+0x16e>
     e96:	69 2d       	mov	r22, r9
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <vfprintf+0x172>
     e9c:	6f ef       	ldi	r22, 0xFF	; 255
     e9e:	7f ef       	ldi	r23, 0xFF	; 255
     ea0:	c5 01       	movw	r24, r10
     ea2:	17 d1       	rcall	.+558    	; 0x10d2 <strnlen_P>
     ea4:	4c 01       	movw	r8, r24
     ea6:	f3 2d       	mov	r31, r3
     ea8:	f0 68       	ori	r31, 0x80	; 128
     eaa:	3f 2e       	mov	r3, r31
     eac:	82 01       	movw	r16, r4
     eae:	33 fc       	sbrc	r3, 3
     eb0:	19 c0       	rjmp	.+50     	; 0xee4 <vfprintf+0x1b6>
     eb2:	82 2d       	mov	r24, r2
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	88 16       	cp	r8, r24
     eb8:	99 06       	cpc	r9, r25
     eba:	a0 f4       	brcc	.+40     	; 0xee4 <vfprintf+0x1b6>
     ebc:	b6 01       	movw	r22, r12
     ebe:	80 e2       	ldi	r24, 0x20	; 32
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	1d d1       	rcall	.+570    	; 0x10fe <fputc>
     ec4:	2a 94       	dec	r2
     ec6:	f5 cf       	rjmp	.-22     	; 0xeb2 <vfprintf+0x184>
     ec8:	f5 01       	movw	r30, r10
     eca:	37 fc       	sbrc	r3, 7
     ecc:	85 91       	lpm	r24, Z+
     ece:	37 fe       	sbrs	r3, 7
     ed0:	81 91       	ld	r24, Z+
     ed2:	5f 01       	movw	r10, r30
     ed4:	b6 01       	movw	r22, r12
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	12 d1       	rcall	.+548    	; 0x10fe <fputc>
     eda:	21 10       	cpse	r2, r1
     edc:	2a 94       	dec	r2
     ede:	21 e0       	ldi	r18, 0x01	; 1
     ee0:	82 1a       	sub	r8, r18
     ee2:	91 08       	sbc	r9, r1
     ee4:	81 14       	cp	r8, r1
     ee6:	91 04       	cpc	r9, r1
     ee8:	79 f7       	brne	.-34     	; 0xec8 <vfprintf+0x19a>
     eea:	e1 c0       	rjmp	.+450    	; 0x10ae <vfprintf+0x380>
     eec:	84 36       	cpi	r24, 0x64	; 100
     eee:	11 f0       	breq	.+4      	; 0xef4 <vfprintf+0x1c6>
     ef0:	89 36       	cpi	r24, 0x69	; 105
     ef2:	39 f5       	brne	.+78     	; 0xf42 <vfprintf+0x214>
     ef4:	f8 01       	movw	r30, r16
     ef6:	37 fe       	sbrs	r3, 7
     ef8:	07 c0       	rjmp	.+14     	; 0xf08 <vfprintf+0x1da>
     efa:	60 81       	ld	r22, Z
     efc:	71 81       	ldd	r23, Z+1	; 0x01
     efe:	82 81       	ldd	r24, Z+2	; 0x02
     f00:	93 81       	ldd	r25, Z+3	; 0x03
     f02:	0c 5f       	subi	r16, 0xFC	; 252
     f04:	1f 4f       	sbci	r17, 0xFF	; 255
     f06:	08 c0       	rjmp	.+16     	; 0xf18 <vfprintf+0x1ea>
     f08:	60 81       	ld	r22, Z
     f0a:	71 81       	ldd	r23, Z+1	; 0x01
     f0c:	07 2e       	mov	r0, r23
     f0e:	00 0c       	add	r0, r0
     f10:	88 0b       	sbc	r24, r24
     f12:	99 0b       	sbc	r25, r25
     f14:	0e 5f       	subi	r16, 0xFE	; 254
     f16:	1f 4f       	sbci	r17, 0xFF	; 255
     f18:	f3 2d       	mov	r31, r3
     f1a:	ff 76       	andi	r31, 0x6F	; 111
     f1c:	3f 2e       	mov	r3, r31
     f1e:	97 ff       	sbrs	r25, 7
     f20:	09 c0       	rjmp	.+18     	; 0xf34 <vfprintf+0x206>
     f22:	90 95       	com	r25
     f24:	80 95       	com	r24
     f26:	70 95       	com	r23
     f28:	61 95       	neg	r22
     f2a:	7f 4f       	sbci	r23, 0xFF	; 255
     f2c:	8f 4f       	sbci	r24, 0xFF	; 255
     f2e:	9f 4f       	sbci	r25, 0xFF	; 255
     f30:	f0 68       	ori	r31, 0x80	; 128
     f32:	3f 2e       	mov	r3, r31
     f34:	2a e0       	ldi	r18, 0x0A	; 10
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	a3 01       	movw	r20, r6
     f3a:	1d d1       	rcall	.+570    	; 0x1176 <__ultoa_invert>
     f3c:	88 2e       	mov	r8, r24
     f3e:	86 18       	sub	r8, r6
     f40:	44 c0       	rjmp	.+136    	; 0xfca <vfprintf+0x29c>
     f42:	85 37       	cpi	r24, 0x75	; 117
     f44:	31 f4       	brne	.+12     	; 0xf52 <vfprintf+0x224>
     f46:	23 2d       	mov	r18, r3
     f48:	2f 7e       	andi	r18, 0xEF	; 239
     f4a:	b2 2e       	mov	r11, r18
     f4c:	2a e0       	ldi	r18, 0x0A	; 10
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	25 c0       	rjmp	.+74     	; 0xf9c <vfprintf+0x26e>
     f52:	93 2d       	mov	r25, r3
     f54:	99 7f       	andi	r25, 0xF9	; 249
     f56:	b9 2e       	mov	r11, r25
     f58:	8f 36       	cpi	r24, 0x6F	; 111
     f5a:	c1 f0       	breq	.+48     	; 0xf8c <vfprintf+0x25e>
     f5c:	18 f4       	brcc	.+6      	; 0xf64 <vfprintf+0x236>
     f5e:	88 35       	cpi	r24, 0x58	; 88
     f60:	79 f0       	breq	.+30     	; 0xf80 <vfprintf+0x252>
     f62:	ae c0       	rjmp	.+348    	; 0x10c0 <vfprintf+0x392>
     f64:	80 37       	cpi	r24, 0x70	; 112
     f66:	19 f0       	breq	.+6      	; 0xf6e <vfprintf+0x240>
     f68:	88 37       	cpi	r24, 0x78	; 120
     f6a:	21 f0       	breq	.+8      	; 0xf74 <vfprintf+0x246>
     f6c:	a9 c0       	rjmp	.+338    	; 0x10c0 <vfprintf+0x392>
     f6e:	e9 2f       	mov	r30, r25
     f70:	e0 61       	ori	r30, 0x10	; 16
     f72:	be 2e       	mov	r11, r30
     f74:	b4 fe       	sbrs	r11, 4
     f76:	0d c0       	rjmp	.+26     	; 0xf92 <vfprintf+0x264>
     f78:	fb 2d       	mov	r31, r11
     f7a:	f4 60       	ori	r31, 0x04	; 4
     f7c:	bf 2e       	mov	r11, r31
     f7e:	09 c0       	rjmp	.+18     	; 0xf92 <vfprintf+0x264>
     f80:	34 fe       	sbrs	r3, 4
     f82:	0a c0       	rjmp	.+20     	; 0xf98 <vfprintf+0x26a>
     f84:	29 2f       	mov	r18, r25
     f86:	26 60       	ori	r18, 0x06	; 6
     f88:	b2 2e       	mov	r11, r18
     f8a:	06 c0       	rjmp	.+12     	; 0xf98 <vfprintf+0x26a>
     f8c:	28 e0       	ldi	r18, 0x08	; 8
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	05 c0       	rjmp	.+10     	; 0xf9c <vfprintf+0x26e>
     f92:	20 e1       	ldi	r18, 0x10	; 16
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <vfprintf+0x26e>
     f98:	20 e1       	ldi	r18, 0x10	; 16
     f9a:	32 e0       	ldi	r19, 0x02	; 2
     f9c:	f8 01       	movw	r30, r16
     f9e:	b7 fe       	sbrs	r11, 7
     fa0:	07 c0       	rjmp	.+14     	; 0xfb0 <vfprintf+0x282>
     fa2:	60 81       	ld	r22, Z
     fa4:	71 81       	ldd	r23, Z+1	; 0x01
     fa6:	82 81       	ldd	r24, Z+2	; 0x02
     fa8:	93 81       	ldd	r25, Z+3	; 0x03
     faa:	0c 5f       	subi	r16, 0xFC	; 252
     fac:	1f 4f       	sbci	r17, 0xFF	; 255
     fae:	06 c0       	rjmp	.+12     	; 0xfbc <vfprintf+0x28e>
     fb0:	60 81       	ld	r22, Z
     fb2:	71 81       	ldd	r23, Z+1	; 0x01
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 5f       	subi	r16, 0xFE	; 254
     fba:	1f 4f       	sbci	r17, 0xFF	; 255
     fbc:	a3 01       	movw	r20, r6
     fbe:	db d0       	rcall	.+438    	; 0x1176 <__ultoa_invert>
     fc0:	88 2e       	mov	r8, r24
     fc2:	86 18       	sub	r8, r6
     fc4:	fb 2d       	mov	r31, r11
     fc6:	ff 77       	andi	r31, 0x7F	; 127
     fc8:	3f 2e       	mov	r3, r31
     fca:	36 fe       	sbrs	r3, 6
     fcc:	0d c0       	rjmp	.+26     	; 0xfe8 <vfprintf+0x2ba>
     fce:	23 2d       	mov	r18, r3
     fd0:	2e 7f       	andi	r18, 0xFE	; 254
     fd2:	a2 2e       	mov	r10, r18
     fd4:	89 14       	cp	r8, r9
     fd6:	58 f4       	brcc	.+22     	; 0xfee <vfprintf+0x2c0>
     fd8:	34 fe       	sbrs	r3, 4
     fda:	0b c0       	rjmp	.+22     	; 0xff2 <vfprintf+0x2c4>
     fdc:	32 fc       	sbrc	r3, 2
     fde:	09 c0       	rjmp	.+18     	; 0xff2 <vfprintf+0x2c4>
     fe0:	83 2d       	mov	r24, r3
     fe2:	8e 7e       	andi	r24, 0xEE	; 238
     fe4:	a8 2e       	mov	r10, r24
     fe6:	05 c0       	rjmp	.+10     	; 0xff2 <vfprintf+0x2c4>
     fe8:	b8 2c       	mov	r11, r8
     fea:	a3 2c       	mov	r10, r3
     fec:	03 c0       	rjmp	.+6      	; 0xff4 <vfprintf+0x2c6>
     fee:	b8 2c       	mov	r11, r8
     ff0:	01 c0       	rjmp	.+2      	; 0xff4 <vfprintf+0x2c6>
     ff2:	b9 2c       	mov	r11, r9
     ff4:	a4 fe       	sbrs	r10, 4
     ff6:	0f c0       	rjmp	.+30     	; 0x1016 <vfprintf+0x2e8>
     ff8:	fe 01       	movw	r30, r28
     ffa:	e8 0d       	add	r30, r8
     ffc:	f1 1d       	adc	r31, r1
     ffe:	80 81       	ld	r24, Z
    1000:	80 33       	cpi	r24, 0x30	; 48
    1002:	21 f4       	brne	.+8      	; 0x100c <vfprintf+0x2de>
    1004:	9a 2d       	mov	r25, r10
    1006:	99 7e       	andi	r25, 0xE9	; 233
    1008:	a9 2e       	mov	r10, r25
    100a:	09 c0       	rjmp	.+18     	; 0x101e <vfprintf+0x2f0>
    100c:	a2 fe       	sbrs	r10, 2
    100e:	06 c0       	rjmp	.+12     	; 0x101c <vfprintf+0x2ee>
    1010:	b3 94       	inc	r11
    1012:	b3 94       	inc	r11
    1014:	04 c0       	rjmp	.+8      	; 0x101e <vfprintf+0x2f0>
    1016:	8a 2d       	mov	r24, r10
    1018:	86 78       	andi	r24, 0x86	; 134
    101a:	09 f0       	breq	.+2      	; 0x101e <vfprintf+0x2f0>
    101c:	b3 94       	inc	r11
    101e:	a3 fc       	sbrc	r10, 3
    1020:	10 c0       	rjmp	.+32     	; 0x1042 <vfprintf+0x314>
    1022:	a0 fe       	sbrs	r10, 0
    1024:	06 c0       	rjmp	.+12     	; 0x1032 <vfprintf+0x304>
    1026:	b2 14       	cp	r11, r2
    1028:	80 f4       	brcc	.+32     	; 0x104a <vfprintf+0x31c>
    102a:	28 0c       	add	r2, r8
    102c:	92 2c       	mov	r9, r2
    102e:	9b 18       	sub	r9, r11
    1030:	0d c0       	rjmp	.+26     	; 0x104c <vfprintf+0x31e>
    1032:	b2 14       	cp	r11, r2
    1034:	58 f4       	brcc	.+22     	; 0x104c <vfprintf+0x31e>
    1036:	b6 01       	movw	r22, r12
    1038:	80 e2       	ldi	r24, 0x20	; 32
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	60 d0       	rcall	.+192    	; 0x10fe <fputc>
    103e:	b3 94       	inc	r11
    1040:	f8 cf       	rjmp	.-16     	; 0x1032 <vfprintf+0x304>
    1042:	b2 14       	cp	r11, r2
    1044:	18 f4       	brcc	.+6      	; 0x104c <vfprintf+0x31e>
    1046:	2b 18       	sub	r2, r11
    1048:	02 c0       	rjmp	.+4      	; 0x104e <vfprintf+0x320>
    104a:	98 2c       	mov	r9, r8
    104c:	21 2c       	mov	r2, r1
    104e:	a4 fe       	sbrs	r10, 4
    1050:	0f c0       	rjmp	.+30     	; 0x1070 <vfprintf+0x342>
    1052:	b6 01       	movw	r22, r12
    1054:	80 e3       	ldi	r24, 0x30	; 48
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	52 d0       	rcall	.+164    	; 0x10fe <fputc>
    105a:	a2 fe       	sbrs	r10, 2
    105c:	16 c0       	rjmp	.+44     	; 0x108a <vfprintf+0x35c>
    105e:	a1 fc       	sbrc	r10, 1
    1060:	03 c0       	rjmp	.+6      	; 0x1068 <vfprintf+0x33a>
    1062:	88 e7       	ldi	r24, 0x78	; 120
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 c0       	rjmp	.+4      	; 0x106c <vfprintf+0x33e>
    1068:	88 e5       	ldi	r24, 0x58	; 88
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	b6 01       	movw	r22, r12
    106e:	0c c0       	rjmp	.+24     	; 0x1088 <vfprintf+0x35a>
    1070:	8a 2d       	mov	r24, r10
    1072:	86 78       	andi	r24, 0x86	; 134
    1074:	51 f0       	breq	.+20     	; 0x108a <vfprintf+0x35c>
    1076:	a1 fe       	sbrs	r10, 1
    1078:	02 c0       	rjmp	.+4      	; 0x107e <vfprintf+0x350>
    107a:	8b e2       	ldi	r24, 0x2B	; 43
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <vfprintf+0x352>
    107e:	80 e2       	ldi	r24, 0x20	; 32
    1080:	a7 fc       	sbrc	r10, 7
    1082:	8d e2       	ldi	r24, 0x2D	; 45
    1084:	b6 01       	movw	r22, r12
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	3a d0       	rcall	.+116    	; 0x10fe <fputc>
    108a:	89 14       	cp	r8, r9
    108c:	30 f4       	brcc	.+12     	; 0x109a <vfprintf+0x36c>
    108e:	b6 01       	movw	r22, r12
    1090:	80 e3       	ldi	r24, 0x30	; 48
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	34 d0       	rcall	.+104    	; 0x10fe <fputc>
    1096:	9a 94       	dec	r9
    1098:	f8 cf       	rjmp	.-16     	; 0x108a <vfprintf+0x35c>
    109a:	8a 94       	dec	r8
    109c:	f3 01       	movw	r30, r6
    109e:	e8 0d       	add	r30, r8
    10a0:	f1 1d       	adc	r31, r1
    10a2:	80 81       	ld	r24, Z
    10a4:	b6 01       	movw	r22, r12
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	2a d0       	rcall	.+84     	; 0x10fe <fputc>
    10aa:	81 10       	cpse	r8, r1
    10ac:	f6 cf       	rjmp	.-20     	; 0x109a <vfprintf+0x36c>
    10ae:	22 20       	and	r2, r2
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <vfprintf+0x386>
    10b2:	4e ce       	rjmp	.-868    	; 0xd50 <vfprintf+0x22>
    10b4:	b6 01       	movw	r22, r12
    10b6:	80 e2       	ldi	r24, 0x20	; 32
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	21 d0       	rcall	.+66     	; 0x10fe <fputc>
    10bc:	2a 94       	dec	r2
    10be:	f7 cf       	rjmp	.-18     	; 0x10ae <vfprintf+0x380>
    10c0:	f6 01       	movw	r30, r12
    10c2:	86 81       	ldd	r24, Z+6	; 0x06
    10c4:	97 81       	ldd	r25, Z+7	; 0x07
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <vfprintf+0x39e>
    10c8:	8f ef       	ldi	r24, 0xFF	; 255
    10ca:	9f ef       	ldi	r25, 0xFF	; 255
    10cc:	2b 96       	adiw	r28, 0x0b	; 11
    10ce:	e2 e1       	ldi	r30, 0x12	; 18
    10d0:	cc c0       	rjmp	.+408    	; 0x126a <__epilogue_restores__>

000010d2 <strnlen_P>:
    10d2:	fc 01       	movw	r30, r24
    10d4:	05 90       	lpm	r0, Z+
    10d6:	61 50       	subi	r22, 0x01	; 1
    10d8:	70 40       	sbci	r23, 0x00	; 0
    10da:	01 10       	cpse	r0, r1
    10dc:	d8 f7       	brcc	.-10     	; 0x10d4 <strnlen_P+0x2>
    10de:	80 95       	com	r24
    10e0:	90 95       	com	r25
    10e2:	8e 0f       	add	r24, r30
    10e4:	9f 1f       	adc	r25, r31
    10e6:	08 95       	ret

000010e8 <strnlen>:
    10e8:	fc 01       	movw	r30, r24
    10ea:	61 50       	subi	r22, 0x01	; 1
    10ec:	70 40       	sbci	r23, 0x00	; 0
    10ee:	01 90       	ld	r0, Z+
    10f0:	01 10       	cpse	r0, r1
    10f2:	d8 f7       	brcc	.-10     	; 0x10ea <strnlen+0x2>
    10f4:	80 95       	com	r24
    10f6:	90 95       	com	r25
    10f8:	8e 0f       	add	r24, r30
    10fa:	9f 1f       	adc	r25, r31
    10fc:	08 95       	ret

000010fe <fputc>:
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	fb 01       	movw	r30, r22
    1108:	23 81       	ldd	r18, Z+3	; 0x03
    110a:	21 fd       	sbrc	r18, 1
    110c:	03 c0       	rjmp	.+6      	; 0x1114 <fputc+0x16>
    110e:	8f ef       	ldi	r24, 0xFF	; 255
    1110:	9f ef       	ldi	r25, 0xFF	; 255
    1112:	2c c0       	rjmp	.+88     	; 0x116c <fputc+0x6e>
    1114:	22 ff       	sbrs	r18, 2
    1116:	16 c0       	rjmp	.+44     	; 0x1144 <fputc+0x46>
    1118:	46 81       	ldd	r20, Z+6	; 0x06
    111a:	57 81       	ldd	r21, Z+7	; 0x07
    111c:	24 81       	ldd	r18, Z+4	; 0x04
    111e:	35 81       	ldd	r19, Z+5	; 0x05
    1120:	42 17       	cp	r20, r18
    1122:	53 07       	cpc	r21, r19
    1124:	44 f4       	brge	.+16     	; 0x1136 <fputc+0x38>
    1126:	a0 81       	ld	r26, Z
    1128:	b1 81       	ldd	r27, Z+1	; 0x01
    112a:	9d 01       	movw	r18, r26
    112c:	2f 5f       	subi	r18, 0xFF	; 255
    112e:	3f 4f       	sbci	r19, 0xFF	; 255
    1130:	31 83       	std	Z+1, r19	; 0x01
    1132:	20 83       	st	Z, r18
    1134:	8c 93       	st	X, r24
    1136:	26 81       	ldd	r18, Z+6	; 0x06
    1138:	37 81       	ldd	r19, Z+7	; 0x07
    113a:	2f 5f       	subi	r18, 0xFF	; 255
    113c:	3f 4f       	sbci	r19, 0xFF	; 255
    113e:	37 83       	std	Z+7, r19	; 0x07
    1140:	26 83       	std	Z+6, r18	; 0x06
    1142:	14 c0       	rjmp	.+40     	; 0x116c <fputc+0x6e>
    1144:	8b 01       	movw	r16, r22
    1146:	ec 01       	movw	r28, r24
    1148:	fb 01       	movw	r30, r22
    114a:	00 84       	ldd	r0, Z+8	; 0x08
    114c:	f1 85       	ldd	r31, Z+9	; 0x09
    114e:	e0 2d       	mov	r30, r0
    1150:	09 95       	icall
    1152:	89 2b       	or	r24, r25
    1154:	e1 f6       	brne	.-72     	; 0x110e <fputc+0x10>
    1156:	d8 01       	movw	r26, r16
    1158:	16 96       	adiw	r26, 0x06	; 6
    115a:	8d 91       	ld	r24, X+
    115c:	9c 91       	ld	r25, X
    115e:	17 97       	sbiw	r26, 0x07	; 7
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	17 96       	adiw	r26, 0x07	; 7
    1164:	9c 93       	st	X, r25
    1166:	8e 93       	st	-X, r24
    1168:	16 97       	sbiw	r26, 0x06	; 6
    116a:	ce 01       	movw	r24, r28
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	08 95       	ret

00001176 <__ultoa_invert>:
    1176:	fa 01       	movw	r30, r20
    1178:	aa 27       	eor	r26, r26
    117a:	28 30       	cpi	r18, 0x08	; 8
    117c:	51 f1       	breq	.+84     	; 0x11d2 <__ultoa_invert+0x5c>
    117e:	20 31       	cpi	r18, 0x10	; 16
    1180:	81 f1       	breq	.+96     	; 0x11e2 <__ultoa_invert+0x6c>
    1182:	e8 94       	clt
    1184:	6f 93       	push	r22
    1186:	6e 7f       	andi	r22, 0xFE	; 254
    1188:	6e 5f       	subi	r22, 0xFE	; 254
    118a:	7f 4f       	sbci	r23, 0xFF	; 255
    118c:	8f 4f       	sbci	r24, 0xFF	; 255
    118e:	9f 4f       	sbci	r25, 0xFF	; 255
    1190:	af 4f       	sbci	r26, 0xFF	; 255
    1192:	b1 e0       	ldi	r27, 0x01	; 1
    1194:	3e d0       	rcall	.+124    	; 0x1212 <__ultoa_invert+0x9c>
    1196:	b4 e0       	ldi	r27, 0x04	; 4
    1198:	3c d0       	rcall	.+120    	; 0x1212 <__ultoa_invert+0x9c>
    119a:	67 0f       	add	r22, r23
    119c:	78 1f       	adc	r23, r24
    119e:	89 1f       	adc	r24, r25
    11a0:	9a 1f       	adc	r25, r26
    11a2:	a1 1d       	adc	r26, r1
    11a4:	68 0f       	add	r22, r24
    11a6:	79 1f       	adc	r23, r25
    11a8:	8a 1f       	adc	r24, r26
    11aa:	91 1d       	adc	r25, r1
    11ac:	a1 1d       	adc	r26, r1
    11ae:	6a 0f       	add	r22, r26
    11b0:	71 1d       	adc	r23, r1
    11b2:	81 1d       	adc	r24, r1
    11b4:	91 1d       	adc	r25, r1
    11b6:	a1 1d       	adc	r26, r1
    11b8:	20 d0       	rcall	.+64     	; 0x11fa <__ultoa_invert+0x84>
    11ba:	09 f4       	brne	.+2      	; 0x11be <__ultoa_invert+0x48>
    11bc:	68 94       	set
    11be:	3f 91       	pop	r19
    11c0:	2a e0       	ldi	r18, 0x0A	; 10
    11c2:	26 9f       	mul	r18, r22
    11c4:	11 24       	eor	r1, r1
    11c6:	30 19       	sub	r19, r0
    11c8:	30 5d       	subi	r19, 0xD0	; 208
    11ca:	31 93       	st	Z+, r19
    11cc:	de f6       	brtc	.-74     	; 0x1184 <__ultoa_invert+0xe>
    11ce:	cf 01       	movw	r24, r30
    11d0:	08 95       	ret
    11d2:	46 2f       	mov	r20, r22
    11d4:	47 70       	andi	r20, 0x07	; 7
    11d6:	40 5d       	subi	r20, 0xD0	; 208
    11d8:	41 93       	st	Z+, r20
    11da:	b3 e0       	ldi	r27, 0x03	; 3
    11dc:	0f d0       	rcall	.+30     	; 0x11fc <__ultoa_invert+0x86>
    11de:	c9 f7       	brne	.-14     	; 0x11d2 <__ultoa_invert+0x5c>
    11e0:	f6 cf       	rjmp	.-20     	; 0x11ce <__ultoa_invert+0x58>
    11e2:	46 2f       	mov	r20, r22
    11e4:	4f 70       	andi	r20, 0x0F	; 15
    11e6:	40 5d       	subi	r20, 0xD0	; 208
    11e8:	4a 33       	cpi	r20, 0x3A	; 58
    11ea:	18 f0       	brcs	.+6      	; 0x11f2 <__ultoa_invert+0x7c>
    11ec:	49 5d       	subi	r20, 0xD9	; 217
    11ee:	31 fd       	sbrc	r19, 1
    11f0:	40 52       	subi	r20, 0x20	; 32
    11f2:	41 93       	st	Z+, r20
    11f4:	02 d0       	rcall	.+4      	; 0x11fa <__ultoa_invert+0x84>
    11f6:	a9 f7       	brne	.-22     	; 0x11e2 <__ultoa_invert+0x6c>
    11f8:	ea cf       	rjmp	.-44     	; 0x11ce <__ultoa_invert+0x58>
    11fa:	b4 e0       	ldi	r27, 0x04	; 4
    11fc:	a6 95       	lsr	r26
    11fe:	97 95       	ror	r25
    1200:	87 95       	ror	r24
    1202:	77 95       	ror	r23
    1204:	67 95       	ror	r22
    1206:	ba 95       	dec	r27
    1208:	c9 f7       	brne	.-14     	; 0x11fc <__ultoa_invert+0x86>
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	61 05       	cpc	r22, r1
    120e:	71 05       	cpc	r23, r1
    1210:	08 95       	ret
    1212:	9b 01       	movw	r18, r22
    1214:	ac 01       	movw	r20, r24
    1216:	0a 2e       	mov	r0, r26
    1218:	06 94       	lsr	r0
    121a:	57 95       	ror	r21
    121c:	47 95       	ror	r20
    121e:	37 95       	ror	r19
    1220:	27 95       	ror	r18
    1222:	ba 95       	dec	r27
    1224:	c9 f7       	brne	.-14     	; 0x1218 <__ultoa_invert+0xa2>
    1226:	62 0f       	add	r22, r18
    1228:	73 1f       	adc	r23, r19
    122a:	84 1f       	adc	r24, r20
    122c:	95 1f       	adc	r25, r21
    122e:	a0 1d       	adc	r26, r0
    1230:	08 95       	ret

00001232 <__prologue_saves__>:
    1232:	2f 92       	push	r2
    1234:	3f 92       	push	r3
    1236:	4f 92       	push	r4
    1238:	5f 92       	push	r5
    123a:	6f 92       	push	r6
    123c:	7f 92       	push	r7
    123e:	8f 92       	push	r8
    1240:	9f 92       	push	r9
    1242:	af 92       	push	r10
    1244:	bf 92       	push	r11
    1246:	cf 92       	push	r12
    1248:	df 92       	push	r13
    124a:	ef 92       	push	r14
    124c:	ff 92       	push	r15
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	ca 1b       	sub	r28, r26
    125c:	db 0b       	sbc	r29, r27
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	de bf       	out	0x3e, r29	; 62
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	cd bf       	out	0x3d, r28	; 61
    1268:	09 94       	ijmp

0000126a <__epilogue_restores__>:
    126a:	2a 88       	ldd	r2, Y+18	; 0x12
    126c:	39 88       	ldd	r3, Y+17	; 0x11
    126e:	48 88       	ldd	r4, Y+16	; 0x10
    1270:	5f 84       	ldd	r5, Y+15	; 0x0f
    1272:	6e 84       	ldd	r6, Y+14	; 0x0e
    1274:	7d 84       	ldd	r7, Y+13	; 0x0d
    1276:	8c 84       	ldd	r8, Y+12	; 0x0c
    1278:	9b 84       	ldd	r9, Y+11	; 0x0b
    127a:	aa 84       	ldd	r10, Y+10	; 0x0a
    127c:	b9 84       	ldd	r11, Y+9	; 0x09
    127e:	c8 84       	ldd	r12, Y+8	; 0x08
    1280:	df 80       	ldd	r13, Y+7	; 0x07
    1282:	ee 80       	ldd	r14, Y+6	; 0x06
    1284:	fd 80       	ldd	r15, Y+5	; 0x05
    1286:	0c 81       	ldd	r16, Y+4	; 0x04
    1288:	1b 81       	ldd	r17, Y+3	; 0x03
    128a:	aa 81       	ldd	r26, Y+2	; 0x02
    128c:	b9 81       	ldd	r27, Y+1	; 0x01
    128e:	ce 0f       	add	r28, r30
    1290:	d1 1d       	adc	r29, r1
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	ed 01       	movw	r28, r26
    129e:	08 95       	ret

000012a0 <_exit>:
    12a0:	f8 94       	cli

000012a2 <__stop_program>:
    12a2:	ff cf       	rjmp	.-2      	; 0x12a2 <__stop_program>
